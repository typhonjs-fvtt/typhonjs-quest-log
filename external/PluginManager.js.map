{"version":3,"file":"PluginManager.js","sources":["../../node_modules/@typhonjs-plugin/eventbus/src/utils.js","../../node_modules/@typhonjs-plugin/eventbus/src/Eventbus.js","../../node_modules/@typhonjs-plugin/eventbus/src/EventbusProxy.js","../../node_modules/@typhonjs-plugin/eventbus/src/EventbusSecure.js","../../node_modules/@typhonjs-plugin/eventbus/src/index.js","../../node_modules/@typhonjs-utils/loader-module/src/browser/ModuleLoader.js","../../src/PluginEntry.js","../../node_modules/@typhonjs-utils/object/src/functions.js","../../src/support/invoke/PluginInvokeEvent.js","../../src/support/invoke/invokeAsyncEvent.js","../../src/utils/escapeTarget.js","../../src/utils/isValidConfig.js","../../src/utils/resolveModule.js","../../src/support/invoke/PluginInvokeSupport.js","../../src/support/invoke/invokeSyncEvent.js","../../src/PluginManager.js"],"sourcesContent":["/**\n * Regular expression used to split event strings.\n *\n * @type {RegExp}\n */\nexport const eventSplitter = /\\s+/;\n\n/**\n * Iterates over the standard `event, callback` (as well as the fancy multiple space-separated events `\"change blur\",\n * callback` and jQuery-style event maps `{event: callback}`).\n *\n * @template T\n *\n * @param {Function}       iteratee - Event operation to invoke.\n *\n * @param {T}              events - Events object\n *\n * @param {string|object}  name - A single event name, compound event names, or a hash of event names.\n *\n * @param {Function}       callback - Event callback function\n *\n * @param {object}         opts - Optional parameters\n *\n * @returns {T} Events object or processed data.\n */\nexport function eventsAPI(iteratee, events, name, callback, opts)\n{\n   let i = 0, names;\n   if (name && typeof name === 'object')\n   {\n      // Handle event maps.\n      if (callback !== void 0 && 'context' in opts && opts.context === void 0) { opts.context = callback; }\n      for (names = objectKeys(name); i < names.length; i++)\n      {\n         events = eventsAPI(iteratee, events, names[i], name[names[i]], opts);\n      }\n   }\n   else if (name && eventSplitter.test(name))\n   {\n      // Handle space-separated event names by delegating them individually.\n      for (names = name.split(eventSplitter); i < names.length; i++)\n      {\n         events = iteratee(events, names[i], callback, opts);\n      }\n   }\n   else\n   {\n      // Finally, standard events.\n      events = iteratee(events, name, callback, opts);\n   }\n   return events;\n}\n\n/**\n * Returns a string to output for error messages including any eventbus name.\n *\n * @param {Eventbus|EventbusProxy|EventbusSecure} eventbus - The eventbus to format.\n *\n * @returns {string} A string representing the eventbus.\n */\nexport function getErrorName(eventbus)\n{\n   const name = eventbus.name;\n   return name !== '' ? `[${name}] ` : '';\n}\n\n/**\n * Provides  protected Object.keys functionality.\n *\n * @param {object}   object - Object to retrieve keys.\n *\n * @returns {string[]} Keys of object if any.\n */\nexport const objectKeys = (object) =>\n{\n   return object === null || typeof object !== 'object' ? [] : Object.keys(object);\n};\n\n/**\n * Reduces the event callbacks into a map of `{event: beforeWrapper}`. `after` unbinds the `beforeWrapper` after\n * it has been called the number of times specified by options.count.\n *\n * @param {Events}   map - Events object\n *\n * @param {string}   name - Event name\n *\n * @param {Function} callback - Event callback\n *\n * @param {object}   opts - Function to invoke after event has been triggered once; `off()`\n *\n * @returns {Events} The Events object.\n */\nexport function beforeMap(map, name, callback, opts)\n{\n   const after = opts.after;\n   const count = opts.count + 1;\n\n   if (callback)\n   {\n      const beforeWrapper = map[name] = s_BEFORE(count, function()\n      {\n         return callback.apply(this, arguments);\n      }, () => { after(name, beforeWrapper); });\n\n      beforeWrapper._callback = callback;\n   }\n   return map;\n}\n\n// Module Private ----------------------------------------------------------------------------------------------------\n\n/**\n * Creates a function that invokes `before`, with the `this` binding and arguments of the created function, while\n * it's called less than `count` times. Subsequent calls to the created function return the result of the last `before`\n * invocation.\n *\n * `after` is invoked after the count is reduced.\n *\n * @param {number}   count - The number of calls at which `before` is no longer invoked and then `after` is invoked.\n *\n * @param {Function} before - The function to restrict.\n *\n * @param {Function} after - The function to invoke after count number of calls.\n *\n * @returns {Function} Returns the new restricted function.\n */\nconst s_BEFORE = function(count, before, after)\n{\n   let result;\n\n   return function(...args)\n   {\n      if (--count > 0) { result = before.apply(this, args); }\n\n      if (count <= 1)\n      {\n         if (after) { after.apply(this, args); }\n         after = void 0;\n         before = void 0;\n      }\n\n      return result;\n   };\n};\n","import * as Utils from './utils.js';\n\n/**\n * `@typhonjs-plugin/eventbus` / Provides the ability to bind and trigger custom named events.\n *\n * This module is an evolution of Backbone Events. (http://backbonejs.org/#Events). Eventbus extends the\n * functionality provided in Backbone Events with additional triggering methods to receive asynchronous and\n * synchronous results.\n *\n * ---------------\n */\nexport default class Eventbus\n{\n   /**\n    * Stores the name of this eventbus.\n    *\n    * @type {string}\n    * @private\n    */\n   #name = '';\n\n   /**\n    * Stores the events map for associated events and callback / context data.\n    *\n    * @type {Events|{}}\n    * @private\n    */\n   #events;\n\n   /**\n    * Provides a constructor which optionally takes the eventbus name.\n    *\n    * @param {string}   name - Optional eventbus name.\n    */\n   constructor(name = '')\n   {\n      if (typeof name !== 'string') { throw new TypeError(`'name' is not a string`); }\n\n      this.#name = name;\n\n      /**\n       * Stores the Listening instances for this context.\n       *\n       * @type {object.<string, Listening>}\n       * @private\n       */\n      this._listeners = void 0;\n\n      /**\n       * A unique ID set when listened to.\n       *\n       * @type {string}\n       * @private\n       */\n      this._listenId = void 0;\n\n      /**\n       * Stores the Listening instances for other contexts.\n       *\n       * @type {object.<string, Listening>}\n       * @private\n       */\n      this._listeningTo = void 0;\n   }\n\n   /**\n    * Just like `on`, but causes the bound callback to fire several times up to the count specified before being\n    * removed. When multiple events are passed in using the space separated syntax, the event\n    * will fire count times for every event you passed in, not once for a combination of all events.\n    *\n    * @param {number}            count - Number of times the function will fire before being removed.\n    *\n    * @param {string|object}     name - Event name(s) or event map.\n    *\n    * @param {Function|object}   callback - Event callback function or context for event map.\n    *\n    * @param {object}            [context] - Event context\n    *\n    * @param {OnOptions}         [options] - Event registration options.\n    *\n    * @returns {Eventbus} This Eventbus instance.\n    */\n   before(count, name, callback, context = void 0, options = {})\n   {\n      if (!Number.isInteger(count)) { throw new TypeError(`'count' is not an integer`); }\n\n      const data = {};\n      if (this.isGuarded(name, data))\n      {\n         console.warn(`@typhonjs-plugin/eventbus ${Utils.getErrorName(this)}`\n          + `- before() failed as event name(s) are guarded: ${JSON.stringify(data.names)}`);\n         return this;\n      }\n\n      // Map the event into a `{event: beforeWrapper}` object.\n      const events = Utils.eventsAPI(Utils.beforeMap, {}, name, callback, { count, after: this.off.bind(this) });\n\n      if (typeof name === 'string' && (context === null || context === void 0)) { callback = void 0; }\n\n      return this.on(events, callback, context, options);\n   }\n\n   /**\n    * Returns an iterable for all stored events yielding an array with event name, callback function, and event context.\n    *\n    * @param {RegExp} [regex] - Optional regular expression to filter event names.\n    *\n    * @yields\n    */\n   *entries(regex = void 0)\n   {\n      if (regex !== void 0 && !(regex instanceof RegExp)) { throw new TypeError(`'regex' is not a RegExp`); }\n\n      if (!this.#events) { return; }\n\n      if (regex)\n      {\n         for (const name in this.#events)\n         {\n            if (regex.test(name))\n            {\n               for (const event of this.#events[name])\n               {\n                  yield [name, event.callback, event.context, JSON.parse(JSON.stringify(event.options))];\n               }\n            }\n         }\n      }\n      else\n      {\n         for (const name in this.#events)\n         {\n            for (const event of this.#events[name])\n            {\n               yield [name, event.callback, event.context, JSON.parse(JSON.stringify(event.options))];\n            }\n         }\n      }\n   }\n\n   /**\n    * Returns the current event count.\n    *\n    * @returns {number} Returns the current event count.\n    */\n   get eventCount()\n   {\n      if (!this.#events) { return 0; }\n\n      return Object.keys(this.#events).length;\n   }\n\n   /**\n    * Returns the current callback count.\n    *\n    * @returns {number} The current callback count.\n    */\n   get callbackCount()\n   {\n      if (!this.#events) { return 0; }\n\n      let count = 0;\n\n      for (const name in this.#events) { count += this.#events[name].length; }\n\n      return count;\n   }\n\n   /**\n    * Returns whether an event name is guarded.\n    *\n    * @param {string|object}  name - Event name(s) or event map to verify.\n    *\n    * @param {object}         [data] - Stores the output of which names are guarded.\n    *\n    * @returns {boolean} Whether the given event name is guarded.\n    */\n   isGuarded(name, data = {})\n   {\n      data.names = [];\n      data.guarded = false;\n\n      const result = Utils.eventsAPI(s_IS_GUARDED, data, name, void 0, { events: this.#events });\n\n      return result.guarded;\n   }\n\n   /**\n    * Returns an iterable for the event names / keys of registered event listeners.\n    *\n    * @param {RegExp} [regex] - Optional regular expression to filter event names.\n    *\n    * @yields\n    */\n   *keys(regex = void 0)\n   {\n      if (regex !== void 0 && !(regex instanceof RegExp)) { throw new TypeError(`'regex' is not a RegExp`); }\n\n      if (!this.#events) { return; }\n\n      if (regex)\n      {\n         for (const name in this.#events)\n         {\n            if (regex.test(name))\n            {\n               yield name;\n            }\n         }\n      }\n      else\n      {\n         for (const name in this.#events)\n         {\n            yield name;\n         }\n      }\n   }\n\n   /**\n    * Returns the current eventbus name.\n    *\n    * @returns {string} The current eventbus name.\n    */\n   get name()\n   {\n      return this.#name;\n   }\n\n   /**\n    * Tell an object to listen to a particular event on an other object. The advantage of using this form, instead of\n    * other.on(event, callback, object), is that listenTo allows the object to keep track of the events, and they can\n    * be removed all at once later on. The callback will always be called with object as context.\n    *\n    * @example\n    * view.listenTo(model, 'change', view.render);\n    *\n    * @param {object}            obj - Event context\n    *\n    * @param {string|object}     name - Event name(s) or event map.\n    *\n    * @param {Function|object}   callback - Event callback function or context for event map.\n    *\n    * @returns {Eventbus} This Eventbus instance.\n    */\n   listenTo(obj, name, callback)\n   {\n      if (!obj) { return this; }\n\n      const data = {};\n      if (s_TRY_CATCH_IS_GUARDED(obj, name, data))\n      {\n         console.warn(`@typhonjs-plugin/eventbus ${Utils.getErrorName(this)}`\n          + `- listenTo() failed as event name(s) are guarded for target object: ${JSON.stringify(data.names)}`);\n         return this;\n      }\n\n      const id = obj._listenId || (obj._listenId = s_UNIQUE_ID('l'));\n      const listeningTo = this._listeningTo || (this._listeningTo = {});\n      let listening = _listening = listeningTo[id];\n\n      // This object is not listening to any other events on `obj` yet.\n      // Setup the necessary references to track the listening callbacks.\n      if (!listening)\n      {\n         this._listenId || (this._listenId = s_UNIQUE_ID('l'));\n         listening = _listening = listeningTo[id] = new Listening(this, obj);\n      }\n\n      // Bind callbacks on obj.\n      const error = s_TRY_CATCH_ON(obj, name, callback, this);\n      _listening = void 0;\n\n      if (error) { throw error; }\n\n      // If the target obj is not an Eventbus, track events manually.\n      if (listening.interop) { listening.on(name, callback); }\n\n      return this;\n   }\n\n   /**\n    * Just like `listenTo`, but causes the bound callback to fire count times before being removed.\n    *\n    * @param {number}            count - Number of times the function will fire before being removed.\n    *\n    * @param {object}            obj - Target event context.\n    *\n    * @param {string|object}     name - Event name(s) or event map.\n    *\n    * @param {Function|object}   callback - Event callback function or context for event map.\n    *\n    * @returns {Eventbus} This Eventbus instance.\n    */\n   listenToBefore(count, obj, name, callback)\n   {\n      if (!Number.isInteger(count)) { throw new TypeError(`'count' is not an integer`); }\n\n      // Map the event into a `{event: beforeWrapper}` object.\n      const events = Utils.eventsAPI(Utils.beforeMap, {}, name, callback, {\n         count,\n         after: this.stopListening.bind(this, obj)\n      });\n\n      return this.listenTo(obj, events);\n   }\n\n   /**\n    * Just like `listenTo`, but causes the bound callback to fire only once before being removed.\n    *\n    * @param {object}            obj - Target event context\n    *\n    * @param {string|object}     name - Event name(s) or event map.\n    *\n    * @param {Function|object}   callback - Event callback function or context for event map.\n    *\n    * @returns {Eventbus} This Eventbus instance.\n    */\n   listenToOnce(obj, name, callback)\n   {\n      // Map the event into a `{event: beforeWrapper}` object.\n      const events = Utils.eventsAPI(Utils.beforeMap, {}, name, callback, {\n         count: 1,\n         after: this.stopListening.bind(this, obj)\n      });\n\n      return this.listenTo(obj, events);\n   }\n\n   /**\n    * Remove a previously-bound callback function from an object. If no context is specified, all of the versions of\n    * the callback with different contexts will be removed. If no callback is specified, all callbacks for the event\n    * will be removed. If no event is specified, callbacks for all events will be removed.\n    *\n    * Note that calling model.off(), for example, will indeed remove all events on the model — including events that\n    * Backbone uses for internal bookkeeping.\n    *\n    * @example\n    * // Removes just the `onChange` callback.\n    * object.off(\"change\", onChange);\n    *\n    * // Removes all \"change\" callbacks.\n    * object.off(\"change\");\n    *\n    * // Removes the `onChange` callback for all events.\n    * object.off(null, onChange);\n    *\n    * // Removes all callbacks for `context` for all events.\n    * object.off(null, null, context);\n    *\n    * // Removes all callbacks on `object`.\n    * object.off();\n    *\n    * @param {string|object}  [name] - Event name(s) or event map.\n    *\n    * @param {Function}       [callback] - Event callback function\n    *\n    * @param {object}         [context] - Event context\n    *\n    * @returns {Eventbus} This Eventbus instance.\n    */\n   off(name, callback = void 0, context = void 0)\n   {\n      if (!this.#events) { return this; }\n\n      this.#events = Utils.eventsAPI(s_OFF_API, this.#events, name, callback, { context, listeners: this._listeners });\n\n      return this;\n   }\n\n   /**\n    * Bind a callback function to an object. The callback will be invoked whenever the event is fired. If you have a\n    * large number of different events on a page, the convention is to use colons to namespace them: \"poll:start\", or\n    * \"change:selection\".\n    *\n    * To supply a context value for this when the callback is invoked, pass the optional last argument:\n    * model.on('change', this.render, this) or model.on({change: this.render}, this).\n    *\n    * @example\n    * The event string may also be a space-delimited list of several events...\n    * book.on(\"change:title change:author\", ...);\n    *\n    * @example\n    * Callbacks bound to the special \"all\" event will be triggered when any event occurs, and are passed the name of\n    * the event as the first argument. For example, to proxy all events from one object to another:\n    * proxy.on(\"all\", function(eventName) {\n    *    object.trigger(eventName);\n    * });\n    *\n    * @example\n    * All Backbone event methods also support an event map syntax, as an alternative to positional arguments:\n    * book.on({\n    *    \"change:author\": authorPane.update,\n    *    \"change:title change:subtitle\": titleView.update,\n    *    \"destroy\": bookView.remove\n    * });\n    *\n    * @param {string|object}     name - Event name(s) or event map.\n    *\n    * @param {Function|object}   callback - Event callback function or context for event map.\n    *\n    * @param {object}            [context] - Event context\n    *\n    * @param {OnOptions}         [options] - Event registration options.\n    *\n    * @returns {Eventbus} This Eventbus instance.\n    */\n   on(name, callback, context = void 0, options = {})\n   {\n      if (options == null || options.constructor !== Object)   // eslint-disable-line eqeqeq\n      {\n         throw new TypeError(`'options' must be an object literal.`);\n      }\n\n      const data = {};\n      if (this.isGuarded(name, data))\n      {\n         console.warn(`@typhonjs-plugin/eventbus ${Utils.getErrorName(this)}`\n          + `- on() failed as event name(s) are guarded: ${JSON.stringify(data.names)}`);\n         return this;\n      }\n\n      this.#events = Utils.eventsAPI(s_ON_API, this.#events || {}, name, callback, {\n         context,\n         ctx: this,\n         options,\n         listening: _listening\n      });\n\n      if (_listening)\n      {\n         const listeners = this._listeners || (this._listeners = {});\n         listeners[_listening.id] = _listening;\n\n         // Allow the listening to use a counter, instead of tracking callbacks for library interop.\n         _listening.interop = false;\n      }\n\n      return this;\n   }\n\n   /**\n    * Just like `on`, but causes the bound callback to fire only once before being removed. Handy for saying \"the next\n    * time that X happens, do this\". When multiple events are passed in using the space separated syntax, the event\n    * will fire once for every event you passed in, not once for a combination of all events\n    *\n    * @param {string|object}     name - Event name(s) or event map.\n    *\n    * @param {Function|object}   callback - Event callback function or context for event map.\n    *\n    * @param {object}            [context] - Event context.\n    *\n    * @param {OnOptions}         [options] - Event registration options.\n    *\n    * @returns {Eventbus} This Eventbus instance.\n    */\n   once(name, callback, context = void 0, options = {})\n   {\n      const data = {};\n      if (this.isGuarded(name, data))\n      {\n         console.warn(`@typhonjs-plugin/eventbus ${Utils.getErrorName(this)}`\n          + `- once() failed as event name(s) are guarded: ${JSON.stringify(data.names)}`);\n         return this;\n      }\n\n      // Map the event into a `{event: beforeWrapper}` object.\n      const events = Utils.eventsAPI(Utils.beforeMap, {}, name, callback, { count: 1, after: this.off.bind(this) });\n\n      if (typeof name === 'string' && (context === null || context === void 0)) { callback = void 0; }\n\n      return this.on(events, callback, context, options);\n   }\n\n   /**\n    * Tell an object to stop listening to events. Either call stopListening with no arguments to have the object remove\n    * all of its registered callbacks ... or be more precise by telling it to remove just the events it's listening to\n    * on a specific object, or a specific event, or just a specific callback.\n    *\n    * @example\n    * view.stopListening();\n    *\n    * view.stopListening(model);\n    *\n    * @param {object}   obj - Event context\n    *\n    * @param {string}   [name] - Event name(s)\n    *\n    * @param {Function} [callback] - Event callback function\n    *\n    * @returns {Eventbus} This Eventbus instance.\n    */\n   stopListening(obj, name = void 0, callback = void 0)\n   {\n      const listeningTo = this._listeningTo;\n      if (!listeningTo) { return this; }\n\n      const ids = obj ? [obj._listenId] : Utils.objectKeys(listeningTo);\n\n      for (let i = 0; i < ids.length; i++)\n      {\n         const listening = listeningTo[ids[i]];\n\n         // If listening doesn't exist, this object is not currently listening to obj. Break out early.\n         if (!listening) { break; }\n\n         listening.obj.off(name, callback, this);\n\n         if (listening.interop) { listening.off(name, callback); }\n      }\n\n      return this;\n   }\n\n   /**\n    * Trigger callbacks for the given event, or space-delimited list of events. Subsequent arguments to trigger will be\n    * passed along to the event callbacks.\n    *\n    * @param {string}   name - Event name(s)\n    *\n    * @param {...*}     args - Additional arguments passed to the event function(s).\n    *\n    * @returns {Eventbus} This Eventbus instance.\n    */\n   trigger(name, ...args)\n   {\n      if (!this.#events) { return this; }\n\n      s_RESULTS_TARGET_API(s_TRIGGER_API, s_TRIGGER_EVENTS, this.#events, name, void 0, args);\n\n      return this;\n   }\n\n   /**\n    * Provides `trigger` functionality, but collects any returned Promises from invoked targets and returns a\n    * single Promise generated by `Promise.resolve` for a single value or `Promise.all` for multiple results. This is\n    * a very useful mechanism to invoke asynchronous operations over an eventbus.\n    *\n    * @param {string}   name - Event name(s)\n    *\n    * @param {...*}     args - Additional arguments passed to the event function(s).\n    *\n    * @returns {Promise<void|*|*[]>} A Promise with any results.\n    */\n   async triggerAsync(name, ...args)\n   {\n      if (!this.#events) { return void 0; }\n\n      const result = s_RESULTS_TARGET_API(s_TRIGGER_API, s_TRIGGER_ASYNC_EVENTS, this.#events, name, void 0, args);\n\n      // No event callbacks were triggered.\n      if (result === void 0) { return void 0; }\n\n      // A single Promise has been returned; just return it.\n      if (!Array.isArray(result)) { return result; }\n\n      // Multiple events & callbacks have been triggered so reduce the returned array of Promises and filter all\n      // values from each Promise result removing any undefined values.\n      return Promise.all(result).then((results) =>\n      {\n         let allResults = [];\n\n         for (const pResult of results)\n         {\n            if (Array.isArray(pResult))\n            {\n               allResults = allResults.concat(pResult);\n            }\n            else if (pResult !== void 0)\n            {\n               allResults.push(pResult);\n            }\n         }\n\n         return allResults.length > 1 ? allResults : allResults.length === 1 ? allResults[0] : void 0;\n      });\n   }\n\n   /**\n    * Defers invoking `trigger`. This is useful for triggering events in the next clock tick.\n    *\n    * @param {string}   name - Event name(s)\n    *\n    * @param {...*}     args - Additional arguments passed to the event function(s).\n    *\n    * @returns {Eventbus} This Eventbus instance.\n    */\n   triggerDefer(name, ...args)\n   {\n      setTimeout(() => { this.trigger(name, ...args); }, 0);\n\n      return this;\n   }\n\n   /**\n    * Provides `trigger` functionality, but collects any returned result or results from invoked targets as a single\n    * value or in an array and passes it back to the callee in a synchronous manner.\n    *\n    * @param {string}   name - Event name(s).\n    *\n    * @param {...*}     args - Additional arguments passed to the event function(s).\n    *\n    * @returns {void|*|*[]} The results of the event invocation.\n    */\n   triggerSync(name, ...args)\n   {\n      if (!this.#events) { return void 0; }\n\n      return s_RESULTS_TARGET_API(s_TRIGGER_API, s_TRIGGER_SYNC_EVENTS, this.#events, name, void 0, args);\n   }\n}\n\n// Private / internal methods ---------------------------------------------------------------------------------------\n\n/**\n * Global listening object\n *\n * @type {Listening}\n */\nlet _listening;\n\n/**\n * A listening class that tracks and cleans up memory bindings when all callbacks have been offed.\n */\nclass Listening\n{\n   /**\n    * @type {Events|{}}\n    */\n   #events;\n\n   /**\n    * @type {string}\n    */\n   #id;\n\n   /**\n    * @type {object}\n    */\n   #listener;\n\n   /**\n    * @type {object}\n    */\n   #obj;\n\n   /**\n    * @type {boolean}\n    */\n   #interop;\n\n   /**\n    * Current listening count.\n    *\n    * @type {number}\n    */\n   #count = 0;\n\n   constructor(listener, obj)\n   {\n      this.#id = listener._listenId;\n      this.#listener = listener;\n      this.#obj = obj;\n      this.#interop = true;\n   }\n\n   // Cleans up memory bindings between the listener and the listenee.\n   cleanup()\n   {\n      delete this.#listener._listeningTo[this.#obj._listenId];\n      if (!this.#interop) { delete this.#obj._listeners[this.#id]; }\n   }\n\n   get id() { return this.#id; }\n\n   get interop() { return this.#interop; }\n\n   get obj() { return this.#obj; }\n\n   incrementCount() { this.#count++; }\n\n   /**\n    * @see {@link Eventbus#on}\n    *\n    * @param {string|object}     name - Event name(s) or event map.\n    *\n    * @param {Function|object}   callback - Event callback function or context for event map.\n    *\n    * @param {object}            [context] - Event context\n    *\n    * @returns {Listening} This Listening instance.\n    */\n   on(name, callback, context = void 0)\n   {\n      this.#events = Utils.eventsAPI(s_ON_API, this.#events || {}, name, callback,\n      {\n         context,\n         ctx: this,\n         options: {},\n         listening: this\n      });\n\n      return this;\n   }\n\n   /**\n    * Offs a callback (or several). Uses an optimized counter if the listenee uses Eventbus. Otherwise, falls back to\n    * manual tracking to support events library interop.\n    *\n    * @param {string|object}     [name] - Event name(s) or event map.\n    *\n    * @param {Function|object}   [callback] - Event callback function or context for event map.\n    */\n   off(name, callback)\n   {\n      let cleanup;\n\n      if (this.#interop)\n      {\n         this.#events = Utils.eventsAPI(s_OFF_API, this.#events, name, callback, {\n            context: void 0,\n            listeners: void 0\n         });\n         cleanup = !this.#events;\n      }\n      else\n      {\n         this.#count--;\n         cleanup = this.#count === 0;\n      }\n\n      if (cleanup) { this.cleanup(); }\n   }\n\n   /**\n    * Sets interop.\n    *\n    * @param {boolean} value Value to set.\n    */\n   set interop(value)\n   {\n      /* c8 ignore next 1 */\n      if (typeof value !== 'boolean') { throw new TypeError(`'value' is not a boolean`); }\n      this.#interop = value\n   }\n}\n\n/**\n * The reducing API that tests if an event name is guarded. Any event data of a give event name can have the guarded\n * state set. If so the event name will be added to the output names array and `output.guarded` set to true.\n *\n * @param {object}   output - The output object.\n *\n * @param {string}   name - Event name\n *\n * @param {Function} callback - Event callback\n *\n * @param {object}   opts - Optional parameters\n *\n * @returns {object} The output object.\n */\nconst s_IS_GUARDED = (output, name, callback, opts) =>\n{\n   const events = opts.events;\n\n   if (events)\n   {\n      const handlers = events[name];\n\n      if (Array.isArray(handlers))\n      {\n         for (const handler of handlers)\n         {\n            if (handler.options.guard)\n            {\n                output.names.push(name);\n                output.guarded = true;\n                return output;\n            }\n         }\n      }\n   }\n\n   return output;\n}\n\n/**\n * The reducing API that removes a callback from the `events` object.\n *\n * @param {Events}   events - Events object\n *\n * @param {string}   name - Event name\n *\n * @param {Function} callback - Event callback\n *\n * @param {object}   opts - Optional parameters\n *\n * @returns {void|Events} Events object\n */\nconst s_OFF_API = (events, name, callback, opts) =>\n{\n   /* c8 ignore next 1 */\n   if (!events) { return; }\n\n   const context = opts.context, listeners = opts.listeners;\n   let i = 0, names;\n\n   // Delete all event listeners and \"drop\" events.\n   if (!name && !context && !callback)\n   {\n      for (names = Utils.objectKeys(listeners); i < names.length; i++)\n      {\n         listeners[names[i]].cleanup();\n      }\n      return;\n   }\n\n   names = name ? [name] : Utils.objectKeys(events);\n\n   for (; i < names.length; i++)\n   {\n      name = names[i];\n      const handlers = events[name];\n\n      // Bail out if there are no events stored.\n      if (!handlers) { break; }\n\n      // Find any remaining events.\n      const remaining = [];\n      for (let j = 0; j < handlers.length; j++)\n      {\n         const handler = handlers[j];\n         if (callback && callback !== handler.callback && callback !== handler.callback._callback ||\n          context && context !== handler.context)\n         {\n            remaining.push(handler);\n         }\n         else\n         {\n            const listening = handler.listening;\n            if (listening) { listening.off(name, callback); }\n         }\n      }\n\n      // Replace events if there are any remaining.  Otherwise, clean up.\n      if (remaining.length)\n      {\n         events[name] = remaining;\n      }\n      else\n      {\n         delete events[name];\n      }\n   }\n\n   return events;\n};\n\n/**\n * The reducing API that adds a callback to the `events` object.\n *\n * @param {Events}   events - Events object\n *\n * @param {string}   name - Event name\n *\n * @param {Function} callback - Event callback\n *\n * @param {object}   opts - Optional parameters\n *\n * @returns {Events} Events object.\n */\nconst s_ON_API = (events, name, callback, opts) =>\n{\n   if (callback)\n   {\n      const handlers = events[name] || (events[name] = []);\n      const context = opts.context, ctx = opts.ctx, listening = opts.listening;\n\n      // Make a copy of options.\n      const options = JSON.parse(JSON.stringify(opts.options));\n\n      // Ensure that guard is set.\n      options.guard = options.guard !== void 0 && typeof options.guard === 'boolean' ? options.guard : false;\n\n      if (listening) { listening.incrementCount(); }\n\n      handlers.push({ callback, context, ctx: context || ctx, options, listening });\n   }\n   return events;\n};\n\n/**\n * Iterates over the standard `event, callback` (as well as the fancy multiple space-separated events `\"change blur\",\n * callback` and jQuery-style event maps `{event: callback}`).\n *\n * @param {Function} iteratee - Trigger API\n *\n * @param {Function} iterateeTarget - Internal function which is dispatched to.\n *\n * @param {Events|{}}   events - Array of stored event callback data.\n *\n * @param {string}   name - Event name\n *\n * @param {Function} callback - callback\n *\n * @param {object}   opts - Optional parameters\n *\n * @returns {*} The results of the callback if any.\n */\nconst s_RESULTS_TARGET_API = (iteratee, iterateeTarget, events, name, callback, opts) =>\n{\n   let results = void 0;\n   let i = 0, names;\n\n   // Handle the case of multiple events being triggered. The potential results of each event & callbacks must be\n   // processed into a single array of results.\n   if (name && Utils.eventSplitter.test(name))\n   {\n      // Handle space-separated event names by delegating them individually.\n      for (names = name.split(Utils.eventSplitter); i < names.length; i++)\n      {\n         const result = iteratee(iterateeTarget, events, names[i], callback, opts);\n\n         // Determine type of `results`; 0: undefined, 1: single value, 2: an array of values.\n         const resultsType = Array.isArray(results) ? 2 : results !== void 0 ? 1 : 0;\n\n         // Handle an array result depending on existing results value.\n         if (Array.isArray(result))\n         {\n            switch (resultsType)\n            {\n               case 0:\n                  // Simply set results.\n                  results = result;\n                  break;\n               case 1:\n                  // Create a new array from existing results then concat the new result array.\n                  results = [results].concat(result);\n                  break;\n               case 2:\n                  // `results` is already an array so concat the new result array.\n                  results = results.concat(result);\n                  break;\n            }\n         }\n         else if (result !== void 0)\n         {\n            switch (resultsType)\n            {\n               case 0:\n                  // Simply set results.\n                  results = result;\n                  break;\n               case 1: {\n                  // Create a new array from existing results then push the new result value.\n                  const newArray = [results];\n                  newArray.push(result);\n                  results = newArray;\n                  break;\n               }\n               case 2:\n                  // `results` is already an array so push the new result array.\n                  results.push(result);\n                  break;\n            }\n         }\n      }\n   }\n   else\n   {\n      // Just single event.\n      results = iteratee(iterateeTarget, events, name, callback, opts);\n   }\n\n   return results;\n};\n\n/**\n * Handles triggering the appropriate event callbacks.\n *\n * @param {Function} iterateeTarget - Internal function which is dispatched to.\n *\n * @param {Events}   objEvents - Array of stored event callback data.\n *\n * @param {string}   name - Event name\n *\n * @param {Function} callback - callback\n *\n * @param {*[]}      args - Arguments supplied to a trigger method.\n *\n * @returns {*} The results from the triggered event.\n */\nconst s_TRIGGER_API = (iterateeTarget, objEvents, name, callback, args) =>\n{\n   let result;\n\n   if (objEvents)\n   {\n      const events = objEvents[name];\n      let allEvents = objEvents.all;\n      if (events && allEvents) { allEvents = allEvents.slice(); }\n      if (events) { result = iterateeTarget(events, args); }\n      if (allEvents) { result = iterateeTarget(allEvents, [name].concat(args)); }\n   }\n\n   return result;\n};\n\n/**\n * A difficult-to-believe, but optimized internal dispatch function for triggering events. Tries to keep the usual\n * cases speedy (most internal Backbone events have 3 arguments).\n *\n * @param {EventData[]} events - Array of stored event callback data.\n *\n * @param {*[]}         args - Event argument array\n */\nconst s_TRIGGER_EVENTS = (events, args) =>\n{\n   let ev, i = -1;\n   const a1 = args[0], a2 = args[1], a3 = args[2], l = events.length;\n\n   switch (args.length)\n   {\n      case 0:\n         while (++i < l) { (ev = events[i]).callback.call(ev.ctx); }\n         return;\n      case 1:\n         while (++i < l) { (ev = events[i]).callback.call(ev.ctx, a1); }\n         return;\n      case 2:\n         while (++i < l) { (ev = events[i]).callback.call(ev.ctx, a1, a2); }\n         return;\n      case 3:\n         while (++i < l) { (ev = events[i]).callback.call(ev.ctx, a1, a2, a3); }\n         return;\n      default:\n         while (++i < l) { (ev = events[i]).callback.apply(ev.ctx, args); }\n         return;\n   }\n};\n\n/**\n * A difficult-to-believe, but optimized internal dispatch function for triggering events. Tries to keep the usual\n * cases speedy (most internal Backbone events have 3 arguments). This dispatch method uses ES6 Promises and adds\n * any returned results to an array which is added to a Promise.all construction which passes back a Promise which\n * waits until all Promises complete. Any target invoked may return a Promise or any result. This is very useful to\n * use for any asynchronous operations.\n *\n * @param {EventData[]} events - Array of stored event callback data.\n *\n * @param {*[]}         args - Arguments supplied to `triggerAsync`.\n *\n * @returns {Promise<void|*|*[]>} A Promise of the results from the triggered event.\n */\nconst s_TRIGGER_ASYNC_EVENTS = async (events, args) =>\n{\n   let ev, i = -1;\n   const a1 = args[0], a2 = args[1], a3 = args[2], l = events.length;\n\n   const results = [];\n\n   switch (args.length)\n   {\n      case 0:\n         while (++i < l)\n         {\n            const result = (ev = events[i]).callback.call(ev.ctx);\n\n            // If we received a valid result add it to the promises array.\n            if (result !== void 0) { results.push(result); }\n         }\n         break;\n\n      case 1:\n         while (++i < l)\n         {\n            const result = (ev = events[i]).callback.call(ev.ctx, a1);\n\n            // If we received a valid result add it to the promises array.\n            if (result !== void 0) { results.push(result); }\n         }\n         break;\n\n      case 2:\n         while (++i < l)\n         {\n            const result = (ev = events[i]).callback.call(ev.ctx, a1, a2);\n\n            // If we received a valid result add it to the promises array.\n            if (result !== void 0) { results.push(result); }\n         }\n         break;\n\n      case 3:\n         while (++i < l)\n         {\n            const result = (ev = events[i]).callback.call(ev.ctx, a1, a2, a3);\n\n            // If we received a valid result add it to the promises array.\n            if (result !== void 0) { results.push(result); }\n         }\n         break;\n\n      default:\n         while (++i < l)\n         {\n            const result = (ev = events[i]).callback.apply(ev.ctx, args);\n\n            // If we received a valid result add it to the promises array.\n            if (result !== void 0) { results.push(result); }\n         }\n         break;\n   }\n\n   // If there are multiple results then use Promise.all otherwise Promise.resolve. Filter out any undefined results.\n   return results.length > 1 ? Promise.all(results).then((values) =>\n   {\n      const filtered = values.filter((entry) => entry !== void 0);\n      switch (filtered.length)\n      {\n         case 0: return void 0;\n         case 1: return filtered[0];\n         default: return filtered;\n      }\n   }) : results.length === 1 ? results[0] : void 0;\n};\n\n/**\n * A difficult-to-believe, but optimized internal dispatch function for triggering events. Tries to keep the usual\n * cases speedy (most internal Backbone events have 3 arguments). This dispatch method synchronously passes back a\n * single value or an array with all results returned by any invoked targets.\n *\n * @param {EventData[]} events - Array of stored event callback data.\n *\n * @param {*[]}         args - Arguments supplied to `triggerSync`.\n *\n * @returns {void|*|*[]} The results from the triggered event.\n */\nconst s_TRIGGER_SYNC_EVENTS = (events, args) =>\n{\n   let ev, i = -1;\n   const a1 = args[0], a2 = args[1], a3 = args[2], l = events.length;\n\n   const results = [];\n\n   switch (args.length)\n   {\n      case 0:\n         while (++i < l)\n         {\n            const result = (ev = events[i]).callback.call(ev.ctx);\n\n            // If we received a valid result return immediately.\n            if (result !== void 0) { results.push(result); }\n         }\n         break;\n      case 1:\n         while (++i < l)\n         {\n            const result = (ev = events[i]).callback.call(ev.ctx, a1);\n\n            // If we received a valid result return immediately.\n            if (result !== void 0) { results.push(result); }\n         }\n         break;\n      case 2:\n         while (++i < l)\n         {\n            const result = (ev = events[i]).callback.call(ev.ctx, a1, a2);\n\n            // If we received a valid result return immediately.\n            if (result !== void 0) { results.push(result); }\n         }\n         break;\n      case 3:\n         while (++i < l)\n         {\n            const result = (ev = events[i]).callback.call(ev.ctx, a1, a2, a3);\n\n            // If we received a valid result return immediately.\n            if (result !== void 0) { results.push(result); }\n         }\n         break;\n      default:\n         while (++i < l)\n         {\n            const result = (ev = events[i]).callback.apply(ev.ctx, args);\n\n            // If we received a valid result return immediately.\n            if (result !== void 0) { results.push(result); }\n         }\n         break;\n   }\n\n   // Return the results array if there are more than one or just a single result.\n   return results.length > 1 ? results : results.length === 1 ? results[0] : void 0;\n};\n\n/**\n * A try-catch guarded function. Used when attempting to invoke `isGuarded` from an other eventbus / context via\n * `listenTo`.\n *\n * @param {object}         obj - Event target / context\n *\n * @param {string|object}  name - Event name(s) or event map.\n *\n * @param {object}         data - Output data.\n *\n * @returns {boolean} Any error if thrown.\n */\nconst s_TRY_CATCH_IS_GUARDED = (obj, name, data = {}) =>\n{\n   let guarded = false;\n\n   try\n   {\n      const result = obj.isGuarded(name, data);\n      if (typeof result === 'boolean') { guarded = result; }\n   }\n   catch (err)\n   {\n      guarded = false;\n      data.names = [];\n      data.guarded = false;\n   }\n\n   return guarded;\n};\n\n/**\n * A try-catch guarded #on function, to prevent poisoning the global `_listening` variable. Used when attempting to\n * invoke `on` from an other eventbus / context via `listenTo`.\n *\n * @param {object}            obj - Event target / context\n *\n * @param {string|object}     name - Event name(s) or event map.\n *\n * @param {Function|object}   callback - Event callback function or context for event map.\n *\n * @param {object}            [context] - Event context\n *\n * @returns {Error} Any error if thrown.\n */\nconst s_TRY_CATCH_ON = (obj, name, callback, context) =>\n{\n   try\n   {\n      obj.on(name, callback, context);\n   }\n   catch (err)\n   {\n      return err;\n   }\n};\n\n/**\n * Generate a unique integer ID (unique within the entire client session).\n *\n * @type {number} - unique ID counter.\n */\nlet idCounter = 0;\n\n/**\n * Creates a new unique ID with a given prefix\n *\n * @param {string}   prefix - An optional prefix to add to unique ID.\n *\n * @returns {string} A new unique ID with a given prefix.\n */\nconst s_UNIQUE_ID = (prefix = '') =>\n{\n   const id = `${++idCounter}`;\n   return prefix ? `${prefix}${id}` /* c8 ignore next */ : id;\n};\n","import * as Utils     from './utils.js';\n\n/**\n * EventbusProxy provides a protected proxy of another Eventbus instance.\n *\n * The main use case of EventbusProxy is to allow indirect access to an eventbus. This is handy when it comes to\n * managing the event lifecycle for a plugin system. When a plugin is added it could receive a callback, perhaps named\n * `onPluginLoaded`, which contains an EventbusProxy instance rather than the direct eventbus. This EventbusProxy\n * instance is associated in the management system controlling plugin lifecycle. When a plugin is removed / unloaded the\n * management system can automatically unregister all events for the plugin without requiring the plugin author doing it\n * correctly if they had full control. IE This allows to plugin system to guarantee no dangling listeners.\n *\n * EventbusProxy provides the on / off, before, once, and trigger methods with the same signatures as found in\n * Eventbus. However, the proxy tracks all added event bindings which is used to proxy between the target\n * eventbus which is passed in from the constructor. All registration methods (on / off / once) proxy. In addition\n * there is a `destroy` method which will unregister all of proxied events and remove references to the managed\n * eventbus. Any further usage of a destroyed EventbusProxy instance results in a ReferenceError thrown.\n *\n * Finally the EventbusProxy only allows events registered through it to be turned off providing a buffer between\n * any consumers such that they can not turn off other registrations made on the eventbus or other proxy instances.\n */\nexport default class EventbusProxy\n{\n   /**\n    * Stores the target eventbus.\n    *\n    * @type {Eventbus}\n    * @private\n    */\n   #eventbus;\n\n   /**\n    * Stores all proxied event bindings.\n    *\n    * @type {Events|{}}\n    * @private\n    */\n   #events;\n\n   /**\n    * Creates the event proxy with an existing instance of Eventbus.\n    *\n    * @param {Eventbus}   eventbus - The target eventbus instance.\n    */\n   constructor(eventbus)\n   {\n      this.#eventbus = eventbus;\n\n      Object.seal(this);\n   }\n\n   /**\n    * Just like `on`, but causes the bound callback to fire several times up to the count specified before being\n    * removed. When multiple events are passed in using the space separated syntax, the event\n    * will fire count times for every event you passed in, not once for a combination of all events.\n    *\n    * @param {number}            count - Number of times the function will fire before being removed.\n    *\n    * @param {string|object}     name - Event name(s) or event map.\n    *\n    * @param {Function|object}   callback - Event callback function or context for event map.\n    *\n    * @param {object}            [context] - Event context\n    *\n    * @param {ProxyOnOptions}    [options] - Event registration options.\n    *\n    * @returns {EventbusProxy} This EventbusProxy instance.\n    */\n   before(count, name, callback, context = void 0, options = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n      if (!Number.isInteger(count)) { throw new TypeError(`'count' is not an integer`); }\n\n      const data = {};\n      if (this.#eventbus.isGuarded(name, data))\n      {\n         console.warn(`@typhonjs-plugin/eventbus ${Utils.getErrorName(this)}`\n          + `- before() failed as event name(s) are guarded: ${JSON.stringify(data.names)}`);\n         return this;\n      }\n\n      // Map the event into a `{event: beforeWrapper}` object.\n      const events = Utils.eventsAPI(Utils.beforeMap, {}, name, callback, { count, after: this.off.bind(this) });\n\n      if (typeof name === 'string' && (context === null || context === void 0)) { callback = void 0; }\n\n      return this.on(events, callback, context, options);\n   }\n\n   /**\n    * Unregisters all proxied events from the target eventbus and removes any local references. All subsequent calls\n    * after `destroy` has been called result in a ReferenceError thrown.\n    */\n   destroy()\n   {\n      if (this.#eventbus !== null)\n      {\n         this.off();\n      }\n\n      this.#events = void 0;\n\n      this.#eventbus = null;\n   }\n\n   /**\n    * Returns an iterable for all events from the proxied eventbus yielding an array with event name, callback function,\n    * and event context.\n    *\n    * @param {RegExp} [regex] - Optional regular expression to filter event names.\n    *\n    * @yields\n    */\n   *entries(regex = void 0)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      for (const entry of this.#eventbus.entries(regex))\n      {\n         yield entry;\n      }\n   }\n\n   /**\n    * Returns the current proxied eventbus event count.\n    *\n    * @returns {number} Returns the current proxied event count.\n    */\n   get eventCount()\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      return this.#eventbus.eventCount;\n   }\n\n   /**\n    * Returns the current proxied eventbus callback count.\n    *\n    * @returns {number} Returns the current proxied callback count.\n    */\n   get callbackCount()\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      return this.#eventbus.callbackCount;\n   }\n\n   /**\n    * Returns an iterable for the event names / keys of proxied eventbus event listeners.\n    *\n    * @param {RegExp} [regex] - Optional regular expression to filter event names.\n    *\n    * @yields\n    */\n   *keys(regex = void 0)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      for (const entry of this.#eventbus.keys(regex))\n      {\n         yield entry;\n      }\n   }\n\n   /**\n    * Returns whether this EventbusProxy has already been destroyed.\n    *\n    * @returns {boolean} Is destroyed state.\n    */\n   get isDestroyed()\n   {\n      return this.#eventbus === null;\n   }\n\n   /**\n    * Returns the target eventbus name.\n    *\n    * @returns {string} The target eventbus name.\n    */\n   get name()\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      return `proxy-${this.#eventbus.name}`;\n   }\n\n   /**\n    * Returns the current proxied event count.\n    *\n    * @returns {number} Returns the current proxied event count.\n    */\n   get proxyEventCount()\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      if (!this.#events) { return 0; }\n\n      return Object.keys(this.#events).length;\n   }\n\n   /**\n    * Returns the current proxied callback count.\n    *\n    * @returns {number} Returns the current proxied callback count.\n    */\n   get proxyCallbackCount()\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      if (!this.#events) { return 0; }\n\n      let count = 0;\n\n      for (const name in this.#events) { count += this.#events[name].length; }\n\n      return count;\n   }\n\n   /**\n    * Returns whether an event name is guarded.\n    *\n    * @param {string|object}  name - Event name(s) or event map to verify.\n    *\n    * @param {object}         [data] - Stores the output of which names are guarded.\n    *\n    * @returns {boolean} Whether the given event name is guarded.\n    */\n   isGuarded(name, data = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      return this.#eventbus.isGuarded(name, data);\n   }\n\n   /**\n    * Remove a previously-bound proxied event binding.\n    *\n    * Please see {@link Eventbus#off}.\n    *\n    * @param {string|object}  [name] - Event name(s) or event map.\n    *\n    * @param {Function}       [callback] - Event callback function\n    *\n    * @param {object}         [context] - Event context\n    *\n    * @returns {EventbusProxy} This EventbusProxy\n    */\n   off(name = void 0, callback = void 0, context = void 0)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      this.#events = Utils.eventsAPI(s_OFF_API, this.#events || {}, name, callback, {\n         context: context,\n         eventbus: this.#eventbus\n      });\n\n      return this;\n   }\n\n   /**\n    * Bind a callback function to an object. The callback will be invoked whenever the event is fired. If you have a\n    * large number of different events on a page, the convention is to use colons to namespace them: \"poll:start\", or\n    * \"change:selection\".\n    *\n    * Please see {@link Eventbus#on}.\n    *\n    * @param {string|object}     name - Event name(s) or event map.\n    *\n    * @param {Function|object}   callback - Event callback function or context for event map.\n    *\n    * @param {object}            [context] - Event context.\n    *\n    * @param {ProxyOnOptions}    [options] - Event registration options.\n    *\n    * @returns {EventbusProxy} This EventbusProxy\n    */\n   on(name, callback, context = void 0, options = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      if (options == null || options.constructor !== Object)   // eslint-disable-line eqeqeq\n      {\n         throw new TypeError(`'options' must be an object literal.`);\n      }\n\n      const data = {};\n      if (this.#eventbus.isGuarded(name, data))\n      {\n         console.warn(`@typhonjs-plugin/eventbus ${Utils.getErrorName(this)}`\n          + `- on() failed as event name(s) are guarded: ${JSON.stringify(data.names)}`);\n         return this;\n      }\n\n      // Hang onto the options as s_ON_API sets the context we need to pass to the eventbus in `opts.ctx`.\n      const opts = { context, ctx: this, options };\n\n      this.#events = Utils.eventsAPI(s_ON_API, this.#events || {}, name, callback, opts);\n\n      this.#eventbus.on(name, callback, opts.ctx, options);\n\n      return this;\n   }\n\n   /**\n    * Just like `on`, but causes the bound callback to fire only once before being removed. Handy for saying \"the next\n    * time that X happens, do this\". When multiple events are passed in using the space separated syntax, the event\n    * will fire once for every event you passed in, not once for a combination of all events\n    *\n    * @param {string|object}     name - Event name(s) or event map.\n    *\n    * @param {Function|object}   callback - Event callback function or context for event map.\n    *\n    * @param {object}            context - Event context\n    *\n    * @param {ProxyOnOptions}    [options] - Event registration options.\n    *\n    * @returns {EventbusProxy} This EventbusProxy instance.\n    */\n   once(name, callback, context = void 0, options = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      const data = {};\n      if (this.#eventbus.isGuarded(name, data))\n      {\n         console.warn(`@typhonjs-plugin/eventbus ${Utils.getErrorName(this)}`\n          + `- once() failed as event name(s) are guarded: ${JSON.stringify(data.names)}`);\n         return this;\n      }\n\n      // Map the event into a `{event: beforeWrapper}` object.\n      const events = Utils.eventsAPI(Utils.beforeMap, {}, name, callback, { count: 1, after: this.off.bind(this) });\n\n      if (typeof name === 'string' && (context === null || context === void 0)) { callback = void 0; }\n\n      return this.on(events, callback, context, options);\n   }\n\n   /**\n    * Returns an iterable for all stored locally proxied events yielding an array with event name, callback\n    * function, and event context.\n    *\n    * @param {RegExp} [regex] - Optional regular expression to filter event names.\n    *\n    * @yields\n    */\n   *proxyEntries(regex = void 0)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n      if (regex !== void 0 && !(regex instanceof RegExp)) { throw new TypeError(`'regex' is not a RegExp`); }\n\n      if (!this.#events) { return; }\n\n      if (regex)\n      {\n         for (const name in this.#events)\n         {\n            if (regex.test(name))\n            {\n               for (const event of this.#events[name])\n               {\n                  yield [name, event.callback, event.context, JSON.parse(JSON.stringify(event.options))];\n               }\n            }\n         }\n      }\n      else\n      {\n         for (const name in this.#events)\n         {\n            for (const event of this.#events[name])\n            {\n               yield [name, event.callback, event.context, JSON.parse(JSON.stringify(event.options))];\n            }\n         }\n      }\n   }\n\n   /**\n    * Returns an iterable for the event names / keys of the locally proxied event names.\n    *\n    * @param {RegExp} [regex] - Optional regular expression to filter event names.\n    *\n    * @yields\n    */\n   *proxyKeys(regex = void 0)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n      if (regex !== void 0 && !(regex instanceof RegExp)) { throw new TypeError(`'regex' is not a RegExp`); }\n\n      if (!this.#events) { return; }\n\n      if (regex)\n      {\n         for (const name in this.#events)\n         {\n            if (regex.test(name))\n            {\n               yield name;\n            }\n         }\n      }\n      else\n      {\n         for (const name in this.#events)\n         {\n            yield name;\n         }\n      }\n   }\n\n   /**\n    * Trigger callbacks for the given event, or space-delimited list of events. Subsequent arguments to trigger will be\n    * passed along to the event callbacks.\n    *\n    * @param {string}   name - Event name(s)\n    *\n    * @param {...*}     args - Additional arguments passed to the event function(s).\n    *\n    * @returns {EventbusProxy} This EventbusProxy.\n    */\n   trigger(name, ...args)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      this.#eventbus.trigger(name, ...args);\n\n      return this;\n   }\n\n   /**\n    * Provides `trigger` functionality, but collects any returned Promises from invoked targets and returns a\n    * single Promise generated by `Promise.resolve` for a single value or `Promise.all` for multiple results. This is\n    * a very useful mechanism to invoke asynchronous operations over an eventbus.\n    *\n    * @param {string}   name - Event name(s)\n    *\n    * @param {...*}     args - Additional arguments passed to the event function(s).\n    *\n    * @returns {Promise<void|*|*[]>} A Promise returning any results.\n    */\n   triggerAsync(name, ...args)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      return this.#eventbus.triggerAsync(name, ...args);\n   }\n\n   /**\n    * Defers invoking `trigger`. This is useful for triggering events in the next clock tick.\n    *\n    * @param {string}   name - Event name(s)\n    *\n    * @param {...*}     args - Additional arguments passed to the event function(s).\n    *\n    * @returns {EventbusProxy} This EventbusProxy.\n    */\n   triggerDefer(name, ...args)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      this.#eventbus.triggerDefer(name, ...args);\n\n      return this;\n   }\n\n   /**\n    * Provides `trigger` functionality, but collects any returned result or results from invoked targets as a single\n    * value or in an array and passes it back to the callee in a synchronous manner.\n    *\n    * @param {string}   name - Event name(s)\n    *\n    * @param {...*}     args - Additional arguments passed to the event function(s).\n    *\n    * @returns {void|*|*[]} An Array of returned results.\n    */\n   triggerSync(name, ...args)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      return this.#eventbus.triggerSync(name, ...args);\n   }\n}\n\n/**\n * The reducing API that removes a callback from the `events` object. And delegates invoking off to the eventbus\n * reference.\n *\n * @param {Events}   events - Events object\n *\n * @param {string}   name - Event name\n *\n * @param {Function} callback - Event callback\n *\n * @param {object}   opts - Optional parameters\n *\n * @returns {void|Events} Events object\n */\nconst s_OFF_API = (events, name, callback, opts) =>\n{\n   /* c8 ignore next 1 */\n   if (!events) { return; }\n\n   const context = opts.context;\n   const eventbus = opts.eventbus;\n\n   const names = name ? [name] : Utils.objectKeys(events);\n\n   for (let i = 0; i < names.length; i++)\n   {\n      name = names[i];\n      const handlers = events[name];\n\n      // Bail out if there are no events stored.\n      if (!handlers) { break; }\n\n      // Find any remaining events.\n      const remaining = [];\n      for (let j = 0; j < handlers.length; j++)\n      {\n         const handler = handlers[j];\n\n         if (callback && callback !== handler.callback && callback !== handler.callback._callback ||\n          context && context !== handler.context)\n         {\n            remaining.push(handler);\n         }\n      }\n\n      // Replace events if there are any remaining.  Otherwise, clean up.\n      if (remaining.length)\n      {\n         events[name] = remaining;\n      }\n      else\n      {\n         eventbus.off(name, callback, context);\n         delete events[name];\n      }\n   }\n\n   return events;\n};\n\n/**\n * The reducing API that adds a callback to the `events` object.\n *\n * @param {Events}   events - Events object\n *\n * @param {string}   name - Event name\n *\n * @param {Function} callback - Event callback\n *\n * @param {object}   opts - Optional parameters\n *\n * @returns {Events} Events object.\n */\nconst s_ON_API = (events, name, callback, opts) =>\n{\n   if (callback)\n   {\n      const handlers = events[name] || (events[name] = []);\n      const context = opts.context, ctx = opts.ctx;\n\n      // Make a copy of options.\n      const options = JSON.parse(JSON.stringify(opts.options));\n\n      // Ensure that guard is set.\n      options.guard = options.guard !== void 0 && typeof options.guard === 'boolean' ? options.guard : false;\n\n      // Set opts `ctx` as this is what we send to the eventbus.\n      opts.ctx = context || ctx;\n\n      handlers.push({ callback, context, ctx: opts.ctx, options });\n   }\n\n   return events;\n};\n","/**\n * EventbusSecure provides a secure wrapper around another Eventbus instance.\n *\n * The main use case of EventbusSecure is to provide a secure eventbus window for general public consumption. Only\n * events can be triggered, but not registered / unregistered.\n *\n * You must use the initialize method passing in an existing Eventbus instance as the eventbus reference is private.\n * In order to secure the eventbus from unwanted access there is no way to access the eventbus reference externally from\n * the EventbusSecure instance. The initialize method returns an {@link EventbusSecureObj} object which\n * contains two functions to control the secure eventbus externally; `destroy` and `setEventbus`. Expose to end\n * consumers just the `eventbusSecure` instance.\n */\nexport default class EventbusSecure\n{\n   /**\n    * Stores the target eventbus.\n    *\n    * @type {Eventbus}\n    * @private\n    */\n   #eventbus;\n\n   /**\n    * Stores a potentially alternate name instead of returning the wrapped Eventbus instance name.\n    *\n    * @type {string}\n    * @private\n    */\n   #name\n\n   /**\n    * Creates the EventbusSecure instance with an existing instance of Eventbus. An object / EventbusSecureObj is\n    * returned with an EventbusSecure reference and two functions for controlling the underlying Eventbus reference.\n    *\n    * `destroy()` will destroy the underlying Eventbus reference.\n    * `setEventbus(<eventbus>)` will set the underlying reference.\n    *\n    * @param {Eventbus|EventbusProxy}  eventbus - The target eventbus instance.\n    *\n    * @param {string}                  [name] - If a name is provided this will be used instead of eventbus name.\n    *\n    * @returns {EventbusSecureObj} The control object which contains an EventbusSecure reference and control functions.\n    */\n   static initialize(eventbus, name = void 0)\n   {\n      if (name !== void 0 && typeof name !== 'string') { throw new TypeError(`'name' is not a string.`); }\n\n      const eventbusSecure = new EventbusSecure();\n      eventbusSecure.#eventbus = eventbus;\n      eventbusSecure.#name = name === void 0 ? eventbus.name : name;\n      Object.seal(eventbusSecure);\n\n      return {\n         destroy: function()\n         {\n            if (!eventbusSecure.isDestroyed)\n            {\n               eventbusSecure.#eventbus = null;\n\n               if (this) { this.eventbusSecure = void 0 }\n            }\n         },\n\n         setEventbus: function(eventbus, name = void 0)\n         {\n            if (name !== void 0 && typeof name !== 'string') { throw new TypeError(`'name' is not a string.`); }\n\n            if (!eventbusSecure.isDestroyed)\n            {\n               // Adopt the new eventbus name as the current name set matches the wrapped eventbus.\n               if (name === void 0 && eventbusSecure.#name === eventbusSecure.#eventbus.name)\n               {\n                  eventbusSecure.#name = eventbus.name;\n               }\n               else if (name !== void 0)\n               {\n                  eventbusSecure.#name = name;\n               }\n\n               eventbusSecure.#eventbus = eventbus;\n            }\n         },\n\n         eventbusSecure\n      };\n   }\n\n   /**\n    * Returns an iterable for the event names / keys of secured eventbus event listeners.\n    *\n    * @param {RegExp} [regex] - Optional regular expression to filter event names.\n    *\n    * @yields\n    */\n   *keys(regex = void 0)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusSecure instance has been destroyed.'); }\n\n      for (const entry of this.#eventbus.keys(regex))\n      {\n         yield entry;\n      }\n   }\n\n   /**\n    * Returns whether this instance has already been destroyed.\n    *\n    * @returns {boolean} Is destroyed state.\n    */\n   get isDestroyed()\n   {\n      return this.#eventbus === null;\n   }\n\n   /**\n    * Returns the name associated with this instance.\n    *\n    * @returns {string} The target eventbus name.\n    */\n   get name()\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusSecure instance has been destroyed.'); }\n\n      return this.#name;\n   }\n\n   /**\n    * Trigger callbacks for the given event, or space-delimited list of events. Subsequent arguments to trigger will be\n    * passed along to the event callbacks.\n    *\n    * @param {string}   name - Event name(s)\n    *\n    * @param {...*}     args - Additional arguments passed to the event function(s).\n    *\n    * @returns {EventbusSecure} This instance.\n    */\n   trigger(name, ...args)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusSecure instance has been destroyed.'); }\n\n      this.#eventbus.trigger(name, ...args);\n\n      return this;\n   }\n\n   /**\n    * Provides `trigger` functionality, but collects any returned Promises from invoked targets and returns a\n    * single Promise generated by `Promise.resolve` for a single value or `Promise.all` for multiple results. This is\n    * a very useful mechanism to invoke asynchronous operations over an eventbus.\n    *\n    * @param {string}   name - Event name(s)\n    *\n    * @param {...*}     args - Additional arguments passed to the event function(s).\n    *\n    * @returns {Promise<void|*|*[]>} A Promise to returning any results.\n    */\n   triggerAsync(name, ...args)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusSecure instance has been destroyed.'); }\n\n      return this.#eventbus.triggerAsync(name, ...args);\n   }\n\n   /**\n    * Defers invoking `trigger`. This is useful for triggering events in the next clock tick.\n    *\n    * @param {string}   name - Event name(s)\n    *\n    * @param {...*}     args - Additional arguments passed to the event function(s).\n    *\n    * @returns {EventbusSecure} This EventbusProxy.\n    */\n   triggerDefer(name, ...args)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusSecure instance has been destroyed.'); }\n\n      this.#eventbus.triggerDefer(name, ...args);\n\n      return this;\n   }\n\n   /**\n    * Provides `trigger` functionality, but collects any returned result or results from invoked targets as a single\n    * value or in an array and passes it back to the callee in a synchronous manner.\n    *\n    * @param {string}   name - Event name(s)\n    *\n    * @param {...*}     args - Additional arguments passed to the event function(s).\n    *\n    * @returns {void|*|*[]} An Array of returned results.\n    */\n   triggerSync(name, ...args)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusSecure instance has been destroyed.'); }\n\n      return this.#eventbus.triggerSync(name, ...args);\n   }\n}\n","import Eventbus                        from './Eventbus.js';\n\nexport { default as EventbusProxy }    from './EventbusProxy.js';\nexport { default as EventbusSecure }   from './EventbusSecure.js';\n\nexport default Eventbus;\n\n/**\n * Provides a main eventbus instance.\n *\n * @type {Eventbus}\n */\nexport const eventbus = new Eventbus('mainEventbus');\n\n/**\n * Provides an eventbus instance potentially for use with a plugin system.\n *\n * @type {Eventbus}\n */\nexport const pluginEventbus = new Eventbus('pluginEventbus');\n\n/**\n * Provides an eventbus instance potentially for use for testing.\n *\n * @type {Eventbus}\n */\nexport const testEventbus = new Eventbus('testEventbus');\n","/**\n * URL matching RegExp\n *\n * @type {RegExp}\n */\nconst s_URL_REGEX = /^(https?:\\/\\/|file:\\/\\/)/;\n\nexport default class ModuleLoader\n{\n   /**\n    * Loads an ES Module in the browser passing back an object containing info about the loading process.\n    *\n    * @param {object}      options - Options object.\n    *\n    * @param {string|URL}  options.modulepath - A module name, file path, or URL.\n    *\n    * @param {Function}    [options.resolveModule] - An optional function which resolves the import to set `instance`.\n    *\n    * @returns {Promise<{ModuleLoaderObj}>} The module / instance and data about the loading process.\n    */\n   static async load({ modulepath, resolveModule = void 0 } = {})\n   {\n      if (!(modulepath instanceof URL) && typeof modulepath !== 'string')\n      {\n         throw new TypeError(`'modulepath' is not a string or URL`);\n      }\n\n      if (resolveModule !== void 0 && typeof resolveModule !== 'function')\n      {\n         throw new TypeError(`'resolveModule' is not a function`);\n      }\n\n      const module = await import(modulepath);\n\n      const loadpath = modulepath instanceof URL ? modulepath.toString() : modulepath;\n\n      const type = `import-${modulepath instanceof URL ||\n      (typeof modulepath === 'string' && modulepath.match(s_URL_REGEX)) ? 'url' : 'path'}`;\n\n      const instance = resolveModule !== void 0 ? resolveModule(module) : module;\n\n      return { filepath: loadpath, instance, isESM: true, loadpath, module, modulepath, type };\n   }\n}\n","/**\r\n * Defines a class holding the data associated with a plugin including its instance.\r\n */\r\nexport default class PluginEntry\r\n{\r\n   /**\r\n    * Data describing the plugin, manager, and optional module data.\r\n    *\r\n    * @type {PluginData}\r\n    * @private\r\n    */\r\n   #data;\r\n\r\n   /**\r\n    * The plugin enabled state.\r\n    *\r\n    * @type {boolean}\r\n    * @private\r\n    */\r\n   #enabled;\r\n\r\n   /**\r\n    * The plugin name.\r\n    *\r\n    * @type {string}\r\n    * @private\r\n    */\r\n   #name;\r\n\r\n   /**\r\n    * Any stored import.meta data.\r\n    *\r\n    * @type {object}\r\n    * @private\r\n    */\r\n   #importmeta;\r\n\r\n   /**\r\n    * The loaded plugin instance.\r\n    *\r\n    * @type {object}\r\n    * @private\r\n    */\r\n   #instance;\r\n\r\n   /**\r\n    * An EventbusProxy associated with the plugin wrapping the plugin manager eventbus.\r\n    *\r\n    * @type {EventbusProxy}\r\n    * @private\r\n    */\r\n   #eventbusProxy;\r\n\r\n   /**\r\n    * Stores the proxied event names, callback functions, context and guarded state when this plugin is disabled.\r\n    *\r\n    * @type {Array<[string, Function, object, boolean]>}\r\n    * @private\r\n    */\r\n   #events;\r\n\r\n   /**\r\n    * Instantiates a PluginEntry.\r\n    *\r\n    * @param {string}      name - The plugin name.\r\n    *\r\n    * @param {PluginData}  data - Describes the plugin, manager, and optional module data.\r\n    *\r\n    * @param {object}      instance - The loaded plugin instance.\r\n    *\r\n    * @param {EventbusProxy}  eventbusProxy - The EventbusProxy associated with the plugin wrapping the plugin manager\r\n    *                                         eventbus.\r\n    */\r\n   constructor(name, data, instance, eventbusProxy = void 0)\r\n   {\r\n      this.#data = data;\r\n\r\n      this.#enabled = true;\r\n\r\n      this.#name = name;\r\n\r\n      this.#instance = instance;\r\n\r\n      this.#eventbusProxy = eventbusProxy;\r\n   }\r\n\r\n   /**\r\n    * Get plugin data.\r\n    *\r\n    * @returns {PluginData} The associated PluginData.\r\n    */\r\n   get data() { return this.#data; }\r\n\r\n   /**\r\n    * Get enabled.\r\n    *\r\n    * @returns {boolean} Current enabled state.\r\n    */\r\n   get enabled() { return this.#enabled; }\r\n\r\n   /**\r\n    * Get any stored import.meta object.\r\n    *\r\n    * @returns {undefined|object} Any set import.meta info.\r\n    */\r\n   get importmeta() { return this.#importmeta }\r\n\r\n   /**\r\n    * Reset will cleanup most resources for remove / reload. 'remove' should manually destroy #eventbusProxy.\r\n    */\r\n   reset()\r\n   {\r\n      try\r\n      {\r\n         this.#events = void 0;\r\n         this.#importmeta = void 0;\r\n\r\n         // Automatically remove any potential reference to a stored event proxy instance.\r\n         delete this.#instance._eventbus;\r\n      }\r\n      catch (err) { /* noop */ }\r\n   }\r\n\r\n   /**\r\n    * Set enabled.\r\n    *\r\n    * @param {boolean} enabled - New enabled state.\r\n    */\r\n   set enabled(enabled)\r\n   {\r\n      this.#enabled = enabled;\r\n\r\n      // If enabled and there are stored events then turn them on with the eventbus proxy.\r\n      if (enabled)\r\n      {\r\n         if (this.#eventbusProxy !== void 0 && Array.isArray(this.#events))\r\n         {\r\n            for (const event of this.#events)\r\n            {\r\n               this.#eventbusProxy.on(...event);\r\n            }\r\n\r\n            this.#events = void 0;\r\n         }\r\n      }\r\n      else // Store any proxied events and unregister the proxied events.\r\n      {\r\n         if (this.#eventbusProxy !== void 0)\r\n         {\r\n            this.#events = Array.from(this.#eventbusProxy.proxyEntries());\r\n            this.#eventbusProxy.off();\r\n         }\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Get associated EventbusProxy.\r\n    *\r\n    * @returns {EventbusProxy} Associated EventbusProxy.\r\n    */\r\n   get eventbusProxy() { return this.#eventbusProxy; }\r\n\r\n   /**\r\n    * Get plugin instance.\r\n    *\r\n    * @returns {object} The plugin instance.\r\n    */\r\n   get instance() { return this.#instance; }\r\n\r\n   /**\r\n    * Get plugin name.\r\n    *\r\n    * @returns {string} Plugin name.\r\n    */\r\n   get name() { return this.#name; }\r\n\r\n\r\n   /**\r\n    * Set associated EventbusProxy.\r\n    *\r\n    * @param {EventbusProxy} eventbusProxy - EventbusProxy instance to associate.\r\n    */\r\n   set eventbusProxy(eventbusProxy) { this.#eventbusProxy = eventbusProxy; }\r\n\r\n   /**\r\n    * Set any associated import.meta data.\r\n    *\r\n    * @param {object} importmeta - import.meta data.\r\n    */\r\n   set importmeta(importmeta) { this.#importmeta = importmeta; }\r\n\r\n   /**\r\n    * Set plugin instance.\r\n    *\r\n    * @param {object} instance - The plugin instance.\r\n    */\r\n   set instance(instance) { this.#instance = instance; }\r\n}\r\n","/**\n * Provides common object manipulation utilities including depth traversal, obtaining accessors, safely setting values /\n * equality tests, and validation.\n */\n\nconst s_TAG_MAP = '[object Map]';\nconst s_TAG_SET = '[object Set]';\nconst s_TAG_STRING = '[object String]';\n\n/**\n * @typedef {object} ValidationEntry - Provides data for a validation check.\n *\n * @property {string}               [type] - Optionally tests with a typeof check.\n *\n * @property {Array<*>|Function|Set<*>}  [expected] - Optional array, function, or set of expected values to test\n * against.\n *\n * @property {string}               [message] - Optional message to include.\n *\n * @property {boolean}              [required=true] - When false if the accessor is missing validation is skipped.\n *\n * @property {boolean}              [error=true] - When true and error is thrown otherwise a boolean is returned.\n */\n\n/**\n * Freezes all entries traversed that are objects including entries in arrays.\n *\n * @param {object|Array}   data - An object or array.\n *\n * @param {string[]}       skipFreezeKeys - An array of strings indicating keys of objects to not freeze.\n *\n * @returns {object|Array} The frozen object.\n */\nexport function deepFreeze(data, skipFreezeKeys = [])\n{\n   /* istanbul ignore if */\n   if (typeof data !== 'object') { throw new TypeError(`'data' is not an 'object'.`); }\n\n   /* istanbul ignore if */\n   if (!Array.isArray(skipFreezeKeys)) { throw new TypeError(`'skipFreezeKeys' is not an 'array'.`); }\n\n   return _deepFreeze(data, skipFreezeKeys);\n}\n\n/**\n * Performs a naive depth traversal of an object / array. The data structure _must not_ have circular references.\n * The result of the callback function is used to modify in place the given data.\n *\n * @param {object|Array}   data - An object or array.\n *\n * @param {Function}       func - A callback function to process leaf values in children arrays or object members.\n *\n * @param {boolean}        modify - If true then the result of the callback function is used to modify in place\n *                                  the given data.\n *\n * @returns {*} The data object.\n */\nexport function depthTraverse(data, func, modify = false)\n{\n   /* istanbul ignore if */\n   if (typeof data !== 'object') { throw new TypeError(`'data' is not an 'object'.`); }\n\n   /* istanbul ignore if */\n   if (typeof func !== 'function') { throw new TypeError(`'func' is not a 'function'.`); }\n\n   return _depthTraverse(data, func, modify);\n}\n\n/**\n * Returns a list of accessor keys by traversing the given object.\n *\n * @param {object}   data - An object to traverse for accessor keys.\n *\n * @returns {string[]} Accessor list.\n */\nexport function getAccessorList(data)\n{\n   if (typeof data !== 'object') { throw new TypeError(`getAccessorList error: 'data' is not an 'object'.`); }\n\n   return _getAccessorList(data);\n}\n\n/**\n * Tests for whether an object is iterable.\n *\n * @param {object} object - An object.\n *\n * @returns {boolean} Whether object is iterable.\n */\nexport function isIterable(object)\n{\n   if (object === null || object === void 0 || typeof object !== 'object') { return false; }\n\n   return typeof object[Symbol.iterator] === 'function';\n}\n\n/**\n * Tests for whether an object is async iterable.\n *\n * @param {object} object - An object.\n *\n * @returns {boolean} Whether object is async iterable.\n */\nexport function isIterableAsync(object)\n{\n   if (object === null || object === void 0 || typeof object !== 'object') { return false; }\n\n   return typeof object[Symbol.asyncIterator] === 'function';\n}\n\n/**\n * Tests for whether object is not null and a typeof object.\n *\n * @param {object} object - An object.\n *\n * @returns {boolean} Is it an object.\n */\nexport function isObject(object)\n{\n   return object !== null && typeof object === 'object';\n}\n\n/**\n * Safely returns keys on an object or an empty array if not an object.\n *\n * @param {object} object - An object.\n *\n * @returns {string[]} Object keys\n */\nexport function objectKeys(object)\n{\n   return object !== null && typeof object === 'object' ? Object.keys(object) : [];\n}\n\n/**\n * Safely returns an objects size. Note for String objects unicode is not taken into consideration.\n *\n * @param {object} object - An object.\n *\n * @returns {number} Size of object.\n */\nexport function objectSize(object)\n{\n   if (object === void 0 || object === null || typeof object !== 'object') { return 0; }\n\n   const tag = Object.prototype.toString.call(object);\n\n   if (tag === s_TAG_MAP || tag === s_TAG_SET) { return object.size; }\n\n   if (tag === s_TAG_STRING) { return object.length; }\n\n   return Object.keys(object).length;\n}\n\n/**\n * Provides a way to safely access an objects data / entries given an accessor string which describes the\n * entries to walk. To access deeper entries into the object format the accessor string with `.` between entries\n * to walk.\n *\n * @param {object}   data - An object to access entry data.\n *\n * @param {string}   accessor - A string describing the entries to access.\n *\n * @param {*}        defaultValue - (Optional) A default value to return if an entry for accessor is not found.\n *\n * @returns {object} The data object.\n */\nexport function safeAccess(data, accessor, defaultValue = void 0)\n{\n   if (typeof data !== 'object') { return defaultValue; }\n   if (typeof accessor !== 'string') { return defaultValue; }\n\n   const access = accessor.split('.');\n\n   // Walk through the given object by the accessor indexes.\n   for (let cntr = 0; cntr < access.length; cntr++)\n   {\n      // If the next level of object access is undefined or null then return the empty string.\n      if (typeof data[access[cntr]] === 'undefined' || data[access[cntr]] === null) { return defaultValue; }\n\n      data = data[access[cntr]];\n   }\n\n   return data;\n}\n\n/**\n * Provides a way to safely batch set an objects data / entries given an array of accessor strings which describe the\n * entries to walk. To access deeper entries into the object format the accessor string with `.` between entries\n * to walk. If value is an object the accessor will be used to access a target value from `value` which is\n * subsequently set to `data` by the given operation. If `value` is not an object it will be used as the target\n * value to set across all accessors.\n *\n * @param {object}         data - An object to access entry data.\n *\n * @param {Array<string>}  accessors - A string describing the entries to access.\n *\n * @param {object|*}       value - A new value to set if an entry for accessor is found.\n *\n * @param {string}         [operation='set'] - Operation to perform including: 'add', 'div', 'mult', 'set',\n *                                             'set-undefined', 'sub'.\n *\n * @param {object|*}       [defaultAccessValue=0] - A new value to set if an entry for accessor is found.\n *\n *\n * @param {boolean}  [createMissing=true] - If true missing accessor entries will be created as objects\n *                                          automatically.\n */\nexport function safeBatchSet(data, accessors, value, operation = 'set', defaultAccessValue = 0, createMissing = true)\n{\n   if (typeof data !== 'object') { throw new TypeError(`safeBatchSet Error: 'data' is not an 'object'.`); }\n   if (!Array.isArray(accessors)) { throw new TypeError(`safeBatchSet Error: 'accessors' is not an 'array'.`); }\n\n   if (typeof value === 'object')\n   {\n      accessors.forEach((accessor) =>\n      {\n         const targetValue = safeAccess(value, accessor, defaultAccessValue);\n         safeSet(data, accessor, targetValue, operation, createMissing);\n      });\n   }\n   else\n   {\n      accessors.forEach((accessor) =>\n      {\n         safeSet(data, accessor, value, operation, createMissing);\n      });\n   }\n}\n\n/**\n * Compares a source object and values of entries against a target object. If the entries in the source object match\n * the target object then `true` is returned otherwise `false`. If either object is undefined or null then false\n * is returned.\n *\n * @param {object}   source - Source object.\n *\n * @param {object}   target - Target object.\n *\n * @returns {boolean} True if equal.\n */\nexport function safeEqual(source, target)\n{\n   if (typeof source === 'undefined' || source === null || typeof target === 'undefined' || target === null)\n   {\n      return false;\n   }\n\n   const sourceAccessors = getAccessorList(source);\n\n   for (let cntr = 0; cntr < sourceAccessors.length; cntr++)\n   {\n      const accessor = sourceAccessors[cntr];\n\n      const sourceObjectValue = safeAccess(source, accessor);\n      const targetObjectValue = safeAccess(target, accessor);\n\n      if (sourceObjectValue !== targetObjectValue) { return false; }\n   }\n\n   return true;\n}\n\n/**\n * Provides a way to safely set an objects data / entries given an accessor string which describes the\n * entries to walk. To access deeper entries into the object format the accessor string with `.` between entries\n * to walk.\n *\n * @param {object}   data - An object to access entry data.\n *\n * @param {string}   accessor - A string describing the entries to access.\n *\n * @param {*}        value - A new value to set if an entry for accessor is found.\n *\n * @param {string}   [operation='set'] - Operation to perform including: 'add', 'div', 'mult', 'set',\n *                                       'set-undefined', 'sub'.\n *\n * @param {boolean}  [createMissing=true] - If true missing accessor entries will be created as objects\n *                                          automatically.\n *\n * @returns {boolean} True if successful.\n */\nexport function safeSet(data, accessor, value, operation = 'set', createMissing = true)\n{\n   if (typeof data !== 'object') { throw new TypeError(`safeSet Error: 'data' is not an 'object'.`); }\n   if (typeof accessor !== 'string') { throw new TypeError(`safeSet Error: 'accessor' is not a 'string'.`); }\n\n   const access = accessor.split('.');\n\n   // Walk through the given object by the accessor indexes.\n   for (let cntr = 0; cntr < access.length; cntr++)\n   {\n      // If data is an array perform validation that the accessor is a positive integer otherwise quit.\n      if (Array.isArray(data))\n      {\n         const number = (+access[cntr]);\n\n         if (!Number.isInteger(number) || number < 0) { return false; }\n      }\n\n      if (cntr === access.length - 1)\n      {\n         switch (operation)\n         {\n            case 'add':\n               data[access[cntr]] += value;\n               break;\n\n            case 'div':\n               data[access[cntr]] /= value;\n               break;\n\n            case 'mult':\n               data[access[cntr]] *= value;\n               break;\n\n            case 'set':\n               data[access[cntr]] = value;\n               break;\n\n            case 'set-undefined':\n               if (typeof data[access[cntr]] === 'undefined') { data[access[cntr]] = value; }\n               break;\n\n            case 'sub':\n               data[access[cntr]] -= value;\n               break;\n         }\n      }\n      else\n      {\n         // If createMissing is true and the next level of object access is undefined then create a new object entry.\n         if (createMissing && typeof data[access[cntr]] === 'undefined') { data[access[cntr]] = {}; }\n\n         // Abort if the next level is null or not an object and containing a value.\n         if (data[access[cntr]] === null || typeof data[access[cntr]] !== 'object') { return false; }\n\n         data = data[access[cntr]];\n      }\n   }\n\n   return true;\n}\n\n/**\n * Performs bulk setting of values to the given data object.\n *\n * @param {object}            data - The data object to set data.\n *\n * @param {object<string, *>} accessorValues - Object of accessor keys to values to set.\n *\n * @param {string}            [operation='set'] - Operation to perform including: 'add', 'div', 'mult', 'set', 'sub';\n *                                                default (`set`).\n *\n * @param {boolean}           [createMissing=true] - If true missing accessor entries will be created as objects\n *                                                   automatically.\n */\nexport function safeSetAll(data, accessorValues, operation = 'set', createMissing = true)\n{\n   if (typeof data !== 'object') { throw new TypeError(`'data' is not an 'object'.`); }\n   if (typeof accessorValues !== 'object') { throw new TypeError(`'accessorValues' is not an 'object'.`); }\n\n   for (const accessor of Object.keys(accessorValues))\n   {\n      if (!accessorValues.hasOwnProperty(accessor)) { continue; } // eslint-disable-line no-prototype-builtins\n\n      safeSet(data, accessor, accessorValues[accessor], operation, createMissing);\n   }\n}\n\n/**\n * Performs bulk validation of data given an object, `validationData`, which describes all entries to test.\n *\n * @param {object}                           data - The data object to test.\n *\n * @param {object<string, ValidationEntry>}  validationData - Key is the accessor / value is a validation entry.\n *\n * @param {string}                           [dataName='data'] - Optional name of data.\n *\n * @returns {boolean} True if validation passes otherwise an exception is thrown.\n */\nexport function validate(data, validationData = {}, dataName = 'data')\n{\n   if (typeof data !== 'object') { throw new TypeError(`'${dataName}' is not an 'object'.`); }\n   if (typeof validationData !== 'object') { throw new TypeError(`'validationData' is not an 'object'.`); }\n\n   let result;\n\n   for (const key of Object.keys(validationData))\n   {\n      if (!validationData.hasOwnProperty(key)) { continue; } // eslint-disable-line no-prototype-builtins\n\n      const entry = validationData[key];\n\n      switch (entry.test)\n      {\n         case 'array':\n            result = validateArray(data, key, entry, dataName);\n            break;\n\n         case 'entry':\n            result = validateEntry(data, key, entry, dataName);\n            break;\n\n         case 'entry|array':\n            result = validateEntryOrArray(data, key, entry, dataName);\n            break;\n      }\n   }\n\n   return result;\n}\n\n/**\n * Validates all array entries against potential type and expected tests.\n *\n * @param {object}            data - The data object to test.\n *\n * @param {string}            accessor - A string describing the entries to access.\n *\n * @param {object}            opts - Options object.\n *\n * @param {string}            [opts.type] - Tests with a typeof check.\n *\n * @param {Function|Set<*>}   [opts.expected] - Optional function or set of expected values to test against.\n *\n * @param {string}            [opts.message] - Optional message to include.\n *\n * @param {boolean}           [opts.required] - When false if the accessor is missing validation is skipped.\n *\n * @param {boolean}           [opts.error=true] - When true and error is thrown otherwise a boolean is returned.\n *\n * @param {string}            [dataName='data'] - Optional name of data.\n *\n * @returns {boolean} True if validation passes otherwise an exception is thrown.\n */\nexport function validateArray(data, accessor, { type = void 0, expected = void 0, message = void 0, required = true,\n error = true } = {}, dataName = 'data')\n{\n   const dataArray = safeAccess(data, accessor);\n\n   // A non-required entry is missing so return without validation.\n   if (!required && typeof dataArray === 'undefined') { return true; }\n\n   if (!Array.isArray(dataArray))\n   {\n      if (error)\n      {\n         throw _validateError(TypeError, `'${dataName}.${accessor}' is not an 'array'.`);\n      }\n      else\n      {\n         return false;\n      }\n   }\n\n   if (typeof type === 'string')\n   {\n      for (let cntr = 0; cntr < dataArray.length; cntr++)\n      {\n         if (!(typeof dataArray[cntr] === type))\n         {\n            if (error)\n            {\n               const dataEntryString = typeof dataArray[cntr] === 'object' ? JSON.stringify(dataArray[cntr]) :\n                dataArray[cntr];\n\n               throw _validateError(TypeError,\n                `'${dataName}.${accessor}[${cntr}]': '${dataEntryString}' is not a '${type}'.`);\n            }\n            else\n            {\n               return false;\n            }\n         }\n      }\n   }\n\n   // If expected is a function then test all array entries against the test function. If expected is a Set then\n   // test all array entries for inclusion in the set. Otherwise if expected is a string then test that all array\n   // entries as a `typeof` test against expected.\n   if (Array.isArray(expected))\n   {\n      for (let cntr = 0; cntr < dataArray.length; cntr++)\n      {\n         if (!expected.includes(dataArray[cntr]))\n         {\n            if (error)\n            {\n               const dataEntryString = typeof dataArray[cntr] === 'object' ? JSON.stringify(dataArray[cntr]) :\n                dataArray[cntr];\n\n               throw _validateError(Error, `'${dataName}.${accessor}[${cntr}]': '${\n                dataEntryString}' is not an expected value: ${JSON.stringify(expected)}.`);\n            }\n            else\n            {\n               return false;\n            }\n         }\n      }\n   }\n   else if (expected instanceof Set)\n   {\n      for (let cntr = 0; cntr < dataArray.length; cntr++)\n      {\n         if (!expected.has(dataArray[cntr]))\n         {\n            if (error)\n            {\n               const dataEntryString = typeof dataArray[cntr] === 'object' ? JSON.stringify(dataArray[cntr]) :\n                dataArray[cntr];\n\n               throw _validateError(Error, `'${dataName}.${accessor}[${cntr}]': '${\n                dataEntryString}' is not an expected value: ${JSON.stringify(expected)}.`);\n            }\n            else\n            {\n               return false;\n            }\n         }\n      }\n   }\n   else if (typeof expected === 'function')\n   {\n      for (let cntr = 0; cntr < dataArray.length; cntr++)\n      {\n         try\n         {\n            const result = expected(dataArray[cntr]);\n\n            if (typeof result === 'undefined' || !result) { throw new Error(message); }\n         }\n         catch (err)\n         {\n            if (error)\n            {\n               const dataEntryString = typeof dataArray[cntr] === 'object' ? JSON.stringify(dataArray[cntr]) :\n                dataArray[cntr];\n\n               throw _validateError(Error, `'${dataName}.${accessor}[${cntr}]': '${\n                dataEntryString}' failed validation: ${err.message}.`);\n            }\n            else\n            {\n               return false;\n            }\n         }\n      }\n   }\n\n   return true;\n}\n\n/**\n * Validates data entry with a typeof check and potentially tests against the values in any given expected set.\n *\n * @param {object}            data - The object data to validate.\n *\n * @param {string}            accessor - A string describing the entries to access.\n *\n * @param {object}            opts - Options object\n *\n * @param {string}            [opts.type] - Tests with a typeof check.\n *\n * @param {Function|Set<*>}   [opts.expected] - Optional function or set of expected values to test against.\n *\n * @param {string}            [opts.message] - Optional message to include.\n *\n * @param {boolean}           [opts.required=true] - When false if the accessor is missing validation is skipped.\n *\n * @param {boolean}           [opts.error=true] - When true and error is thrown otherwise a boolean is returned.\n *\n * @param {string}            [dataName='data'] - Optional name of data.\n *\n * @returns {boolean} True if validation passes otherwise an exception is thrown.\n */\nexport function validateEntry(data, accessor, { type = void 0, expected = void 0, message = void 0, required = true,\n error = true } = {}, dataName = 'data')\n{\n   const dataEntry = safeAccess(data, accessor);\n\n   // A non-required entry is missing so return without validation.\n   if (!required && typeof dataEntry === 'undefined') { return true; }\n\n   if (type && typeof dataEntry !== type)\n   {\n      if (error)\n      {\n         throw _validateError(TypeError, `'${dataName}.${accessor}' is not a '${type}'.`);\n      }\n      else\n      {\n         return false;\n      }\n   }\n\n   if ((expected instanceof Set && !expected.has(dataEntry)) ||\n    (Array.isArray(expected) && !expected.includes(dataEntry)))\n   {\n      if (error)\n      {\n         const dataEntryString = typeof dataEntry === 'object' ? JSON.stringify(dataEntry) : dataEntry;\n\n         throw _validateError(Error, `'${dataName}.${accessor}': '${dataEntryString}' is not an expected value: ${\n          JSON.stringify(expected)}.`);\n      }\n      else\n      {\n         return false;\n      }\n   }\n   else if (typeof expected === 'function')\n   {\n      try\n      {\n         const result = expected(dataEntry);\n\n         if (typeof result === 'undefined' || !result) { throw new Error(message); }\n      }\n      catch (err)\n      {\n         if (error)\n         {\n            const dataEntryString = typeof dataEntry === 'object' ? JSON.stringify(dataEntry) : dataEntry;\n\n            throw _validateError(Error, `'${dataName}.${accessor}': '${dataEntryString}' failed to validate: ${\n             err.message}.`);\n         }\n         else\n         {\n            return false;\n         }\n      }\n   }\n\n   return true;\n}\n\n/**\n * Dispatches validation of data entry to string or array validation depending on data entry type.\n *\n * @param {object}            data - The data object to test.\n *\n * @param {string}            accessor - A string describing the entries to access.\n *\n * @param {ValidationEntry}   [entry] - A validation entry.\n *\n * @param {string}            [dataName='data'] - Optional name of data.\n *\n * @returns {boolean} True if validation passes otherwise an exception is thrown.\n */\nexport function validateEntryOrArray(data, accessor, entry, dataName = 'data')\n{\n   const dataEntry = safeAccess(data, accessor);\n\n   let result;\n\n   if (Array.isArray(dataEntry))\n   {\n      result = validateArray(data, accessor, entry, dataName);\n   }\n   else\n   {\n      result = validateEntry(data, accessor, entry, dataName);\n   }\n\n   return result;\n}\n\n// Module private ---------------------------------------------------------------------------------------------------\n\n/**\n * Private implementation of depth traversal.\n *\n * @param {object|Array}   data - An object or array.\n *\n * @param {string[]}       skipFreezeKeys - An array of strings indicating keys of objects to not freeze.\n *\n * @returns {*} The frozen object.\n * @ignore\n * @private\n */\nfunction _deepFreeze(data, skipFreezeKeys)\n{\n   if (Array.isArray(data))\n   {\n      for (let cntr = 0; cntr < data.length; cntr++) { _deepFreeze(data[cntr], skipFreezeKeys); }\n   }\n   else if (typeof data === 'object')\n   {\n      for (const key in data)\n      {\n         // eslint-disable-next-line no-prototype-builtins\n         if (data.hasOwnProperty(key) && !skipFreezeKeys.includes(key)) { _deepFreeze(data[key], skipFreezeKeys); }\n      }\n   }\n\n   return Object.freeze(data);\n}\n\n/**\n * Private implementation of depth traversal.\n *\n * @param {object|Array}   data - An object or array.\n *\n * @param {Function}       func - A callback function to process leaf values in children arrays or object members.\n *\n * @param {boolean}        modify - If true then the result of the callback function is used to modify in place\n *                                  the given data.\n *\n * @returns {*} The data object.\n * @ignore\n * @private\n */\nfunction _depthTraverse(data, func, modify)\n{\n   if (modify)\n   {\n      if (Array.isArray(data))\n      {\n         for (let cntr = 0; cntr < data.length; cntr++)\n         {\n            data[cntr] = _depthTraverse(data[cntr], func, modify);\n         }\n      }\n      else if (typeof data === 'object')\n      {\n         for (const key in data)\n         {\n            // eslint-disable-next-line no-prototype-builtins\n            if (data.hasOwnProperty(key)) { data[key] = _depthTraverse(data[key], func, modify); }\n         }\n      }\n      else\n      {\n         data = func(data);\n      }\n   }\n   else\n   {\n      if (Array.isArray(data))\n      {\n         for (let cntr = 0; cntr < data.length; cntr++) { _depthTraverse(data[cntr], func, modify); }\n      }\n      else if (typeof data === 'object')\n      {\n         for (const key in data)\n         {\n            // eslint-disable-next-line no-prototype-builtins\n            if (data.hasOwnProperty(key)) { _depthTraverse(data[key], func, modify); }\n         }\n      }\n      else\n      {\n         func(data);\n      }\n   }\n\n   return data;\n}\n\n/**\n * Private implementation of `getAccessorList`.\n *\n * @param {object}   data - An object to traverse.\n *\n * @returns {string[]} Accessor list.\n * @ignore\n * @private\n */\nfunction _getAccessorList(data)\n{\n   const accessors = [];\n\n   for (const key in data)\n   {\n      if (data.hasOwnProperty(key)) // eslint-disable-line no-prototype-builtins\n      {\n         if (typeof data[key] === 'object')\n         {\n            const childKeys = _getAccessorList(data[key]);\n\n            childKeys.forEach((childKey) =>\n            {\n               accessors.push(Array.isArray(childKey) ? `${key}.${childKey.join('.')}` : `${key}.${childKey}`);\n            });\n         }\n         else\n         {\n            accessors.push(key);\n         }\n      }\n   }\n\n   return accessors;\n}\n\n/**\n * Creates a new error of type `clazz` adding the field `_objectValidateError` set to true.\n *\n * @param {Error}    clazz - Error class to instantiate.\n *\n * @param {string}   message - An error message.\n *\n * @returns {*} Error of the clazz.\n * @ignore\n * @private\n */\nfunction _validateError(clazz, message = void 0)\n{\n   const error = new clazz(message);\n   error._objectValidateError = true;\n   return error;\n}\n","/**\r\n * PluginEvent - Provides the data / event passed to all invoked methods in\r\n * {@link PluginInvokeSupport#invokeSyncEvent}. The `event.data` field is returned to the caller. Before returning\r\n * though additional the following additional metadata is attached:\r\n *\r\n * (number)    `$$plugin_invoke_count` - The count of plugins invoked.\r\n *\r\n * (string[])  `$$plugin_invoke_names` - The names of plugins invoked.\r\n */\r\nexport default class PluginInvokeEvent\r\n{\r\n   /**\r\n    * Initializes PluginEvent.\r\n    *\r\n    * @param {object} copyProps - Event data to copy.\r\n    *\r\n    * @param {object} passthruProps - Event data to pass through.\r\n    */\r\n   constructor(copyProps = {}, passthruProps = {})\r\n   {\r\n      /**\r\n       * Provides the unified event data assigning any pass through data to the copied data supplied. Invoked functions\r\n       * may add to or modify this data.\r\n       *\r\n       * @type {PluginEventData}\r\n       */\r\n      this.data = Object.assign(JSON.parse(JSON.stringify(copyProps)), passthruProps);\r\n\r\n      /**\r\n       * Unique data available in each plugin invoked.\r\n       *\r\n       * @type {EventbusProxy} - The active EventbusProxy for that particular plugin.\r\n       */\r\n      this.eventbus = void 0;\r\n\r\n      /**\r\n       * Unique data available in each plugin invoked.\r\n       *\r\n       * @type {string} - The active plugin name.\r\n       */\r\n      this.pluginName = void 0;\r\n\r\n      /**\r\n       * Unique data available in each plugin invoked.\r\n       *\r\n       * @type {object} - The active plugin options.\r\n       */\r\n      this.pluginOptions = void 0;\r\n   }\r\n}\r\n","import { isIterable }      from '@typhonjs-utils/object';\r\n\r\nimport PluginInvokeEvent   from './PluginInvokeEvent.js';\r\n\r\n/**\r\n * Private implementation to invoke asynchronous events. This allows internal calls in PluginManager for\r\n * `onPluginLoad` and `onPluginUnload` callbacks to bypass optional error checking.\r\n *\r\n * This dispatch method asynchronously passes to and returns from any invoked targets a PluginEvent. Any invoked plugin\r\n * may return a Promise which is awaited upon by `Promise.all` before returning the PluginEvent data via a Promise.\r\n *\r\n * @param {object}                     opts - Options object.\r\n *\r\n * @param {string}                     opts.method - Method name to invoke.\r\n *\r\n * @param {PluginManager}              opts.manager - A plugin manager instance.\r\n *\r\n * @param {object}                     [opts.copyProps] - Properties that are copied.\r\n *\r\n * @param {object}                     [opts.passthruProps] - Properties that are passed through.\r\n *\r\n * @param {string|Iterable<string>}    [opts.plugins] - Specific plugin name or iterable list of plugin names to invoke.\r\n *\r\n * @param {object}                     [opts.options] - Defines options for throwing exceptions. Turned off by default.\r\n *\r\n * @param {boolean}                    [opts.errorCheck=true] - If false optional error checking is disabled.\r\n *\r\n * @returns {Promise<PluginEventData>} The PluginEvent data.\r\n */\r\nexport default async function invokeAsyncEvent({ method, manager, copyProps = {}, passthruProps = {}, plugins = void 0,\r\n options = void 0, errorCheck = true })\r\n{\r\n   if (typeof method !== 'string') { throw new TypeError(`'method' is not a string.`); }\r\n   if (typeof passthruProps !== 'object') { throw new TypeError(`'passthruProps' is not an object.`); }\r\n   if (typeof copyProps !== 'object') { throw new TypeError(`'copyProps' is not an object.`); }\r\n\r\n   if (options === void 0) { options = manager.getOptions(); }\r\n   if (plugins === void 0) { plugins = manager.getPluginMapKeys(); }\r\n\r\n   if (typeof plugins !== 'string' && !isIterable(plugins))\r\n   {\r\n      throw new TypeError(`'plugins' is not a string or iterable.`);\r\n   }\r\n\r\n   // Track how many plugins were invoked.\r\n   let pluginInvokeCount = 0;\r\n   const pluginInvokeNames = [];\r\n\r\n   // Track if a plugin method is invoked\r\n   let hasMethod = false;\r\n   let hasPlugin = false;\r\n\r\n   // Create plugin event.\r\n   const ev = new PluginInvokeEvent(copyProps, passthruProps);\r\n\r\n   const results = [];\r\n\r\n   if (typeof plugins === 'string')\r\n   {\r\n      const entry = manager.getPluginEntry(plugins);\r\n\r\n      if (entry !== void 0 && entry.enabled && entry.instance)\r\n      {\r\n         hasPlugin = true;\r\n\r\n         if (typeof entry.instance[method] === 'function')\r\n         {\r\n            ev.eventbus = entry.eventbusProxy;\r\n            ev.pluginName = entry.name;\r\n            ev.pluginOptions = entry.data.plugin.options;\r\n\r\n            const result = entry.instance[method](ev);\r\n\r\n            if (typeof result !== 'undefined' && result !== null) { results.push(result); }\r\n\r\n            hasMethod = true;\r\n            pluginInvokeCount++;\r\n            pluginInvokeNames.push(entry.name);\r\n         }\r\n      }\r\n   }\r\n   else\r\n   {\r\n      for (const name of plugins)\r\n      {\r\n         const entry = manager.getPluginEntry(name);\r\n\r\n         if (entry !== void 0 && entry.enabled && entry.instance)\r\n         {\r\n            hasPlugin = true;\r\n\r\n            if (typeof entry.instance[method] === 'function')\r\n            {\r\n               ev.eventbus = entry.eventbusProxy;\r\n               ev.pluginName = entry.name;\r\n               ev.pluginOptions = entry.data.plugin.options;\r\n\r\n               const result = entry.instance[method](ev);\r\n\r\n               if (typeof result !== 'undefined' && result !== null) { results.push(result); }\r\n\r\n               hasMethod = true;\r\n               pluginInvokeCount++;\r\n               pluginInvokeNames.push(entry.name);\r\n            }\r\n         }\r\n      }\r\n   }\r\n\r\n   if (errorCheck && options.throwNoPlugin && !hasPlugin)\r\n   {\r\n      throw new Error(`PluginManager failed to find any target plugins.`);\r\n   }\r\n\r\n   if (errorCheck && options.throwNoMethod && !hasMethod)\r\n   {\r\n      throw new Error(`PluginManager failed to invoke '${method}'.`);\r\n   }\r\n\r\n   // Add meta data for plugin invoke count.\r\n   ev.data.$$plugin_invoke_count = pluginInvokeCount;\r\n   ev.data.$$plugin_invoke_names = pluginInvokeNames;\r\n\r\n   await Promise.all(results);\r\n\r\n   return ev.data;\r\n}\r\n","const s_REGEX_ESCAPE_RELATIVE = /^([.]{1,2}[\\\\|/])+/g;\r\nconst s_REGEX_ESCAPE_FORWARD = /[\\\\]/g;\r\nconst s_REGEX_STRING_URL = /^(https?|file):/g;\r\n\r\n/**\r\n * Creates an escaped path which is suitable for use in RegExp construction.\r\n *\r\n * Note: This function will throw if a malformed URL string is the target. In AbstractPluginManager this function\r\n * is used after the module has been loaded / is a good target.\r\n *\r\n * @param {string|URL}  target - Target full / relative path or URL to escape.\r\n *\r\n * @returns {string} The escaped target.\r\n */\r\nexport default function escapeTarget(target)\r\n{\r\n   let targetEscaped = target;\r\n\r\n   if (target instanceof URL)\r\n   {\r\n      targetEscaped = target.pathname;\r\n   }\r\n   else if (target.match(s_REGEX_STRING_URL))\r\n   {\r\n      targetEscaped = new URL(target).pathname;\r\n   }\r\n\r\n   targetEscaped = targetEscaped.replace(s_REGEX_ESCAPE_RELATIVE, '');\r\n   targetEscaped = targetEscaped.replace(s_REGEX_ESCAPE_FORWARD, '\\\\\\\\');\r\n\r\n   return targetEscaped;\r\n}\r\n","/**\r\n * Performs validation of a PluginConfig.\r\n *\r\n * @param {PluginConfig}   pluginConfig A PluginConfig to validate.\r\n *\r\n * @returns {boolean} True if the given PluginConfig is valid.\r\n */\r\nexport default function isValidConfig(pluginConfig)\r\n{\r\n   if (typeof pluginConfig !== 'object') { return false; }\r\n\r\n   if (typeof pluginConfig.name !== 'string') { return false; }\r\n\r\n   if (typeof pluginConfig.target !== 'undefined' && typeof pluginConfig.target !== 'string' &&\r\n    !(pluginConfig.target instanceof URL))\r\n   {\r\n      return false;\r\n   }\r\n\r\n   if (typeof pluginConfig.options !== 'undefined' && typeof pluginConfig.options !== 'object') { return false; }\r\n\r\n   return true;\r\n}\r\n","/**\r\n * Resolves a dynamically imported module for PluginManager. This function is passed to `@typhonjs-utils/loader-module`.\r\n *\r\n * @param {object}   module - The imported module.\r\n *\r\n * @returns {*} The export most likely to match a valid plugin.\r\n */\r\nexport default function(module)\r\n{\r\n   // If the module has a named export for `onPluginLoad` then take the module.\r\n   if (typeof module.onPluginLoad === 'function')\r\n   {\r\n      return module;\r\n   }\r\n   // Then potentially resolve any default export / static class.\r\n   else if (module.default)\r\n   {\r\n      return module.default;\r\n   }\r\n   // Finally resolve as just the module.\r\n   else\r\n   {\r\n      return module;\r\n   }\r\n}\r\n","import { isIterable }   from \"@typhonjs-utils/object\";\r\n\r\nimport invokeAsyncEvent from './invokeAsyncEvent.js';\r\nimport invokeSyncEvent  from './invokeSyncEvent.js';\r\n\r\n/**\r\n * PluginInvokeSupport adds direct method invocation support to PluginManager via the eventbus and alternately through\r\n * a wrapped instance of PluginManager depending on the use case.\r\n *\r\n * There are two types of invocation methods the first spreads an array of arguments to the invoked method. The second\r\n * constructs a {@link PluginInvokeEvent} to pass to the method with a single parameter.\r\n *\r\n * TODO: more info and wiki link\r\n *\r\n * When added to a PluginManager through constructor initialization the following events are registered on the plugin\r\n * manager eventbus:\r\n *\r\n * `plugins:async:invoke` - {@link PluginInvokeSupport#invokeAsync}\r\n *\r\n * `plugins:async:invoke:event` - {@link PluginInvokeSupport#invokeAsyncEvent}\r\n *\r\n * `plugins:get:method:names` - {@link PluginInvokeSupport#getMethodNames}\r\n *\r\n * `plugins:has:method` - {@link PluginInvokeSupport#hasMethod}\r\n *\r\n * `plugins:invoke` - {@link PluginInvokeSupport#invoke}\r\n *\r\n * `plugins:sync:invoke` - {@link PluginInvokeSupport#invokeSync}\r\n *\r\n * `plugins:sync:invoke:event` - {@link PluginInvokeSupport#invokeSyncEvent}\r\n *\r\n * @example\r\n * // One can also indirectly invoke any method of the plugin.\r\n * // Any plugin with a method named `aCoolMethod` is invoked.\r\n * eventbus.triggerSync('plugins:invoke:sync:event', { method: 'aCoolMethod' });\r\n *\r\n * // A specific invocation just for the 'an-npm-plugin-enabled-module'\r\n * eventbus.triggerSync('plugins:invoke:sync:event', {\r\n *    method: 'aCoolMethod',\r\n *    plugins: 'an-npm-plugin-enabled-module'\r\n * });\r\n *\r\n * // There are two other properties `copyProps` and `passthruProps` which can be set with object data to _copy_ or\r\n * // _pass through_ to the invoked method.\r\n *\r\n * @implements {PluginSupportImpl}\r\n */\r\nexport default class PluginInvokeSupport\r\n{\r\n   /**\r\n    * @type {PluginManager}\r\n    */\r\n   #pluginManager = null;\r\n\r\n   /**\r\n    * Create PluginInvokeSupport\r\n    *\r\n    * @param {PluginManager} pluginManager - The plugin manager to associate.\r\n    */\r\n   constructor(pluginManager)\r\n   {\r\n      this.#pluginManager = pluginManager;\r\n   }\r\n\r\n   /**\r\n    * Returns whether the associated plugin manager has been destroyed.\r\n    *\r\n    * @returns {boolean} Returns whether the plugin manager has been destroyed.\r\n    */\r\n   get isDestroyed()\r\n   {\r\n      return this.#pluginManager === null || this.#pluginManager.isDestroyed;\r\n   }\r\n\r\n   /**\r\n    * Returns the associated plugin manager options.\r\n    *\r\n    * @returns {PluginManagerOptions} The associated plugin manager options.\r\n    */\r\n   get options()\r\n   {\r\n      /* c8 ignore next 1 */\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      return this.#pluginManager.getOptions();\r\n   }\r\n\r\n   /**\r\n    * Gets the associated plugin manager.\r\n    *\r\n    * @returns {PluginManager} The associated plugin manager\r\n    */\r\n   get pluginManager()\r\n   {\r\n      /* c8 ignore next 1 */\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      return this.#pluginManager;\r\n   }\r\n\r\n   /**\r\n    * Destroys all managed plugins after unloading them.\r\n    *\r\n    * @param {object}     opts - An options object.\r\n    *\r\n    * @param {Eventbus}   opts.eventbus - The eventbus to disassociate.\r\n    *\r\n    * @param {string}     opts.eventPrepend - The current event prepend.\r\n    */\r\n   async destroy({ eventbus, eventPrepend })\r\n   {\r\n      if (eventbus !== null && eventbus !== void 0)\r\n      {\r\n         eventbus.off(`${eventPrepend}:async:invoke`, this.invokeAsync, this);\r\n         eventbus.off(`${eventPrepend}:async:invoke:event`, this.invokeAsyncEvent, this);\r\n         eventbus.off(`${eventPrepend}:get:method:names`, this.getMethodNames, this);\r\n         eventbus.off(`${eventPrepend}:has:method`, this.hasMethod, this);\r\n         eventbus.off(`${eventPrepend}:invoke`, this.invoke, this);\r\n         eventbus.off(`${eventPrepend}:sync:invoke`, this.invokeSync, this);\r\n         eventbus.off(`${eventPrepend}:sync:invoke:event`, this.invokeSyncEvent, this);\r\n      }\r\n\r\n      this.#pluginManager = null;\r\n   }\r\n\r\n   /**\r\n    * Returns method names for a specific plugin, list of plugins, or all plugins. The enabled state can be specified\r\n    * along with sorting methods by plugin name.\r\n    *\r\n    * @param {object}                  [opts] - Options object. If undefined all plugin data is returned.\r\n    *\r\n    * @param {boolean}                 [opts.enabled] - If enabled is a boolean it will return plugin methods names\r\n    *                                                   given the respective enabled state.\r\n    *\r\n    * @param {string|Iterable<string>} [opts.plugins] - Plugin name or iterable list of names.\r\n    *\r\n    * @returns {string[]} A list of method names\r\n    */\r\n   getMethodNames({ enabled = void 0, plugins = [] } = {})\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      if (enabled !== void 0 && typeof enabled !== 'boolean')\r\n      {\r\n         throw new TypeError(`'enabled' is not a boolean.`);\r\n      }\r\n\r\n      if (typeof plugins !== 'string' && !isIterable(plugins))\r\n      {\r\n         throw new TypeError(`'plugins' is not a string or iterable.`);\r\n      }\r\n\r\n      // Create an array from a single plugin name.\r\n      if (typeof plugins === 'string')\r\n      {\r\n         plugins = [plugins];\r\n      }\r\n\r\n      const anyEnabledState = enabled === void 0;\r\n\r\n      const results = {};\r\n\r\n      let count = 0;\r\n\r\n      for (const name of plugins)\r\n      {\r\n         const entry = this.pluginManager.getPluginEntry(name);\r\n\r\n         if (entry !== void 0 && entry.instance && (anyEnabledState || entry.enabled === enabled))\r\n         {\r\n            for (const name of s_GET_ALL_PROPERTY_NAMES(entry.instance))\r\n            {\r\n               // Skip any names that are not a function or are the constructor.\r\n               if (typeof entry.instance[name] === 'function' && name !== 'constructor') { results[name] = true; }\r\n            }\r\n         }\r\n\r\n         count++;\r\n      }\r\n\r\n      // Iterable plugins had no entries so return all plugin data.\r\n      if (count === 0)\r\n      {\r\n         for (const entry of this.pluginManager.getPluginMapValues())\r\n         {\r\n            if (entry.instance && (anyEnabledState || entry.enabled === enabled))\r\n            {\r\n               for (const name of s_GET_ALL_PROPERTY_NAMES(entry.instance))\r\n               {\r\n                  // Skip any names that are not a function or are the constructor.\r\n                  if (typeof entry.instance[name] === 'function' && name !== 'constructor') { results[name] = true; }\r\n               }\r\n            }\r\n         }\r\n      }\r\n\r\n      return Object.keys(results).sort();\r\n   }\r\n\r\n   /**\r\n    * Checks if the provided method name exists across all plugins or specific plugins if defined.\r\n    *\r\n    * @param {object}                  opts - Options object.\r\n    *\r\n    * @param {string}                  opts.method - Method name to test.\r\n    *\r\n    * @param {string|Iterable<string>} [opts.plugins] - Plugin name or iterable list of names to check for method. If\r\n    *                                                   undefined all plugins must contain the method.\r\n    *\r\n    * @returns {boolean} - True method is found.\r\n    */\r\n   hasMethod({ method, plugins = [] })\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      if (typeof method !== 'string')\r\n      {\r\n         throw new TypeError(`'method' is not a string.`);\r\n      }\r\n\r\n      if (typeof plugins !== 'string' && !isIterable(plugins))\r\n      {\r\n         throw new TypeError(`'plugins' is not a string or iterable.`);\r\n      }\r\n\r\n      // Return a single boolean enabled result for a single plugin if found.\r\n      if (typeof plugins === 'string')\r\n      {\r\n         const entry = this.pluginManager.getPluginEntry(plugins);\r\n         return entry !== void 0 && typeof entry.instance[method] === 'function';\r\n      }\r\n\r\n      let count = 0;\r\n\r\n      for (const name of plugins)\r\n      {\r\n         const entry = this.pluginManager.getPluginEntry(name);\r\n\r\n         if (entry !== void 0 && typeof entry.instance[method] !== 'function') { return false; }\r\n\r\n         count++;\r\n      }\r\n\r\n      // Iterable plugins had no entries so check all plugin data.\r\n      if (count === 0)\r\n      {\r\n         for (const entry of this.pluginManager.getPluginMapValues())\r\n         {\r\n            if (typeof entry.instance[method] !== 'function') { return false; }\r\n         }\r\n      }\r\n\r\n      return true;\r\n   }\r\n\r\n   /**\r\n    * This dispatch method simply invokes any plugin targets for the given method name.\r\n    *\r\n    * @param {object}   opts - Options object.\r\n    *\r\n    * @param {string}   opts.method - Method name to invoke.\r\n    *\r\n    * @param {*[]}      [opts.args] - Method arguments. This array will be spread as multiple arguments.\r\n    *\r\n    * @param {string|Iterable<string>} [opts.plugins] - Specific plugin name or iterable list of plugin names to invoke.\r\n    */\r\n   invoke({ method, args = void 0, plugins = void 0 })\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      if (typeof method !== 'string') { throw new TypeError(`'method' is not a string.`); }\r\n\r\n      if (args !== void 0 && !Array.isArray(args)) { throw new TypeError(`'args' is not an array.`); }\r\n\r\n      if (plugins === void 0) { plugins = this.pluginManager.getPluginMapKeys(); }\r\n\r\n      if (typeof plugins !== 'string' && !isIterable(plugins))\r\n      {\r\n         throw new TypeError(`'plugins' is not a string or iterable.`);\r\n      }\r\n\r\n      // Track if a plugin method is invoked.\r\n      let hasMethod = false;\r\n      let hasPlugin = false;\r\n\r\n      const isArgsArray = Array.isArray(args);\r\n\r\n      if (typeof plugins === 'string')\r\n      {\r\n         const entry = this.pluginManager.getPluginEntry(plugins);\r\n\r\n         if (entry !== void 0 && entry.enabled && entry.instance)\r\n         {\r\n            hasPlugin = true;\r\n\r\n            if (typeof entry.instance[method] === 'function')\r\n            {\r\n               isArgsArray ? entry.instance[method](...args) : entry.instance[method]();\r\n\r\n               hasMethod = true;\r\n            }\r\n         }\r\n      }\r\n      else\r\n      {\r\n         for (const name of plugins)\r\n         {\r\n            const entry = this.pluginManager.getPluginEntry(name);\r\n\r\n            if (entry !== void 0 && entry.enabled && entry.instance)\r\n            {\r\n               hasPlugin = true;\r\n\r\n               if (typeof entry.instance[method] === 'function')\r\n               {\r\n                  isArgsArray ? entry.instance[method](...args) : entry.instance[method]();\r\n\r\n                  hasMethod = true;\r\n               }\r\n            }\r\n         }\r\n      }\r\n\r\n      if (this.options.throwNoPlugin && !hasPlugin)\r\n      {\r\n         throw new Error(`PluginManager failed to find any target plugins.`);\r\n      }\r\n\r\n      if (this.options.throwNoMethod && !hasMethod)\r\n      {\r\n         throw new Error(`PluginManager failed to invoke '${method}'.`);\r\n      }\r\n   }\r\n\r\n   /**\r\n    * This dispatch method is asynchronous and adds any returned results to an array which is resolved via Promise.all\r\n    * Any target invoked may return a Promise or any result.\r\n    *\r\n    * @param {object}   opts - Options object.\r\n    *\r\n    * @param {string}   opts.method - Method name to invoke.\r\n    *\r\n    * @param {*[]}      [opts.args] - Method arguments. This array will be spread as multiple arguments.\r\n    *\r\n    * @param {string|Iterable<string>} [opts.plugins] - Specific plugin name or iterable list of plugin names to invoke.\r\n    *\r\n    * @returns {Promise<*|*[]>} A single result or array of results.\r\n    */\r\n   async invokeAsync({ method, args = void 0, plugins = void 0 })\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      if (typeof method !== 'string') { throw new TypeError(`'method' is not a string.`); }\r\n\r\n      if (args !== void 0 && !Array.isArray(args)) { throw new TypeError(`'args' is not an array.`); }\r\n\r\n      if (plugins === void 0) { plugins = this.pluginManager.getPluginMapKeys(); }\r\n\r\n      if (typeof plugins !== 'string' && !isIterable(plugins))\r\n      {\r\n         throw new TypeError(`'plugins' is not a string or iterable.`);\r\n      }\r\n\r\n      // Track if a plugin method is invoked.\r\n      let hasMethod = false;\r\n      let hasPlugin = false;\r\n\r\n      // Capture results.\r\n      let result = void 0;\r\n      const results = [];\r\n\r\n      const isArgsArray = Array.isArray(args);\r\n\r\n      if (typeof plugins === 'string')\r\n      {\r\n         const plugin = this.pluginManager.getPluginEntry(plugins);\r\n\r\n         if (plugin !== void 0 && plugin.enabled && plugin.instance)\r\n         {\r\n            hasPlugin = true;\r\n\r\n            if (typeof plugin.instance[method] === 'function')\r\n            {\r\n               result = isArgsArray ? plugin.instance[method](...args) : plugin.instance[method]();\r\n\r\n               // If we received a valid result push it to the results.\r\n               if (result !== void 0) { results.push(result); }\r\n\r\n               hasMethod = true;\r\n            }\r\n         }\r\n      }\r\n      else\r\n      {\r\n         for (const name of plugins)\r\n         {\r\n            const plugin = this.pluginManager.getPluginEntry(name);\r\n\r\n            if (plugin !== void 0 && plugin.enabled && plugin.instance)\r\n            {\r\n               hasPlugin = true;\r\n\r\n               if (typeof plugin.instance[method] === 'function')\r\n               {\r\n                  result = isArgsArray ? plugin.instance[method](...args) : plugin.instance[method]();\r\n\r\n                  // If we received a valid result push it to the results.\r\n                  if (result !== void 0) { results.push(result); }\r\n\r\n                  hasMethod = true;\r\n               }\r\n            }\r\n         }\r\n      }\r\n\r\n      if (this.options.throwNoPlugin && !hasPlugin)\r\n      {\r\n         throw new Error(`PluginManager failed to find any target plugins.`);\r\n      }\r\n\r\n      if (this.options.throwNoMethod && !hasMethod)\r\n      {\r\n          throw new Error(`PluginManager failed to invoke '${method}'.`);\r\n      }\r\n\r\n      // If there are multiple results then use Promise.all otherwise Promise.resolve.\r\n      return results.length > 1 ? Promise.all(results).then((values) =>\r\n      {\r\n         const filtered = values.filter((entry) => entry !== void 0);\r\n         switch (filtered.length)\r\n         {\r\n            case 0: return void 0;\r\n            case 1: return filtered[0];\r\n            default: return filtered;\r\n         }\r\n      }) : result;\r\n   }\r\n\r\n   /**\r\n    * This dispatch method synchronously passes to and returns from any invoked targets a PluginEvent.\r\n    *\r\n    * @param {object}   opts - Options object.\r\n    *\r\n    * @param {string}   opts.method - Method name to invoke.\r\n    *\r\n    * @param {object}   [opts.copyProps] - Properties that are copied.\r\n    *\r\n    * @param {object}   [opts.passthruProps] - Properties that are passed through.\r\n    *\r\n    * @param {string|Iterable<string>} [opts.plugins] - Specific plugin name or iterable list of plugin names to invoke.\r\n    *\r\n    * @returns {Promise<PluginEventData>} The PluginEvent data.\r\n    */\r\n   async invokeAsyncEvent({ method, copyProps = {}, passthruProps = {}, plugins = void 0 })\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      // Invokes the private internal async events method.\r\n      return invokeAsyncEvent({ method, manager: this.pluginManager, copyProps, passthruProps, plugins });\r\n   }\r\n\r\n   /**\r\n    * This dispatch method synchronously passes back a single value or an array with all results returned by any\r\n    * invoked targets.\r\n    *\r\n    * @param {object}   opts - Options object.\r\n    *\r\n    * @param {string}   opts.method - Method name to invoke.\r\n    *\r\n    * @param {*[]}      [opts.args] - Method arguments. This array will be spread as multiple arguments.\r\n    *\r\n    * @param {string|Iterable<string>} [opts.plugins] - Specific plugin name or iterable list of plugin names to invoke.\r\n    *\r\n    * @returns {*|*[]} A single result or array of results.\r\n    */\r\n   invokeSync({ method, args = void 0, plugins = void 0 })\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      if (typeof method !== 'string') { throw new TypeError(`'method' is not a string.`); }\r\n\r\n      if (args !== void 0 && !Array.isArray(args)) { throw new TypeError(`'args' is not an array.`); }\r\n\r\n      if (plugins === void 0) { plugins = this.pluginManager.getPluginMapKeys(); }\r\n\r\n      if (typeof plugins !== 'string' && !isIterable(plugins))\r\n      {\r\n         throw new TypeError(`'plugins' is not a string or iterable.`);\r\n      }\r\n\r\n      // Track if a plugin method is invoked.\r\n      let hasMethod = false;\r\n      let hasPlugin = false;\r\n\r\n      // Capture results.\r\n      let result = void 0;\r\n      const results = [];\r\n\r\n      const isArgsArray = Array.isArray(args);\r\n\r\n      if (typeof plugins === 'string')\r\n      {\r\n         const plugin = this.pluginManager.getPluginEntry(plugins);\r\n\r\n         if (plugin !== void 0 && plugin.enabled && plugin.instance)\r\n         {\r\n            hasPlugin = true;\r\n\r\n            if (typeof plugin.instance[method] === 'function')\r\n            {\r\n               result = isArgsArray ? plugin.instance[method](...args) : plugin.instance[method]();\r\n\r\n               // If we received a valid result push it to the results.\r\n               if (result !== void 0) { results.push(result); }\r\n\r\n               hasMethod = true;\r\n            }\r\n         }\r\n      }\r\n      else\r\n      {\r\n         for (const name of plugins)\r\n         {\r\n            const plugin = this.pluginManager.getPluginEntry(name);\r\n\r\n            if (plugin !== void 0 && plugin.enabled && plugin.instance)\r\n            {\r\n               hasPlugin = true;\r\n\r\n               if (typeof plugin.instance[method] === 'function')\r\n               {\r\n                  result = isArgsArray ? plugin.instance[method](...args) : plugin.instance[method]();\r\n\r\n                  // If we received a valid result push it to the results.\r\n                  if (result !== void 0) { results.push(result); }\r\n\r\n                  hasMethod = true;\r\n               }\r\n            }\r\n         }\r\n      }\r\n\r\n      if (this.options.throwNoPlugin && !hasPlugin)\r\n      {\r\n         throw new Error(`PluginManager failed to find any target plugins.`);\r\n      }\r\n\r\n      if (this.options.throwNoMethod && !hasMethod)\r\n      {\r\n         throw new Error(`PluginManager failed to invoke '${method}'.`);\r\n      }\r\n\r\n      // Return the results array if there are more than one or just a single result.\r\n      return results.length > 1 ? results : result;\r\n   }\r\n\r\n   /**\r\n    * This dispatch method synchronously passes to and returns from any invoked targets a PluginEvent.\r\n    *\r\n    * @param {object}            opts - Options object.\r\n    *\r\n    * @param {string}            opts.method - Method name to invoke.\r\n    *\r\n    * @param {object}            [opts.copyProps] - Properties that are copied.\r\n    *\r\n    * @param {object}            [opts.passthruProps] - Properties that are passed through.\r\n    *\r\n    * @param {string|Iterable<string>} [opts.plugins] - Specific plugin name or iterable list of plugin names to invoke.\r\n    *\r\n    * @returns {PluginEventData} The PluginEvent data.\r\n    */\r\n   invokeSyncEvent({ method, copyProps = {}, passthruProps = {}, plugins = void 0 })\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      // Invokes the private internal sync events method.\r\n      return invokeSyncEvent({ method, manager: this.pluginManager, copyProps, passthruProps, plugins });\r\n   }\r\n\r\n   /**\r\n    * Sets the eventbus associated with this plugin manager. If any previous eventbus was associated all plugin manager\r\n    * events will be removed then added to the new eventbus. If there are any existing plugins being managed their\r\n    * events will be removed from the old eventbus and then `onPluginLoad` will be called with the new eventbus.\r\n    *\r\n    * @param {object}     opts - An options object.\r\n    *\r\n    * @param {Eventbus}   opts.oldEventbus - The old eventbus to disassociate.\r\n    *\r\n    * @param {Eventbus}   opts.newEventbus - The new eventbus to associate.\r\n    *\r\n    * @param {string}     opts.oldPrepend - The old event prepend.\r\n    *\r\n    * @param {string}     opts.newPrepend - The new event prepend.\r\n    */\r\n   setEventbus({ oldEventbus, newEventbus, oldPrepend, newPrepend })\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      if (oldEventbus !== null && oldEventbus !== void 0)\r\n      {\r\n         oldEventbus.off(`${oldPrepend}:async:invoke`, this.invokeAsync, this);\r\n         oldEventbus.off(`${oldPrepend}:async:invoke:event`, this.invokeAsyncEvent, this);\r\n         oldEventbus.off(`${oldPrepend}:get:method:names`, this.getMethodNames, this);\r\n         oldEventbus.off(`${oldPrepend}:has:method`, this.hasMethod, this);\r\n         oldEventbus.off(`${oldPrepend}:invoke`, this.invoke, this);\r\n         oldEventbus.off(`${oldPrepend}:sync:invoke`, this.invokeSync, this);\r\n         oldEventbus.off(`${oldPrepend}:sync:invoke:event`, this.invokeSyncEvent, this);\r\n      }\r\n\r\n      if (newEventbus !== null && newEventbus !== void 0)\r\n      {\r\n         newEventbus.on(`${newPrepend}:async:invoke`, this.invokeAsync, this, { guard: true });\r\n         newEventbus.on(`${newPrepend}:async:invoke:event`, this.invokeAsyncEvent, this, { guard: true });\r\n         newEventbus.on(`${newPrepend}:get:method:names`, this.getMethodNames, this, { guard: true });\r\n         newEventbus.on(`${newPrepend}:has:method`, this.hasMethod, this, { guard: true });\r\n         newEventbus.on(`${newPrepend}:invoke`, this.invoke, this, { guard: true });\r\n         newEventbus.on(`${newPrepend}:sync:invoke`, this.invokeSync, this, { guard: true });\r\n         newEventbus.on(`${newPrepend}:sync:invoke:event`, this.invokeSyncEvent, this, { guard: true });\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Set optional parameters.\r\n    *\r\n    * @param {PluginManagerOptions} options Defines optional parameters to set.\r\n    */\r\n   setOptions(options)\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n   }\r\n}\r\n\r\n// Module Private ----------------------------------------------------------------------------------------------------\r\n\r\n/**\r\n * Walks an objects inheritance tree collecting property names stopping before `Object` is reached.\r\n *\r\n * @param {object}   obj - object to walks.\r\n *\r\n * @returns {string[]} A list of property names.\r\n * @ignore\r\n */\r\nconst s_GET_ALL_PROPERTY_NAMES = (obj) =>\r\n{\r\n   const props = [];\r\n\r\n   do\r\n   {\r\n      Object.getOwnPropertyNames(obj).forEach((prop) => { if (props.indexOf(prop) === -1) { props.push(prop); } });\r\n      obj = Object.getPrototypeOf(obj);\r\n   } while (obj !== void 0 && obj !== null && !(obj === Object.prototype));\r\n\r\n   return props;\r\n};\r\n","import { isIterable }      from '@typhonjs-utils/object';\r\n\r\nimport PluginInvokeEvent   from './PluginInvokeEvent.js';\r\n\r\n/**\r\n * Private implementation to invoke synchronous events. This allows internal calls in PluginManager for\r\n * `onPluginLoad` and `onPluginUnload` callbacks to bypass optional error checking.\r\n *\r\n * This dispatch method synchronously passes to and returns from any invoked targets a PluginEvent.\r\n *\r\n * @param {object}                     opts - Options object.\r\n *\r\n * @param {string}                     opts.method - Method name to invoke.\r\n *\r\n * @param {PluginManager}              opts.manager - A plugin manager instance.\r\n *\r\n * @param {object}                     [opts.copyProps] - Properties that are copied.\r\n *\r\n * @param {object}                     [opts.passthruProps] - Properties that are passed through.\r\n *\r\n * @param {string|Iterable<string>}    [opts.plugins] - Specific plugin name or iterable list of plugin names to invoke.\r\n *\r\n * @param {object}                     [opts.options] - Defines options for throwing exceptions. Turned off by default.\r\n *\r\n * @param {boolean}                    [opts.errorCheck=true] - If false optional error checking is disabled.\r\n *\r\n * @returns {PluginEventData} The PluginEvent data.\r\n */\r\nexport default function invokeSyncEvent({ method, manager, copyProps = {}, passthruProps = {}, plugins = void 0,\r\n options = void 0, errorCheck = true })\r\n{\r\n   if (typeof method !== 'string') { throw new TypeError(`'method' is not a string.`); }\r\n   if (typeof passthruProps !== 'object') { throw new TypeError(`'passthruProps' is not an object.`); }\r\n   if (typeof copyProps !== 'object') { throw new TypeError(`'copyProps' is not an object.`); }\r\n\r\n   if (options === void 0) { options = manager.getOptions(); }\r\n   if (plugins === void 0) { plugins = manager.getPluginMapKeys(); }\r\n\r\n   if (typeof plugins !== 'string' && !isIterable(plugins))\r\n   {\r\n      throw new TypeError(`'plugins' is not a string or iterable.`);\r\n   }\r\n\r\n   // Track how many plugins were invoked.\r\n   let pluginInvokeCount = 0;\r\n   const pluginInvokeNames = [];\r\n\r\n   // Track if a plugin method is invoked\r\n   let hasMethod = false;\r\n   let hasPlugin = false;\r\n\r\n   // Create plugin event.\r\n   const ev = new PluginInvokeEvent(copyProps, passthruProps);\r\n\r\n   if (typeof plugins === 'string')\r\n   {\r\n      const entry = manager.getPluginEntry(plugins);\r\n\r\n      if (entry !== void 0 && entry.enabled && entry.instance)\r\n      {\r\n         hasPlugin = true;\r\n\r\n         if (typeof entry.instance[method] === 'function')\r\n         {\r\n            ev.eventbus = entry.eventbusProxy;\r\n            ev.pluginName = entry.name;\r\n            ev.pluginOptions = entry.data.plugin.options;\r\n\r\n            entry.instance[method](ev);\r\n\r\n            hasMethod = true;\r\n            pluginInvokeCount++;\r\n            pluginInvokeNames.push(entry.name);\r\n         }\r\n      }\r\n   }\r\n   else\r\n   {\r\n      for (const name of plugins)\r\n      {\r\n         const entry = manager.getPluginEntry(name);\r\n\r\n         if (entry !== void 0 && entry.enabled && entry.instance)\r\n         {\r\n            hasPlugin = true;\r\n\r\n            if (typeof entry.instance[method] === 'function')\r\n            {\r\n               ev.eventbus = entry.eventbusProxy;\r\n               ev.pluginName = entry.name;\r\n               ev.pluginOptions = entry.data.plugin.options;\r\n\r\n               entry.instance[method](ev);\r\n\r\n               hasMethod = true;\r\n               pluginInvokeCount++;\r\n               pluginInvokeNames.push(entry.name);\r\n            }\r\n         }\r\n      }\r\n   }\r\n\r\n   if (errorCheck && options.throwNoPlugin && !hasPlugin)\r\n   {\r\n      throw new Error(`PluginManager failed to find any target plugins.`);\r\n   }\r\n\r\n   if (errorCheck && options.throwNoMethod && !hasMethod)\r\n   {\r\n      throw new Error(`PluginManager failed to invoke '${method}'.`);\r\n   }\r\n\r\n   // Add meta data for plugin invoke count.\r\n   ev.data.$$plugin_invoke_count = pluginInvokeCount;\r\n   ev.data.$$plugin_invoke_names = pluginInvokeNames;\r\n\r\n   return ev.data;\r\n}\r\n","import Eventbus                           from '@typhonjs-plugin/eventbus';\r\nimport { EventbusProxy, EventbusSecure }  from '@typhonjs-plugin/eventbus';\r\nimport ModuleLoader                       from '@typhonjs-utils/loader-module';\r\n\r\nimport PluginEntry                        from './PluginEntry.js';\r\n\r\nimport invokeAsyncEvent                   from './support/invoke/invokeAsyncEvent.js';\r\n\r\nimport escapeTarget                       from './utils/escapeTarget.js';\r\nimport isValidConfig                      from './utils/isValidConfig.js';\r\nimport resolveModule                      from './utils/resolveModule.js';\r\n\r\nimport { deepFreeze, isIterable, isObject }  from '@typhonjs-utils/object';\r\n\r\n/**\r\n * Provides a lightweight plugin manager for Node / NPM & the browser with eventbus integration for plugins in a safe\r\n * and protected manner across NPM modules, local files, and preloaded object instances. This pattern facilitates\r\n * message passing between modules versus direct dependencies / method invocation.\r\n *\r\n * A default eventbus will be created, but you may also pass in an eventbus from `@typhonjs-plugin/eventbus` and the\r\n * plugin manager will register by default under these event categories:\r\n *\r\n * `plugins:async:add` - {@link PluginManager#add}\r\n *\r\n * `plugins:async:add:all` - {@link PluginManager#addAll}\r\n *\r\n * `plugins:async:destroy:manager` - {@link PluginManager#destroy}\r\n *\r\n * `plugins:async:remove` - {@link PluginManager#remove}\r\n *\r\n * `plugins:async:remove:all` - {@link PluginManager#removeAll}\r\n *\r\n * `plugins:get:enabled` - {@link PluginManager#getEnabled}\r\n *\r\n * `plugins:get:options` - {@link PluginManager#getOptions}\r\n *\r\n * `plugins:get:plugin:by:event` - {@link PluginManager#getPluginByEvent}\r\n *\r\n * `plugins:get:plugin:data` - {@link PluginManager#getPluginData}\r\n *\r\n * `plugins:get:plugin:events` - {@link PluginManager#getPluginEvents}\r\n *\r\n * `plugins:get:plugin:names` - {@link PluginManager#getPluginNames}\r\n *\r\n * `plugins:has:plugin` - {@link PluginManager#hasPlugins}\r\n *\r\n * `plugins:is:valid:config` - {@link PluginManager#isValidConfig}\r\n *\r\n * `plugins:set:enabled` - {@link PluginManager#setEnabled}\r\n *\r\n * `plugins:set:options` - {@link PluginManager#setOptions}\r\n *\r\n * Automatically when a plugin is loaded and unloaded respective functions `onPluginLoad` and `onPluginUnload` will\r\n * be attempted to be invoked on the plugin. This is an opportunity for the plugin to receive any associated eventbus\r\n * and wire itself into it. It should be noted that a protected proxy around the eventbus is passed to the plugins\r\n * such that when the plugin is removed automatically all events registered on the eventbus are cleaned up without\r\n * a plugin author needing to do this manually in the `onPluginUnload` callback. This solves any dangling event binding\r\n * issues.\r\n *\r\n * By supporting ES Modules / CommonJS in Node and ES Modules in the browser the plugin manager is by nature\r\n * asynchronous for the core methods of adding / removing plugins and destroying the manager. The lifecycle methods\r\n * `onPluginLoad` and `onPluginUnload` will be awaited on such that if a plugin returns a Promise or is an async method\r\n * then it will complete before execution continues.\r\n *\r\n * It is recommended to interact with the plugin manager eventbus through an eventbus proxy. The\r\n * `createEventbusProxy` method will return a proxy to the default or currently set eventbus.\r\n *\r\n * It should be noted that this module reexports `@typhonjs-plugin/eventbus` which are available as named exports on\r\n * this module:\r\n * import {\r\n *   Eventbus,\r\n *   EventbusProxy,\r\n *   EventbusSecure,\r\n *   eventbus,\r\n *   pluginEventbus,\r\n *   testEventbus\r\n * } from '@typhonjs-plugin/manager';\r\n *\r\n * This reexport is for convenience as it provides one single distribution for Node & browser usage.\r\n *\r\n * If external eventbus functionality is enabled by passing in an eventbus in the constructor of PluginManager it is\r\n * important especially if using an existing process / global level eventbus instance from either this module or\r\n * `@typhonjs-plugin/eventbus` to call {@link PluginManager#destroy} to clean up all plugin eventbus resources and the\r\n * plugin manager event bindings; this is primarily a testing concern when running repeated tests over a reused\r\n * eventbus.\r\n *\r\n * For more information on Eventbus functionality please see:\r\n * @see https://www.npmjs.com/package/@typhonjs-plugin/eventbus\r\n *\r\n * The PluginManager instance can be extended through runtime composition by passing in _classes_ that implement\r\n * {@link PluginSupportImpl}. One such implementation is available {@link PluginInvokeSupport} which enables directly\r\n * invoking methods of all or specific plugins. Please see the documentation for PluginInvokeSupport for more details.\r\n *\r\n * Several abbreviated examples follow. Please see the wiki for more details:\r\n * TODO: add wiki link\r\n *\r\n * @example\r\n * import PluginManager from '@typhonjs-plugin/manager';\r\n *\r\n * const pluginManager = new PluginManager();\r\n *\r\n * await pluginManager.add({ name: 'an-npm-plugin-enabled-module' });\r\n * await pluginManager.add({ name: 'my-local-module', target: './myModule.js' });\r\n *\r\n * const eventbus = pluginManager.createEventbusProxy();\r\n *\r\n * // Let's say an-npm-plugin-enabled-module responds to 'cool:event' which returns 'true'.\r\n * // Let's say my-local-module responds to 'hot:event' which returns 'false'.\r\n * // Both of the plugin / modules will have 'onPluginLoaded' invoked with a proxy to the eventbus and any plugin\r\n * // options defined.\r\n *\r\n * // One can then use the eventbus functionality to invoke associated module / plugin methods even retrieving results.\r\n * assert(eventbus.triggerSync('cool:event') === true);\r\n * assert(eventbus.triggerSync('hot:event') === false);\r\n *\r\n */\r\nexport default class PluginManager\r\n{\r\n   /**\r\n    * Stores the associated eventbus.\r\n    *\r\n    * @type {Eventbus}\r\n    * @private\r\n    */\r\n   #eventbus = null;\r\n\r\n   /**\r\n    * Stores any EventbusProxy instances created, so that they may be automatically destroyed.\r\n    *\r\n    * @type {EventbusProxy[]}\r\n    * @private\r\n    */\r\n   #eventbusProxies = [];\r\n\r\n   /**\r\n    * Stores any EventbusSecure instances created, so that they may be automatically destroyed.\r\n    *\r\n    * @type {EventbusSecureObj[]}\r\n    * @private\r\n    */\r\n   #eventbusSecure = [];\r\n\r\n   /**\r\n    * Defines various options for the plugin manager. By default plugins are enabled, no event invoke, and no\r\n    * event set options are enabled; the latter two preventing invoke dispatch methods functioning on the eventbus\r\n    * along with not being able to set the plugin manager options by the eventbus. These must be explicitly turned\r\n    * off.\r\n    *\r\n    * @type {PluginManagerOptions}\r\n    * @private\r\n    */\r\n   #options =\r\n   {\r\n      noEventAdd: false,\r\n      noEventDestroy: true,\r\n      noEventRemoval: false,\r\n      noEventSetEnabled: true,\r\n      noEventSetOptions: true,\r\n      throwNoMethod: false,\r\n      throwNoPlugin: false\r\n   };\r\n\r\n   /**\r\n    * Stores the plugins currently being loaded by plugin name. During the add process this is important to track\r\n    * in cases when PluginManager is being used incorrectly in a non-async / await manner.\r\n    *\r\n    * @type {Set<string>}\r\n    * @private\r\n    */\r\n   #pluginAddSet = new Set();\r\n\r\n   /**\r\n    * Stores the plugins by name with an associated PluginEntry.\r\n    *\r\n    * @type {Map<string, PluginEntry>}\r\n    * @private\r\n    */\r\n   #pluginMap = new Map();\r\n\r\n   /**\r\n    * Provides an array of PluginSupportImpl interfaces to extend the plugin manager through the eventbus API.\r\n    *\r\n    * @type {PluginSupportImpl[]}\r\n    * @private\r\n    */\r\n   #pluginSupport = [];\r\n\r\n   /**\r\n    * Instantiates PluginManager\r\n    *\r\n    * @param {object}   [options] - Provides various configuration options:\r\n    *\r\n    * @param {Eventbus} [options.eventbus] - An instance of '@typhonjs-plugin/eventbus' used as the plugin\r\n    *                                        eventbus. If not provided a default eventbus is created.\r\n    *\r\n    * @param {string}   [options.eventPrepend='plugin'] - A customized name to prepend PluginManager events on the\r\n    *                                                     eventbus.\r\n    *\r\n    * @param {PluginManagerOptions}  [options.manager] - The plugin manager options.\r\n    *\r\n    * @param {PluginSupportImpl|Iterable<PluginSupportImpl>} [options.PluginSupport] - Optional classes to\r\n    *                                        pass in which extends the plugin manager. A default implementation is\r\n    *                                        available: {@link PluginInvokeSupport}\r\n    */\r\n   constructor(options = {})\r\n   {\r\n      if (!isObject(options)) { throw new TypeError(`'options' is not an object.`); }\r\n\r\n      if (options.eventbus !== void 0 && !isObject(options.eventbus))\r\n      {\r\n         throw new TypeError(`'options.eventbus' is not an Eventbus.`);\r\n      }\r\n\r\n      if (options.eventPrepend !== void 0 && typeof options.eventPrepend !== 'string')\r\n      {\r\n         throw new TypeError(`'options.eventPrepend' is not a string.`);\r\n      }\r\n\r\n      if (options.manager !== void 0 && !isObject(options.manager))\r\n      {\r\n         throw new TypeError(`'options.manager' is not an object.`);\r\n      }\r\n\r\n      if (options.PluginSupport !== void 0 && typeof options.PluginSupport !== 'function' &&\r\n       !isIterable(options.PluginSupport))\r\n      {\r\n         throw new TypeError(\r\n          `'options.PluginSupport' must be a constructor function or iterable of such matching PluginSupportImpl.`);\r\n      }\r\n\r\n      // Instantiate any PluginSupport classes\r\n      if (isIterable(options.PluginSupport))\r\n      {\r\n         for (const PluginSupport of options.PluginSupport)\r\n         {\r\n            this.#pluginSupport.push(new PluginSupport(this));\r\n         }\r\n      }\r\n      else if (options.PluginSupport !== void 0)\r\n      {\r\n         this.#pluginSupport.push(new options.PluginSupport(this));\r\n      }\r\n\r\n      this.setOptions(options.manager || {});\r\n\r\n      this.setEventbus({\r\n         eventbus: options.eventbus !== void 0 ? options.eventbus : new Eventbus(),\r\n         eventPrepend: options.eventPrepend\r\n      });\r\n   }\r\n\r\n   /**\r\n    * Adds a plugin by the given configuration parameters. A plugin `name` is always required. If no other options\r\n    * are provided then the `name` doubles as the NPM module / local file to load. The loading first checks for an\r\n    * existing `instance` to use as the plugin. Then the `target` is chosen as the NPM module / local file to load.\r\n    * By passing in `options` this will be stored and accessible to the plugin during all callbacks.\r\n    *\r\n    * @param {PluginConfig}   pluginConfig - Defines the plugin to load.\r\n    *\r\n    * @param {object}         [moduleData] - Optional object hash to associate with plugin.\r\n    *\r\n    * @returns {Promise<PluginData>} The PluginData that represents the plugin added.\r\n    */\r\n   async add(pluginConfig, moduleData)\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      if (typeof pluginConfig !== 'object') { throw new TypeError(`'pluginConfig' is not an object.`); }\r\n\r\n      if (typeof pluginConfig.name !== 'string')\r\n      {\r\n         throw new TypeError(\r\n          `'pluginConfig.name' is not a string for entry:\\n${JSON.stringify(pluginConfig, null, 3)}`);\r\n      }\r\n\r\n      if (pluginConfig.target !== void 0 && typeof pluginConfig.target !== 'string' &&\r\n       !(pluginConfig.target instanceof URL))\r\n      {\r\n         throw new TypeError(\r\n          `'pluginConfig.target' is not a string or URL for entry:\\n${JSON.stringify(pluginConfig, null, 3)}`);\r\n      }\r\n\r\n      if (pluginConfig.options !== void 0 && typeof pluginConfig.options !== 'object')\r\n      {\r\n         throw new TypeError(\r\n          `'pluginConfig.options' is not an object for entry:\\n${JSON.stringify(pluginConfig, null, 3)}`);\r\n      }\r\n\r\n      if (moduleData !== void 0 && typeof moduleData !== 'object')\r\n      {\r\n         throw new TypeError(`'moduleData' is not an object for entry:\\n${JSON.stringify(pluginConfig, null, 3)}`);\r\n      }\r\n\r\n      // If a plugin with the same name already exists post a warning and exit early.\r\n      if (this.#pluginMap.has(pluginConfig.name))\r\n      {\r\n         throw new Error(`A plugin already exists with name: ${pluginConfig.name} for entry:\\n${\r\n          JSON.stringify(pluginConfig, null, 3)}`);\r\n      }\r\n\r\n      // If a plugin with the same name is also being currently loaded post a warning and exit early. This is the case\r\n      // when add is used without await and multiple plugins w/ the same name are being dynamically imported.\r\n      if (this.#pluginAddSet.has(pluginConfig.name))\r\n      {\r\n         throw new Error(`A plugin is already being loaded with name: ${pluginConfig.name} for entry:\\n${\r\n          JSON.stringify(pluginConfig, null, 3)}`);\r\n      }\r\n\r\n      this.#pluginAddSet.add(pluginConfig.name);\r\n\r\n      let instance, target, type;\r\n\r\n      // Use an existing instance of a plugin; a static class is assumed when instance is a function.\r\n      if (typeof pluginConfig.instance === 'object' || typeof pluginConfig.instance === 'function')\r\n      {\r\n         instance = pluginConfig.instance;\r\n\r\n         target = pluginConfig.name;\r\n\r\n         type = 'instance';\r\n      }\r\n      else\r\n      {\r\n         // If a target is defined use it instead of the name.\r\n         target = pluginConfig.target || pluginConfig.name;\r\n\r\n         try\r\n         {\r\n            const result = await ModuleLoader.load({ modulepath: target, resolveModule })\r\n\r\n            // Please note that a plugin or other logger must be setup on the associated eventbus.\r\n            if (this.#eventbus !== null)\r\n            {\r\n               this.#eventbus.trigger('log:debug',\r\n                `@typhonjs-plugin/manager - ${result.isESM ? 'import' : 'require'}: ${result.loadpath}`);\r\n            }\r\n\r\n            instance = result.instance;\r\n            type = result.type;\r\n         }\r\n         catch (err)\r\n         {\r\n            // Remove tracking of given plugin config name.\r\n            this.#pluginAddSet.delete(pluginConfig.name);\r\n\r\n            throw new Error(`@typhonjs-plugin/manager - Could not load target: ${target}\\n\\nPluginConfig:\\n`\r\n             + `${JSON.stringify(pluginConfig, null, 3)}\\n\\n${err}`);\r\n         }\r\n      }\r\n\r\n      // Convert any URL target a string.\r\n      if (target instanceof URL)\r\n      {\r\n         target = target.toString();\r\n      }\r\n\r\n      /**\r\n       * Create an object hash with data describing the plugin, manager, and any extra module data.\r\n       *\r\n       * @type {PluginData}\r\n       */\r\n      const pluginData = JSON.parse(JSON.stringify(\r\n      {\r\n         manager:\r\n         {\r\n            eventPrepend: this._eventPrepend,\r\n            scopedName: `${this._eventPrepend}:${pluginConfig.name}`\r\n         },\r\n\r\n         module: moduleData || {},\r\n\r\n         plugin:\r\n         {\r\n            name: pluginConfig.name,\r\n            target,\r\n            targetEscaped: escapeTarget(target),\r\n            type,\r\n            options: pluginConfig.options || {}\r\n         }\r\n      }));\r\n\r\n      deepFreeze(pluginData, ['manager']);\r\n\r\n      const eventbusProxy = this.#eventbus !== null && this.#eventbus !== void 0 ?\r\n       new EventbusProxy(this.#eventbus) /* c8 ignore next */ : void 0;\r\n\r\n      const entry = new PluginEntry(pluginConfig.name, pluginData, instance, eventbusProxy);\r\n\r\n      this.#pluginMap.set(pluginConfig.name, entry);\r\n      this.#pluginAddSet.delete(pluginConfig.name);\r\n\r\n      // Invokes the private internal async events method which allows skipping of error checking.\r\n      const invokeData = await invokeAsyncEvent({\r\n         method: 'onPluginLoad',\r\n         manager: this,\r\n         plugins: pluginConfig.name,\r\n         errorCheck: false\r\n      });\r\n\r\n      if (typeof invokeData.importmeta === 'object')\r\n      {\r\n         entry.importmeta = invokeData.importmeta;\r\n\r\n         // Until we get a Snowpack HMR spec environment for testing ignore this block.\r\n         /* c8 ignore next 7 */\r\n         if (typeof invokeData.importmeta.hot === 'object' && typeof invokeData.importmeta.hot.accept === 'function')\r\n         {\r\n            invokeData.importmeta.hot.accept(({ module }) =>\r\n            {\r\n               this.reload({ plugin: pluginConfig.name, instance: resolveModule(module) });\r\n            });\r\n         }\r\n      }\r\n\r\n      // Invoke `typhonjs:plugin:manager:plugin:added` allowing external code to react to plugin addition.\r\n      if (this.#eventbus)\r\n      {\r\n         await this.#eventbus.triggerAsync(`typhonjs:plugin:manager:plugin:added`, pluginData);\r\n      }\r\n\r\n      return pluginData;\r\n   }\r\n\r\n   /**\r\n    * Initializes multiple plugins in a single call.\r\n    *\r\n    * @param {Iterable<PluginConfig>}   pluginConfigs - An iterable list of plugin config object hash entries.\r\n    *\r\n    * @param {object}                   [moduleData] - Optional object hash to associate with all plugins.\r\n    *\r\n    * @returns {Promise<PluginData[]>} An array of PluginData objects of all added plugins.\r\n    */\r\n   async addAll(pluginConfigs, moduleData)\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      if (!isIterable(pluginConfigs)) { throw new TypeError(`'pluginConfigs' is not iterable.`); }\r\n\r\n      const pluginsData = [];\r\n\r\n      for (const pluginConfig of pluginConfigs)\r\n      {\r\n         const result = await this.add(pluginConfig, moduleData);\r\n\r\n         if (result) { pluginsData.push(result); }\r\n      }\r\n\r\n      return pluginsData;\r\n   }\r\n\r\n   /**\r\n    * Provides the eventbus callback which may prevent addition if optional `noEventAdd` is enabled. This disables\r\n    * the ability for plugins to be added via events preventing any external code adding plugins in this manner.\r\n    *\r\n    * @param {PluginConfig}   pluginConfig - Defines the plugin to load.\r\n    *\r\n    * @param {object}         [moduleData] - Optional object hash to associate with all plugins.\r\n    *\r\n    * @returns {Promise<PluginData>} The PluginData that represents the plugin added.\r\n    * @private\r\n    */\r\n   async _addEventbus(pluginConfig, moduleData)\r\n   {\r\n      /* c8 ignore next */\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      return !this.#options.noEventAdd ? this.add(pluginConfig, moduleData) : void 0;\r\n   }\r\n\r\n   /**\r\n    * Provides the eventbus callback which may prevent addition if optional `noEventAdd` is enabled. This disables\r\n    * the ability for plugins to be added via events preventing any external code adding plugins in this manner.\r\n    *\r\n    * @param {Iterable<PluginConfig>}  pluginConfigs - An iterable list of plugin config object hash entries.\r\n    *\r\n    * @param {object}                  [moduleData] - Optional object hash to associate with all plugins.\r\n    *\r\n    * @returns {Promise<PluginData[]>} An array of PluginData objects of all added plugins.\r\n    * @private\r\n    */\r\n   async _addAllEventbus(pluginConfigs, moduleData)\r\n   {\r\n      /* c8 ignore next */\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      return !this.#options.noEventAdd ? this.addAll(pluginConfigs, moduleData) : [];\r\n   }\r\n\r\n   /**\r\n    * If an eventbus is assigned to this plugin manager then a new EventbusProxy wrapping this eventbus is returned.\r\n    * It is added to `this.#eventbusProxies` so †hat the instances are destroyed when the plugin manager is destroyed.\r\n    *\r\n    * @returns {EventbusProxy} A proxy for the currently set Eventbus.\r\n    */\r\n   createEventbusProxy()\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      /* c8 ignore next */\r\n      if (this.#eventbus === null) { throw new ReferenceError('No eventbus assigned to plugin manager.'); }\r\n\r\n      const eventbusProxy = new EventbusProxy(this.#eventbus);\r\n\r\n      // Store proxy to make sure it is destroyed when the plugin manager is destroyed.\r\n      this.#eventbusProxies.push(eventbusProxy);\r\n\r\n      return eventbusProxy;\r\n   }\r\n\r\n   /**\r\n    * If an eventbus is assigned to this plugin manager then a new EventbusSecure wrapping this eventbus is returned.\r\n    * It is added to `this.#eventbusSecure` so †hat the instances are destroyed when the plugin manager is destroyed.\r\n    *\r\n    * @param {string}   [name] - Optional name for the EventbusSecure instance.\r\n    *\r\n    * @returns {EventbusSecure} A secure wrapper for the currently set Eventbus.\r\n    */\r\n   createEventbusSecure(name = void 0)\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      /* c8 ignore next */\r\n      if (this.#eventbus === null) { throw new ReferenceError('No eventbus assigned to plugin manager.'); }\r\n\r\n      const eventbusSecureObj = EventbusSecure.initialize(this.#eventbus, name);\r\n\r\n      // Store EventbusSecure object to make sure it is destroyed when the plugin manager is destroyed.\r\n      this.#eventbusSecure.push(eventbusSecureObj);\r\n\r\n      return eventbusSecureObj.eventbusSecure;\r\n   }\r\n\r\n   /**\r\n    * Destroys all managed plugins after unloading them.\r\n    *\r\n    * @returns {Promise<DataOutPluginRemoved[]>} A list of plugin names and removal success state.\r\n    */\r\n   async destroy()\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      // Remove all plugins; this will invoke onPluginUnload.\r\n      const results = await this.removeAll();\r\n\r\n      // Destroy any EventbusSecure instances created.\r\n      for (const eventbusSecureObj of this.#eventbusSecure)\r\n      {\r\n         eventbusSecureObj.destroy();\r\n      }\r\n\r\n      this.#eventbusSecure = [];\r\n\r\n      // Destroy any EventbusProxy instances created.\r\n      for (const eventbusProxy of this.#eventbusProxies)\r\n      {\r\n         eventbusProxy.destroy();\r\n      }\r\n\r\n      this.#eventbusProxies = [];\r\n\r\n      if (this.#eventbus !== null && this.#eventbus !== void 0)\r\n      {\r\n         this.#eventbus.off(`${this._eventPrepend}:async:add`, this._addEventbus, this);\r\n         this.#eventbus.off(`${this._eventPrepend}:async:add:all`, this._addAllEventbus, this);\r\n         this.#eventbus.off(`${this._eventPrepend}:async:destroy:manager`, this._destroyEventbus, this);\r\n         this.#eventbus.off(`${this._eventPrepend}:async:remove`, this._removeEventbus, this);\r\n         this.#eventbus.off(`${this._eventPrepend}:async:remove:all`, this._removeAllEventbus, this);\r\n         this.#eventbus.off(`${this._eventPrepend}:get:enabled`, this.getEnabled, this);\r\n         this.#eventbus.off(`${this._eventPrepend}:get:plugin:by:event`, this.getPluginByEvent, this);\r\n         this.#eventbus.off(`${this._eventPrepend}:get:plugin:data`, this.getPluginData, this);\r\n         this.#eventbus.off(`${this._eventPrepend}:get:plugin:events`, this.getPluginEvents, this);\r\n         this.#eventbus.off(`${this._eventPrepend}:get:plugin:names`, this.getPluginNames, this);\r\n         this.#eventbus.off(`${this._eventPrepend}:get:options`, this.getOptions, this);\r\n         this.#eventbus.off(`${this._eventPrepend}:has:plugin`, this.hasPlugins, this);\r\n         this.#eventbus.off(`${this._eventPrepend}:is:valid:config`, this.isValidConfig, this);\r\n         this.#eventbus.off(`${this._eventPrepend}:set:enabled`, this._setEnabledEventbus, this);\r\n         this.#eventbus.off(`${this._eventPrepend}:set:options`, this._setOptionsEventbus, this);\r\n      }\r\n\r\n      for (const pluginSupport of this.#pluginSupport)\r\n      {\r\n         await pluginSupport.destroy({ eventbus: this.#eventbus, eventPrepend: this._eventPrepend });\r\n      }\r\n\r\n      this.#pluginSupport = [];\r\n      this.#pluginMap = null;\r\n      this.#eventbus = null;\r\n\r\n      return results;\r\n   }\r\n\r\n   /**\r\n    * Provides the eventbus callback which may prevent plugin manager destruction if optional `noEventDestroy` is\r\n    * enabled. This disables the ability for the plugin manager to be destroyed via events preventing any external\r\n    * code removing plugins in this manner.\r\n    *\r\n    * @private\r\n    * @returns {Promise<DataOutPluginRemoved[]>} A list of plugin names and removal success state.\r\n    */\r\n   async _destroyEventbus()\r\n   {\r\n      /* c8 ignore next */\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      return !this.#options.noEventDestroy ? this.destroy() : [];\r\n   }\r\n\r\n   /**\r\n    * Returns whether this plugin manager has been destroyed.\r\n    *\r\n    * @returns {boolean} Returns whether this plugin manager has been destroyed.\r\n    */\r\n   get isDestroyed()\r\n   {\r\n      return this.#pluginMap === null || this.#pluginMap === void 0;\r\n   }\r\n\r\n   /**\r\n    * Returns the enabled state of a plugin, a list of plugins, or all plugins.\r\n    *\r\n    * @param {object}                  [opts] - Options object. If undefined all plugin enabled state is returned.\r\n    *\r\n    * @param {string|Iterable<string>} [opts.plugins] - Plugin name or iterable list of names to get state.\r\n    *\r\n    * @returns {boolean|DataOutPluginEnabled[]} Enabled state for single plugin or array of results for multiple\r\n    *                                                plugins.\r\n    */\r\n   getEnabled({ plugins = [] } = {})\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      if (typeof plugins !== 'string' && !isIterable(plugins))\r\n      {\r\n         throw new TypeError(`'plugins' is not a string or iterable.`);\r\n      }\r\n\r\n      // Return a single boolean enabled result for a single plugin if found.\r\n      if (typeof plugins === 'string')\r\n      {\r\n         const entry = this.#pluginMap.get(plugins);\r\n         return entry !== void 0 && entry.enabled;\r\n      }\r\n\r\n      const results = [];\r\n\r\n      let count = 0;\r\n\r\n      for (const plugin of plugins)\r\n      {\r\n         const entry = this.#pluginMap.get(plugin);\r\n         const loaded = entry !== void 0;\r\n         results.push({ plugin, enabled: loaded && entry.enabled, loaded });\r\n         count++;\r\n      }\r\n\r\n      // Iterable plugins had no entries so return all plugin data.\r\n      if (count === 0)\r\n      {\r\n         for (const [plugin, entry] of this.#pluginMap.entries())\r\n         {\r\n            const loaded = entry !== void 0;\r\n            results.push({ plugin, enabled: loaded && entry.enabled, loaded });\r\n         }\r\n      }\r\n\r\n      return results;\r\n   }\r\n\r\n   /**\r\n    * Returns any associated eventbus.\r\n    *\r\n    * @returns {Eventbus} The associated eventbus.\r\n    */\r\n   getEventbus()\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      return this.#eventbus;\r\n   }\r\n\r\n   /**\r\n    * Returns a copy of the plugin manager options.\r\n    *\r\n    * @returns {PluginManagerOptions} A copy of the plugin manager options.\r\n    */\r\n   getOptions()\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      return JSON.parse(JSON.stringify(this.#options));\r\n   }\r\n\r\n   /**\r\n    * Returns the event binding names registered on any associated plugin EventbusProxy.\r\n    *\r\n    * @param {object}          opts - Options object.\r\n    *\r\n    * @param {string|RegExp}   opts.event - Event name or RegExp to match event names.\r\n    *\r\n    * @returns {string[]|DataOutPluginEvents[]} Event binding names registered from the plugin.\r\n    */\r\n   getPluginByEvent({ event })\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      if (typeof event !== 'string' && !(event instanceof RegExp))\r\n      {\r\n         throw new TypeError(`'event' is not a string or RegExp.`);\r\n      }\r\n\r\n      const pluginEvents = this.getPluginEvents();\r\n\r\n      const results = [];\r\n\r\n      if (typeof event === 'string')\r\n      {\r\n         for (const entry of pluginEvents)\r\n         {\r\n            if (entry.events.includes(event)) { results.push(entry.plugin); }\r\n         }\r\n      }\r\n      else\r\n      {\r\n         for (const entry of pluginEvents)\r\n         {\r\n            for (const eventEntry of entry.events)\r\n            {\r\n               if (event.test(eventEntry))\r\n               {\r\n                  results.push(entry.plugin);\r\n                  break;\r\n               }\r\n            }\r\n         }\r\n      }\r\n\r\n      return results;\r\n   }\r\n\r\n   /**\r\n    * Gets the plugin data for a plugin, list of plugins, or all plugins.\r\n    *\r\n    * @param {object}                  [opts] - Options object. If undefined all plugin data is returned.\r\n    *\r\n    * @param {string|Iterable<string>} [opts.plugins] - Plugin name or iterable list of names to get plugin data.\r\n    *\r\n    * @returns {PluginData|PluginData[]|undefined} The plugin data for a plugin or list of plugins.\r\n    */\r\n   getPluginData({ plugins = [] } = {})\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      if (typeof plugins !== 'string' && !isIterable(plugins))\r\n      {\r\n         throw new TypeError(`'plugins' is not a string or iterable.`);\r\n      }\r\n\r\n      // Return a PluginData result for a single plugin if found.\r\n      if (typeof plugins === 'string')\r\n      {\r\n         const entry = this.#pluginMap.get(plugins);\r\n         return entry !== void 0 ? JSON.parse(JSON.stringify(entry.data)) : void 0;\r\n      }\r\n\r\n      const results = [];\r\n\r\n      let count = 0;\r\n\r\n      for (const name of plugins)\r\n      {\r\n         const entry = this.#pluginMap.get(name);\r\n\r\n         if (entry !== void 0)\r\n         {\r\n            results.push(JSON.parse(JSON.stringify(entry.data)));\r\n         }\r\n         count++;\r\n      }\r\n\r\n      // Iterable plugins had no entries so return all plugin data.\r\n      if (count === 0)\r\n      {\r\n         for (const entry of this.#pluginMap.values())\r\n         {\r\n            if (entry !== void 0)\r\n            {\r\n               results.push(JSON.parse(JSON.stringify(entry.data)));\r\n            }\r\n         }\r\n      }\r\n\r\n      return results;\r\n   }\r\n\r\n   /**\r\n    * Gets a PluginEntry instance for the given plugin name. This method is primarily for {@link PluginSupportImpl}\r\n    * classes.\r\n    *\r\n    * @param {string} plugin - The plugin name to get.\r\n    *\r\n    * @returns {void|PluginEntry} The PluginEntry for the given plugin name.\r\n    */\r\n   getPluginEntry(plugin)\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      return this.#pluginMap.get(plugin)\r\n   }\r\n\r\n   /**\r\n    * Returns the event binding names registered on any associated plugin EventbusProxy.\r\n    *\r\n    * @param {object}                  [opts] - Options object. If undefined all plugin data is returned.\r\n    *\r\n    * @param {string|Iterable<string>} [opts.plugins] - Plugin name or iterable list of names to get plugin data.\r\n    *\r\n    * @returns {string[]|DataOutPluginEvents[]} Event binding names registered from the plugin.\r\n    */\r\n   getPluginEvents({ plugins = [] } = {})\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      if (typeof plugins !== 'string' && !isIterable(plugins))\r\n      {\r\n         throw new TypeError(`'plugins' is not a string or iterable.`);\r\n      }\r\n\r\n      // Return a PluginData result for a single plugin if found.\r\n      if (typeof plugins === 'string')\r\n      {\r\n         const entry = this.#pluginMap.get(plugins);\r\n         return entry !== void 0 && entry.eventbusProxy ?\r\n          Array.from(entry.eventbusProxy.proxyKeys()).sort() /* c8 ignore next */ : [];\r\n      }\r\n\r\n      const results = [];\r\n\r\n      let count = 0;\r\n\r\n      for (const plugin of plugins)\r\n      {\r\n         const entry = this.#pluginMap.get(plugin);\r\n\r\n         if (entry !== void 0)\r\n         {\r\n            results.push({\r\n               plugin,\r\n               events: entry.eventbusProxy ?\r\n                Array.from(entry.eventbusProxy.proxyKeys()).sort() /* c8 ignore next */ : []\r\n            });\r\n         }\r\n         count++;\r\n      }\r\n\r\n      // Iterable plugins had no entries so return all plugin data.\r\n      if (count === 0)\r\n      {\r\n         for (const entry of this.#pluginMap.values())\r\n         {\r\n            if (entry !== void 0)\r\n            {\r\n               results.push({\r\n                  plugin: entry.name,\r\n                  events: entry.eventbusProxy ?\r\n                   Array.from(entry.eventbusProxy.proxyKeys()).sort() /* c8 ignore next */ : []\r\n               });\r\n            }\r\n         }\r\n      }\r\n\r\n      return results;\r\n   }\r\n\r\n   /**\r\n    * Returns an iterable of plugin map keys (plugin names). This method is primarily for {@link PluginSupportImpl}\r\n    * classes.\r\n    *\r\n    * @returns {Iterable<string>} An iterable of plugin map keys.\r\n    */\r\n   getPluginMapKeys()\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      return this.#pluginMap.keys();\r\n   }\r\n\r\n   /**\r\n    * Returns an iterable of plugin map keys (plugin names). This method is primarily for {@link PluginSupportImpl}\r\n    * classes.\r\n    *\r\n    * @returns {Iterable<PluginEntry>} An iterable of plugin map keys.\r\n    */\r\n   getPluginMapValues()\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      return this.#pluginMap.values();\r\n   }\r\n\r\n   /**\r\n    * Returns all plugin names or if enabled is set then return plugins matching the enabled state.\r\n    *\r\n    * @param {object}  [opts] - Options object. If undefined all plugin names are returned regardless of enabled state.\r\n    *\r\n    * @param {boolean} [opts.enabled] - If enabled is a boolean it will return plugins given their enabled state.\r\n    *\r\n    * @returns {string[]} A list of plugin names optionally by enabled state.\r\n    */\r\n   getPluginNames({ enabled = void 0 } = {})\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      if (enabled !== void 0 && typeof enabled !== 'boolean')\r\n      {\r\n         throw new TypeError(`'enabled' is not a boolean.`);\r\n      }\r\n\r\n      const anyEnabledState = enabled === void 0;\r\n\r\n      const results = [];\r\n\r\n      for (const entry of this.#pluginMap.values())\r\n      {\r\n         if (anyEnabledState || entry.enabled === enabled) { results.push(entry.name); }\r\n      }\r\n\r\n      return results.sort();\r\n   }\r\n\r\n   /**\r\n    * Returns true if there is a plugin loaded with the given plugin name(s). If no options are provided then\r\n     * the result will be if any plugins are loaded.\r\n    *\r\n    * @param {object}                  [opts] - Options object. If undefined returns whether there are any plugins.\r\n    *\r\n    * @param {string|Iterable<string>} [opts.plugins] - Plugin name or iterable list of names to check existence.\r\n    *\r\n    * @returns {boolean} True if given plugin(s) exist.\r\n    */\r\n   hasPlugins({ plugins = [] } = {})\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      if (typeof plugins !== 'string' && !isIterable(plugins))\r\n      {\r\n         throw new TypeError(`'plugins' is not a string or iterable.`);\r\n      }\r\n\r\n      // Return whether a single plugin exists.\r\n      if (typeof plugins === 'string')\r\n      {\r\n         return this.#pluginMap.has(plugins);\r\n      }\r\n\r\n      let count = 0;\r\n\r\n      // Return whether all plugins specified exist.\r\n      for (const name of plugins)\r\n      {\r\n         if (!this.#pluginMap.has(name)) { return false; }\r\n\r\n         count++;\r\n      }\r\n\r\n      // Iterable plugins had no entries so simply check size of the map.\r\n      if (count === 0)\r\n      {\r\n         return this.#pluginMap.size !== 0;\r\n      }\r\n\r\n      return true;\r\n   }\r\n\r\n   /**\r\n    * Performs validation of a PluginConfig.\r\n    *\r\n    * @param {PluginConfig}   pluginConfig - A PluginConfig to validate.\r\n    *\r\n    * @returns {boolean} True if the given PluginConfig is valid.\r\n    */\r\n   isValidConfig(pluginConfig)\r\n   {\r\n      return isValidConfig(pluginConfig);\r\n   }\r\n\r\n   /**\r\n    * Unloads / reloads the plugin invoking `onPluginUnload` / then `onPluginReload`\r\n    *\r\n    * @param {object}   opts - Options object.\r\n    *\r\n    * @param {string}   opts.plugin - Plugin name to reload.\r\n    *\r\n    * @param {object}   [opts.instance] - Optional instance to replace.\r\n    *\r\n    * @param {boolean}  [opts.silent] - Does not trigger any reload notification on the eventbus.\r\n    *\r\n    * @returns {Promise<boolean>} Result of reload attempt.\r\n    */\r\n   async reload({ plugin, instance = void 0, silent = false })\r\n   {\r\n      if (typeof plugin !== 'string') { throw new TypeError(`'plugin' is not a string.`); }\r\n      if (instance !== void 0 && typeof instance !== 'object') { throw new TypeError(`'instance' is not an object.`); }\r\n      if (typeof silent !== 'boolean') { throw new TypeError(`'silent' is not a boolean.`); }\r\n\r\n      const entry = this.#pluginMap.get(plugin);\r\n\r\n      if (entry === void 0) { return false; }\r\n\r\n      // Store any state to load into new plugin instance.\r\n      let state = void 0;\r\n\r\n      let error = void 0;\r\n\r\n      try\r\n      {\r\n         // Invokes the private internal async events method which allows skipping of error checking.\r\n         const unloadData = await invokeAsyncEvent({\r\n            method: 'onPluginUnload',\r\n            manager: this,\r\n            plugins: plugin,\r\n            errorCheck: false\r\n         });\r\n\r\n         state = unloadData.state;\r\n      }\r\n      catch (err)\r\n      {\r\n         error = err;\r\n      }\r\n\r\n      // Automatically clean up most resources.\r\n      entry.reset();\r\n\r\n      if (entry.eventbusProxy instanceof EventbusProxy) { entry.eventbusProxy.off(); }\r\n\r\n      if (typeof instance === 'object')\r\n      {\r\n         entry.instance = instance;\r\n      }\r\n\r\n      // Invokes the private internal async events method which allows skipping of error checking.\r\n      const invokeData = await invokeAsyncEvent({\r\n         method: 'onPluginLoad',\r\n         manager: this,\r\n         plugins: plugin,\r\n         passthruProps: { state },\r\n         errorCheck: false\r\n      });\r\n\r\n      // Invoke `typhonjs:plugin:manager:plugin:reloaded` allowing external code to react to plugin reload.\r\n      try\r\n      {\r\n         if (this.#eventbus && !silent)\r\n         {\r\n            await this.#eventbus.triggerAsync(`typhonjs:plugin:manager:plugin:reloaded`,\r\n             JSON.parse(JSON.stringify(entry.data)));\r\n         }\r\n      }\r\n      catch (err)\r\n      {\r\n         // Only track this error if no previous error exists from onPluginUnload invocation.\r\n         if (error === void 0) { error = err; }\r\n      }\r\n\r\n      if (typeof invokeData.importmeta === 'object')\r\n      {\r\n         entry.importmeta = invokeData.importmeta;\r\n\r\n         // Until we get a Snowpack HMR spec environment for testing ignore this block.\r\n         /* c8 ignore next 7 */\r\n         if (typeof invokeData.importmeta.hot === 'object' && typeof invokeData.importmeta.hot.accept === 'function')\r\n         {\r\n            invokeData.importmeta.hot.accept(({ module }) =>\r\n            {\r\n               this.reload({ plugin, instance: resolveModule(module) });\r\n            });\r\n         }\r\n      }\r\n\r\n      // Throw any error raised first from any onPluginUnload invocation then the\r\n      // `typhonjs:plugin:manager:plugin:reloaded` event.\r\n      if (error) { throw error; }\r\n\r\n      return true;\r\n  }\r\n\r\n   /**\r\n    * Removes a plugin by name or all names in an iterable list unloading them and clearing any event bindings\r\n    * automatically.\r\n    *\r\n    * @param {object}                  opts - Options object.\r\n    *\r\n    * @param {string|Iterable<string>} opts.plugins - Plugin name or iterable list of names to remove.\r\n    *\r\n    * @returns {Promise<DataOutPluginRemoved[]>} A list of plugin names and removal success state.\r\n    */\r\n   async remove({ plugins })\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      if (typeof plugins !== 'string' && !isIterable(plugins))\r\n      {\r\n         throw new TypeError(`'plugins' is not a string or iterable.`);\r\n      }\r\n\r\n      const removeEntry = async (entry) =>\r\n      {\r\n         const errors = [];\r\n\r\n         const pluginName = entry.name;\r\n\r\n         try\r\n         {\r\n            // Invokes the private internal async events method which allows skipping of error checking.\r\n            await invokeAsyncEvent({ method: 'onPluginUnload', manager: this, plugins: pluginName, errorCheck: false });\r\n         }\r\n         catch (err)\r\n         {\r\n            errors.push(err);\r\n         }\r\n\r\n         entry.reset();\r\n\r\n         if (entry.eventbusProxy instanceof EventbusProxy) { entry.eventbusProxy.destroy(); }\r\n\r\n         this.#pluginMap.delete(pluginName);\r\n\r\n         // Invoke `typhonjs:plugin:manager:plugin:removed` allowing external code to react to plugin removed.\r\n         try\r\n         {\r\n            if (this.#eventbus)\r\n            {\r\n               await this.#eventbus.triggerAsync(`typhonjs:plugin:manager:plugin:removed`,\r\n                JSON.parse(JSON.stringify(entry.data)));\r\n            }\r\n         }\r\n         catch (err)\r\n         {\r\n            errors.push(err);\r\n         }\r\n\r\n         return { plugin: pluginName, success: errors.length === 0, errors };\r\n      };\r\n\r\n      const results = [];\r\n\r\n      // Return a single boolean enabled result for a single plugin if found.\r\n      if (typeof plugins === 'string')\r\n      {\r\n         const entry = this.#pluginMap.get(plugins);\r\n\r\n         if (entry !== void 0)\r\n         {\r\n            results.push(await removeEntry(entry));\r\n         }\r\n      }\r\n      else\r\n      {\r\n         for (const name of plugins)\r\n         {\r\n            const entry = this.#pluginMap.get(name);\r\n\r\n            if (entry !== void 0)\r\n            {\r\n               results.push(await removeEntry(entry));\r\n            }\r\n         }\r\n      }\r\n\r\n      return results;\r\n   }\r\n\r\n   /**\r\n    * Removes all plugins after unloading them and clearing any event bindings automatically.\r\n    *\r\n    * @returns {Promise.<DataOutPluginRemoved[]>} A list of plugin names and removal success state.\r\n    */\r\n   async removeAll()\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      return this.remove({ plugins: Array.from(this.#pluginMap.keys()) });\r\n   }\r\n\r\n   /**\r\n    * Provides the eventbus callback which may prevent removal if optional `noEventRemoval` is enabled. This disables\r\n    * the ability for plugins to be removed via events preventing any external code removing plugins in this manner.\r\n    *\r\n    * @param {object}                  opts - Options object\r\n    *\r\n    * @param {string|Iterable<string>} opts.plugins - Plugin name or iterable list of names to remove.\r\n    *\r\n    * @returns {Promise<DataOutPluginRemoved>} A list of plugin names and removal success state.\r\n    * @private\r\n    */\r\n   async _removeEventbus(opts)\r\n   {\r\n      /* c8 ignore next */\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      return !this.#options.noEventRemoval ? this.remove(opts) : [];\r\n   }\r\n\r\n   /**\r\n    * Provides the eventbus callback which may prevent removal if optional `noEventRemoval` is enabled. This disables\r\n    * the ability for plugins to be removed via events preventing any external code removing plugins in this manner.\r\n    *\r\n    * @returns {Promise.<DataOutPluginRemoved[]>} A list of plugin names and removal success state.\r\n    * @private\r\n    */\r\n   async _removeAllEventbus()\r\n   {\r\n      /* c8 ignore next */\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      return !this.#options.noEventRemoval ? this.removeAll() : [];\r\n   }\r\n\r\n   /**\r\n    * Sets the enabled state of a plugin, a list of plugins, or all plugins.\r\n    *\r\n    * @param {object}            opts - Options object.\r\n    *\r\n    * @param {boolean}           opts.enabled - The enabled state.\r\n    *\r\n    * @param {string|Iterable<string>} [opts.plugins] - Plugin name or iterable list of names to set state.\r\n    */\r\n   setEnabled({ enabled, plugins = [] })\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      if (typeof plugins !== 'string' && !isIterable(plugins))\r\n      {\r\n         throw new TypeError(`'plugins' is not a string or iterable.`);\r\n      }\r\n\r\n      if (typeof enabled !== 'boolean') { throw new TypeError(`'enabled' is not a boolean.`); }\r\n\r\n      const setEntryEnabled = (entry) =>\r\n      {\r\n         if (entry !== void 0)\r\n         {\r\n            entry.enabled = enabled;\r\n\r\n            // Invoke `typhonjs:plugin:manager:plugin:enabled` allowing external code to react to plugin enabled state.\r\n            if (this.#eventbus)\r\n            {\r\n               this.#eventbus.trigger(`typhonjs:plugin:manager:plugin:enabled`, Object.assign({\r\n                  enabled\r\n               }, JSON.parse(JSON.stringify(entry.data))));\r\n            }\r\n         }\r\n      };\r\n\r\n      // Set enabled state for a single plugin if found.\r\n      if (typeof plugins === 'string')\r\n      {\r\n         setEntryEnabled(this.#pluginMap.get(plugins));\r\n      }\r\n\r\n      let count = 0;\r\n\r\n      // First attempt to iterate through plugins.\r\n      for (const name of plugins)\r\n      {\r\n         setEntryEnabled(this.#pluginMap.get(name));\r\n         count++;\r\n      }\r\n\r\n      // If plugins is empty then set all plugins enabled state.\r\n      if (count === 0)\r\n      {\r\n         for (const entry of this.#pluginMap.values())\r\n         {\r\n            setEntryEnabled(entry);\r\n         }\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Provides the eventbus callback which may prevent setEnabled if optional `noEventSetEnabled` is true. This\r\n    * disables the ability for setting plugin enabled state via events preventing any external code from setting state.\r\n    *\r\n    * @param {object}   opts - Options object.\r\n    *\r\n    * @private\r\n    */\r\n   _setEnabledEventbus(opts)\r\n   {\r\n      /* c8 ignore next */\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      if (!this.#options.noEventSetEnabled) { this.setEnabled(opts); }\r\n   }\r\n\r\n   /**\r\n    * Sets the eventbus associated with this plugin manager. If any previous eventbus was associated all plugin manager\r\n    * events will be removed then added to the new eventbus. If there are any existing plugins being managed their\r\n    * events will be removed from the old eventbus and then `onPluginLoad` will be called with the new eventbus.\r\n    *\r\n    * @param {object}     opts - An options object.\r\n    *\r\n    * @param {Eventbus}   opts.eventbus - The new eventbus to associate.\r\n    *\r\n    * @param {string}     [opts.eventPrepend='plugins'] - An optional string to prepend to all of the event\r\n    *                                                     binding targets.\r\n    */\r\n   async setEventbus({ eventbus, eventPrepend = 'plugins' })\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      if (!isObject(eventbus)) { throw new TypeError(`'eventbus' is not an Eventbus.`); }\r\n      if (typeof eventPrepend !== 'string') { throw new TypeError(`'eventPrepend' is not a string.`); }\r\n\r\n      // Early escape if the eventbus is the same as the current eventbus.\r\n      if (eventbus === this.#eventbus) { return; }\r\n\r\n      const oldPrepend = this._eventPrepend;\r\n\r\n      /**\r\n       * Stores the prepend string for eventbus registration.\r\n       *\r\n       * @type {string}\r\n       * @private\r\n       */\r\n      this._eventPrepend = eventPrepend;\r\n\r\n      // Unload and reload any existing plugins from the old eventbus to the target eventbus.\r\n      if (this.#pluginMap.size > 0)\r\n      {\r\n         // Invokes the private internal async events method which allows skipping of error checking.\r\n         await invokeAsyncEvent({ method: 'onPluginUnload', manager: this, errorCheck: false });\r\n\r\n         for (const entry of this.#pluginMap.values())\r\n         {\r\n            try\r\n            {\r\n               // Automatically remove any potential reference to a stored event proxy instance.\r\n               delete entry.instance._eventbus;\r\n            }\r\n            /* c8 ignore next */\r\n            catch (err) { /* nop */ }\r\n\r\n            entry.data.manager.eventPrepend = eventPrepend;\r\n            entry.data.manager.scopedName = `${eventPrepend}:${entry.name}`;\r\n\r\n            if (entry.eventbusProxy instanceof EventbusProxy) { entry.eventbusProxy.destroy(); }\r\n\r\n            entry.eventbusProxy = new EventbusProxy(eventbus);\r\n\r\n            // Invokes the private internal async events method which allows skipping of error checking.\r\n            if (entry.enabled)\r\n            {\r\n               await invokeAsyncEvent({\r\n                  method: 'onPluginLoad',\r\n                  manager: this,\r\n                  plugins: entry.name,\r\n                  errorCheck: false\r\n               });\r\n            }\r\n         }\r\n      }\r\n\r\n      if (this.#eventbus !== null)\r\n      {\r\n         this.#eventbus.off(`${oldPrepend}:async:add`, this._addEventbus, this);\r\n         this.#eventbus.off(`${oldPrepend}:async:add:all`, this._addAllEventbus, this);\r\n         this.#eventbus.off(`${oldPrepend}:async:destroy:manager`, this._destroyEventbus, this);\r\n         this.#eventbus.off(`${oldPrepend}:async:remove`, this._removeEventbus, this);\r\n         this.#eventbus.off(`${oldPrepend}:async:remove:all`, this._removeAllEventbus, this);\r\n         this.#eventbus.off(`${oldPrepend}:get:enabled`, this.getEnabled, this);\r\n         this.#eventbus.off(`${oldPrepend}:get:options`, this.getOptions, this);\r\n         this.#eventbus.off(`${oldPrepend}:get:plugin:by:event`, this.getPluginByEvent, this);\r\n         this.#eventbus.off(`${oldPrepend}:get:plugin:data`, this.getPluginData, this);\r\n         this.#eventbus.off(`${oldPrepend}:get:plugin:events`, this.getPluginEvents, this);\r\n         this.#eventbus.off(`${oldPrepend}:get:plugin:names`, this.getPluginNames, this);\r\n         this.#eventbus.off(`${oldPrepend}:has:plugin`, this.hasPlugins, this);\r\n         this.#eventbus.off(`${oldPrepend}:is:valid:config`, this.isValidConfig, this);\r\n         this.#eventbus.off(`${oldPrepend}:set:enabled`, this._setEnabledEventbus, this);\r\n         this.#eventbus.off(`${oldPrepend}:set:options`, this._setOptionsEventbus, this);\r\n      }\r\n\r\n      eventbus.on(`${eventPrepend}:async:add`, this._addEventbus, this, { guard: true });\r\n      eventbus.on(`${eventPrepend}:async:add:all`, this._addAllEventbus, this, { guard: true });\r\n      eventbus.on(`${eventPrepend}:async:destroy:manager`, this._destroyEventbus, this, { guard: true });\r\n      eventbus.on(`${eventPrepend}:async:remove`, this._removeEventbus, this, { guard: true });\r\n      eventbus.on(`${eventPrepend}:async:remove:all`, this._removeAllEventbus, this, { guard: true });\r\n      eventbus.on(`${eventPrepend}:get:enabled`, this.getEnabled, this, { guard: true });\r\n      eventbus.on(`${eventPrepend}:get:options`, this.getOptions, this, { guard: true });\r\n      eventbus.on(`${eventPrepend}:get:plugin:by:event`, this.getPluginByEvent, this, { guard: true });\r\n      eventbus.on(`${eventPrepend}:get:plugin:data`, this.getPluginData, this, { guard: true });\r\n      eventbus.on(`${eventPrepend}:get:plugin:events`, this.getPluginEvents, this, { guard: true });\r\n      eventbus.on(`${eventPrepend}:get:plugin:names`, this.getPluginNames, this, { guard: true });\r\n      eventbus.on(`${eventPrepend}:has:plugin`, this.hasPlugins, this, { guard: true });\r\n      eventbus.on(`${eventPrepend}:is:valid:config`, this.isValidConfig, this, { guard: true });\r\n      eventbus.on(`${eventPrepend}:set:enabled`, this._setEnabledEventbus, this, { guard: true });\r\n      eventbus.on(`${eventPrepend}:set:options`, this._setOptionsEventbus, this, { guard: true });\r\n\r\n      for (const pluginSupport of this.#pluginSupport)\r\n      {\r\n         pluginSupport.setEventbus({\r\n            oldEventbus: this.#eventbus,\r\n            newEventbus: eventbus,\r\n            oldPrepend,\r\n            newPrepend: eventPrepend\r\n         });\r\n      }\r\n\r\n      // Set the new eventbus for any EventbusSecure instances created.\r\n      for (const eventbusSecureObj of this.#eventbusSecure)\r\n      {\r\n         eventbusSecureObj.setEventbus(eventbus);\r\n      }\r\n\r\n      this.#eventbus = eventbus;\r\n   }\r\n\r\n   /**\r\n    * Set optional parameters.\r\n    *\r\n    * @param {PluginManagerOptions} options - Defines optional parameters to set.\r\n    */\r\n   setOptions(options)\r\n   {\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      if (!isObject(options)) { throw new TypeError(`'options' is not an object.`); }\r\n\r\n      if (typeof options.noEventAdd === 'boolean') { this.#options.noEventAdd = options.noEventAdd; }\r\n\r\n      if (typeof options.noEventDestroy === 'boolean') { this.#options.noEventDestroy = options.noEventDestroy; }\r\n\r\n      if (typeof options.noEventRemoval === 'boolean') { this.#options.noEventRemoval = options.noEventRemoval; }\r\n\r\n      if (typeof options.noEventSetEnabled === 'boolean')\r\n      {\r\n         this.#options.noEventSetEnabled = options.noEventSetEnabled;\r\n      }\r\n\r\n      if (typeof options.noEventSetOptions === 'boolean')\r\n      {\r\n         this.#options.noEventSetOptions = options.noEventSetOptions;\r\n      }\r\n\r\n      if (typeof options.throwNoMethod === 'boolean') { this.#options.throwNoMethod = options.throwNoMethod; }\r\n\r\n      if (typeof options.throwNoPlugin === 'boolean') { this.#options.throwNoPlugin = options.throwNoPlugin; }\r\n\r\n      for (const pluginSupport of this.#pluginSupport)\r\n      {\r\n         pluginSupport.setOptions(options);\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Provides the eventbus callback which may prevent plugin manager options being set if optional `noEventSetOptions`\r\n    * is enabled. This disables the ability for the plugin manager options to be set via events preventing any external\r\n    * code modifying options.\r\n    *\r\n    * @param {PluginManagerOptions} options - Defines optional parameters to set.\r\n    *\r\n    * @private\r\n    */\r\n   _setOptionsEventbus(options)\r\n   {\r\n      /* c8 ignore next */\r\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\r\n\r\n      if (!this.#options.noEventSetOptions) { this.setOptions(options); }\r\n   }\r\n}\r\n"],"names":["eventSplitter","eventsAPI","iteratee","events","name","callback","opts","names","i","context","objectKeys","length","test","split","getErrorName","eventbus","object","Object","keys","beforeMap","map","after","count","beforeWrapper","s_BEFORE","apply","this","arguments","_callback","before","result","args","Eventbus","constructor","TypeError","_listeners","_listenId","_listeningTo","options","Number","isInteger","data","isGuarded","console","warn","Utils","JSON","stringify","off","bind","on","regex","RegExp","event","_classPrivateFieldGet","parse","guarded","s_IS_GUARDED","listenTo","obj","s_TRY_CATCH_IS_GUARDED","id","s_UNIQUE_ID","listeningTo","listening","_listening","Listening","error","s_TRY_CATCH_ON","interop","listenToBefore","stopListening","listenToOnce","s_OFF_API","listeners","s_ON_API","ctx","once","ids","trigger","s_RESULTS_TARGET_API","s_TRIGGER_API","s_TRIGGER_EVENTS","s_TRIGGER_ASYNC_EVENTS","Array","isArray","Promise","all","then","results","allResults","pResult","concat","push","triggerDefer","setTimeout","triggerSync","s_TRIGGER_SYNC_EVENTS","listener","cleanup","incrementCount","value","output","handlers","handler","guard","remaining","j","iterateeTarget","resultsType","newArray","objEvents","allEvents","slice","ev","a1","a2","a3","l","call","async","values","filtered","filter","entry","err","idCounter","prefix","EventbusProxy","seal","isDestroyed","ReferenceError","destroy","entries","eventCount","callbackCount","triggerAsync","EventbusSecure","eventbusSecure","setEventbus","pluginEventbus","testEventbus","s_URL_REGEX","PluginEntry","instance","eventbusProxy","reset","_eventbus","enabled","from","proxyEntries","importmeta","deepFreeze","skipFreezeKeys","_deepFreeze","isIterable","Symbol","iterator","isObject","cntr","key","hasOwnProperty","includes","freeze","PluginInvokeEvent","copyProps","passthruProps","assign","pluginName","pluginOptions","invokeAsyncEvent","method","manager","plugins","errorCheck","getOptions","getPluginMapKeys","pluginInvokeCount","pluginInvokeNames","hasMethod","hasPlugin","getPluginEntry","plugin","throwNoPlugin","Error","throwNoMethod","$$plugin_invoke_count","$$plugin_invoke_names","s_REGEX_ESCAPE_RELATIVE","s_REGEX_ESCAPE_FORWARD","s_REGEX_STRING_URL","escapeTarget","target","targetEscaped","URL","pathname","match","replace","isValidConfig","pluginConfig","module","onPluginLoad","default","PluginInvokeSupport","pluginManager","eventPrepend","invokeAsync","getMethodNames","invoke","invokeSync","invokeSyncEvent","anyEnabledState","s_GET_ALL_PROPERTY_NAMES","getPluginMapValues","sort","isArgsArray","oldEventbus","newEventbus","oldPrepend","newPrepend","setOptions","props","getOwnPropertyNames","forEach","prop","indexOf","getPrototypeOf","prototype","noEventAdd","noEventDestroy","noEventRemoval","noEventSetEnabled","noEventSetOptions","Set","Map","PluginSupport","moduleData","has","type","add","modulepath","resolveModule","import","loadpath","toString","filepath","isESM","load","delete","pluginData","_eventPrepend","scopedName","set","invokeData","hot","accept","reload","pluginConfigs","pluginsData","addAll","createEventbusProxy","createEventbusSecure","eventbusSecureObj","initialize","removeAll","_addEventbus","_addAllEventbus","_destroyEventbus","_removeEventbus","_removeAllEventbus","getEnabled","getPluginByEvent","getPluginData","getPluginEvents","getPluginNames","hasPlugins","_setEnabledEventbus","_setOptionsEventbus","pluginSupport","get","loaded","getEventbus","pluginEvents","eventEntry","proxyKeys","size","silent","state","removeEntry","errors","_this","success","remove","setEnabled","setEntryEnabled"],"mappings":"4wBAKO,MAAMA,EAAgB,MAoBtB,SAASC,EAAUC,EAAUC,EAAQC,EAAMC,EAAUC,OAE9CC,EAAPC,EAAI,KACJJ,GAAwB,iBAATA,EACnB,UAEOC,GAAuB,YAAaC,YAAQA,EAAKG,UAAsBH,EAAKG,QAAUJ,OACrFE,EAAQG,EAAWN,GAAOI,EAAID,EAAMI,OAAQH,IAE9CL,EAASF,EAAUC,EAAUC,EAAQI,EAAMC,GAAIJ,EAAKG,EAAMC,IAAKF,QAGhE,GAAIF,GAAQJ,EAAcY,KAAKR,OAG5BG,EAAQH,EAAKS,MAAMb,GAAgBQ,EAAID,EAAMI,OAAQH,IAEvDL,EAASD,EAASC,EAAQI,EAAMC,GAAIH,EAAUC,QAMjDH,EAASD,EAASC,EAAQC,EAAMC,EAAUC,UAEtCH,EAUH,SAASW,EAAaC,SAEpBX,EAAOW,EAASX,WACN,KAATA,MAAkBA,MAAW,GAUhC,MAAMM,EAAcM,GAEN,OAAXA,GAAqC,iBAAXA,EAAsB,GAAKC,OAAOC,KAAKF,GAiBpE,SAASG,EAAUC,EAAKhB,EAAMC,EAAUC,SAEtCe,EAAQf,EAAKe,MACbC,EAAQhB,EAAKgB,MAAQ,KAEvBjB,EACJ,OACSkB,EAAgBH,EAAIhB,GAAQoB,EAASF,GAAO,kBAExCjB,EAASoB,MAAMC,KAAMC,cAC5B,KAAQN,EAAMjB,EAAMmB,MAEvBA,EAAcK,UAAYvB,SAEtBe,EAoBV,MAAMI,EAAW,SAASF,EAAOO,EAAQR,OAElCS,SAEG,YAAYC,WAEVT,EAAQ,IAAKQ,EAASD,EAAOJ,MAAMC,KAAMK,IAE3CT,GAAS,IAEND,GAASA,EAAMI,MAAMC,KAAMK,GAC/BV,SACAQ,UAGIC,oCClIE,MAAME,EAuBlBC,YAAY7B,EAAO,qCAfX,4CAiBe,iBAATA,QAA2B,IAAI8B,UAAW,mCAExC9B,QAQR+B,uBAQAC,sBAQAC,oBAoBRR,OAAOP,EAAOlB,EAAMC,EAAUI,EAAkB6B,EAAU,QAElDC,OAAOC,UAAUlB,SAAgB,IAAIY,UAAW,mCAE/CO,EAAO,MACTf,KAAKgB,UAAUtC,EAAMqC,UAEtBE,QAAQC,kCAAkCC,EAAmBnB,wDACPoB,KAAKC,UAAUN,EAAKlC,UACnEmB,WAIJvB,EAAS0C,EAAgBA,EAAiB,GAAIzC,EAAMC,EAAU,CAAEiB,MAAAA,EAAOD,MAAOK,KAAKsB,IAAIC,KAAKvB,cAE9E,iBAATtB,SAAsBK,IAA2CJ,UAErEqB,KAAKwB,GAAG/C,EAAQE,EAAUI,EAAS6B,YAUpCa,eAEFA,KAAsBA,aAAiBC,cAAiB,IAAIlB,UAAW,gCAEtER,WAEDyB,OAEI,MAAM/C,OAAQsB,WAEZyB,EAAMvC,KAAKR,OAEP,MAAMiD,KAASC,UAAalD,QAExB,CAACA,EAAMiD,EAAMhD,SAAUgD,EAAM5C,QAASqC,KAAKS,MAAMT,KAAKC,UAAUM,EAAMf,oBAOhF,MAAMlC,OAAQsB,YAEX,MAAM2B,KAASC,UAAalD,QAExB,CAACA,EAAMiD,EAAMhD,SAAUgD,EAAM5C,QAASqC,KAAKS,MAAMT,KAAKC,UAAUM,EAAMf,qCAahFZ,QAEET,OAAOC,OAAKQ,SAAcf,OAFL,4BAYvBe,eAAuB,MAExBJ,EAAQ,MAEP,MAAMlB,OAAQsB,QAAgBJ,GAASgC,UAAalD,GAAMO,cAExDW,EAYVoB,UAAUtC,EAAMqC,EAAO,WAEpBA,EAAKlC,MAAQ,GACbkC,EAAKe,WAEUX,EAAgBY,EAAchB,EAAMrC,SAAc,CAAED,SAAQuB,UAE7D8B,cAUXL,eAECA,KAAsBA,aAAiBC,cAAiB,IAAIlB,UAAW,gCAEtER,WAEDyB,MAEI,MAAM/C,OAAQsB,QAEZyB,EAAMvC,KAAKR,WAENA,YAMP,MAAMA,OAAQsB,cAEVtB,sBAYLsB,QAmBVgC,SAASC,EAAKvD,EAAMC,OAEZsD,SAAcjC,WAEbe,EAAO,MACTmB,EAAuBD,EAAKvD,EAAMqC,UAEnCE,QAAQC,kCAAkCC,EAAmBnB,4EACaoB,KAAKC,UAAUN,EAAKlC,UACvFmB,WAGJmC,EAAKF,EAAIvB,YAAcuB,EAAIvB,UAAY0B,EAAY,MACnDC,EAAcrC,KAAKW,eAAiBX,KAAKW,aAAe,QAC1D2B,EAAYC,EAAaF,EAAYF,GAIpCG,SAEG5B,YAAcV,KAAKU,UAAY0B,EAAY,MAChDE,EAAYC,EAAaF,EAAYF,GAAM,IAAIK,EAAUxC,KAAMiC,UAI5DQ,EAAQC,EAAeT,EAAKvD,EAAMC,EAAUqB,SAClDuC,SAEIE,QAAeA,SAGfH,EAAUK,SAAWL,EAAUd,GAAG9C,EAAMC,GAErCqB,KAgBV4C,eAAehD,EAAOqC,EAAKvD,EAAMC,OAEzBkC,OAAOC,UAAUlB,SAAgB,IAAIY,UAAW,mCAG/C/B,EAAS0C,EAAgBA,EAAiB,GAAIzC,EAAMC,EAAU,CACjEiB,MAAAA,EACAD,MAAOK,KAAK6C,cAActB,KAAKvB,KAAMiC,YAGjCjC,KAAKgC,SAASC,EAAKxD,GAc7BqE,aAAab,EAAKvD,EAAMC,SAGfF,EAAS0C,EAAgBA,EAAiB,GAAIzC,EAAMC,EAAU,CACjEiB,MAAO,EACPD,MAAOK,KAAK6C,cAActB,KAAKvB,KAAMiC,YAGjCjC,KAAKgC,SAASC,EAAKxD,GAmC7B6C,IAAI5C,EAAMC,EAAmBI,YAErBiB,kBAEUmB,EAAgB4B,IAAW/C,QAActB,EAAMC,EAAU,CAAEI,QAAAA,EAASiE,UAAWhD,KAAKS,cAE5FT,MAJqBA,KA4C/BwB,GAAG9C,EAAMC,EAAUI,EAAkB6B,EAAU,OAE7B,MAAXA,GAAmBA,EAAQL,cAAgBhB,aAEtC,IAAIiB,UAAW,8CAGlBO,EAAO,UACTf,KAAKgB,UAAUtC,EAAMqC,IAEtBE,QAAQC,kCAAkCC,EAAmBnB,oDACXoB,KAAKC,UAAUN,EAAKlC,UAC/DmB,gBAGKmB,EAAgB8B,EAAUrB,WAAgB,GAAIlD,EAAMC,EAAU,CAC1EI,QAAAA,EACAmE,IAAKlD,KACLY,QAAAA,EACA0B,UAAWC,KAGVA,KAEiBvC,KAAKS,aAAeT,KAAKS,WAAa,KAC9C8B,EAAWJ,IAAMI,EAG3BA,EAAWI,YAGP3C,MAkBVmD,KAAKzE,EAAMC,EAAUI,EAAkB6B,EAAU,UAExCG,EAAO,MACTf,KAAKgB,UAAUtC,EAAMqC,UAEtBE,QAAQC,kCAAkCC,EAAmBnB,sDACToB,KAAKC,UAAUN,EAAKlC,UACjEmB,WAIJvB,EAAS0C,EAAgBA,EAAiB,GAAIzC,EAAMC,EAAU,CAAEiB,MAAO,EAAGD,MAAOK,KAAKsB,IAAIC,KAAKvB,cAEjF,iBAATtB,SAAsBK,IAA2CJ,UAErEqB,KAAKwB,GAAG/C,EAAQE,EAAUI,EAAS6B,GAqB7CiC,cAAcZ,EAAKvD,EAAeC,SAEzB0D,EAAcrC,KAAKW,iBACpB0B,SAAsBrC,WAErBoD,EAAMnB,EAAM,CAACA,EAAIvB,WAAaS,EAAiBkB,OAEhD,IAAIvD,EAAI,EAAGA,EAAIsE,EAAInE,OAAQH,IAChC,OACSwD,EAAYD,EAAYe,EAAItE,QAG7BwD,QAELA,EAAUL,IAAIX,IAAI5C,EAAMC,EAAUqB,MAE9BsC,EAAUK,SAAWL,EAAUhB,IAAI5C,EAAMC,UAGzCqB,KAaVqD,QAAQ3E,KAAS2B,YAETL,SAELsD,EAAqBC,EAAeC,IAAkBxD,QAActB,SAAc2B,GAE3EL,MAJqBA,wBAkBZtB,KAAS2B,SAEpBL,qBAECI,EAASkD,EAAqBC,EAAeE,IAAwBzD,QAActB,SAAc2B,mBAGnGD,EAGCsD,MAAMC,QAAQvD,GAIZwD,QAAQC,IAAIzD,GAAQ0D,MAAMC,QAE1BC,EAAa,OAEZ,MAAMC,KAAWF,EAEfL,MAAMC,QAAQM,GAEfD,EAAaA,EAAWE,OAAOD,YAEzBA,GAEND,EAAWG,KAAKF,UAIfD,EAAW/E,OAAS,EAAI+E,EAAmC,IAAtBA,EAAW/E,OAAe+E,EAAW,aApB/C5D,SAiCxCgE,aAAa1F,KAAS2B,UAEnBgE,YAAW,UAAahB,QAAQ3E,KAAS2B,KAAU,GAE5CL,KAaVsE,YAAY5F,KAAS2B,QAEbL,eAEEsD,EAAqBC,EAAegB,IAAuBvE,QAActB,SAAc2B,IAWpG,IAAIkC,0FAKJ,MAAMC,EAkCHjC,YAAYiE,EAAUvC,oOAFb,aAIKuC,EAAS9D,oBACH8D,YACLvC,gBAKfwC,iBAEU7C,UAAejB,aAAaiB,UAAUlB,aACxCV,gBAAwB4B,UAAUnB,aAAWT,2BAGnCA,+BAEKA,2BAEJA,QAEnB0E,wCAaAlD,GAAG9C,EAAMC,EAAUI,mBAEDoC,EAAgB8B,EAAUrB,WAAgB,GAAIlD,EAAMC,EACnE,CACGI,QAAAA,EACAmE,IAAKlD,KACLY,QAAS,GACT0B,UAAWtC,QAGPA,KAWVsB,IAAI5C,EAAMC,OAEH8F,IAEAzE,kBAEcmB,EAAgB4B,IAAW/C,QAActB,EAAMC,EAAU,CACrEI,eACAiE,oBAEHyB,KAAWzE,iCAKXyE,EAA0B,IAAhB7C,WAGT6C,QAAgBA,sBAQXE,MAGY,kBAAVA,QAA6B,IAAInE,UAAW,qCACvCmE,IAkBtB,MAAM5C,EAAe,CAAC6C,EAAQlG,EAAMC,EAAUC,WAErCH,EAASG,EAAKH,UAEhBA,EACJ,OACSoG,EAAWpG,EAAOC,MAEpBgF,MAAMC,QAAQkB,OAEV,MAAMC,KAAWD,KAEfC,EAAQlE,QAAQmE,aAEhBH,EAAO/F,MAAMsF,KAAKzF,GAClBkG,EAAO9C,WACA8C,SAMbA,GAgBJ7B,EAAY,CAACtE,EAAQC,EAAMC,EAAUC,SAGnCH,eAECM,EAAUH,EAAKG,QAASiE,EAAYpE,EAAKoE,cACpCnE,EAAPC,EAAI,KAGHJ,GAASK,GAAYJ,OAS1BE,EAAQH,EAAO,CAACA,GAAQyC,EAAiB1C,GAElCK,EAAID,EAAMI,OAAQH,IACzB,OAES+F,EAAWpG,EADjBC,EAAOG,EAAMC,QAIR+F,cAGCG,EAAY,OACb,IAAIC,EAAI,EAAGA,EAAIJ,EAAS5F,OAAQgG,IACrC,OACSH,EAAUD,EAASI,MACrBtG,GAAYA,IAAamG,EAAQnG,UAAYA,IAAamG,EAAQnG,SAASuB,WAC9EnB,GAAWA,IAAY+F,EAAQ/F,QAE7BiG,EAAUb,KAAKW,OAGlB,OACSxC,EAAYwC,EAAQxC,UACtBA,GAAaA,EAAUhB,IAAI5C,EAAMC,IAKvCqG,EAAU/F,OAEXR,EAAOC,GAAQsG,SAIRvG,EAAOC,UAIbD,MA7CCI,EAAQsC,EAAiB6B,GAAYlE,EAAID,EAAMI,OAAQH,IAEzDkE,EAAUnE,EAAMC,IAAI2F,WA2DvBxB,EAAW,CAACxE,EAAQC,EAAMC,EAAUC,QAEnCD,EACJ,OACSkG,EAAWpG,EAAOC,KAAUD,EAAOC,GAAQ,IAC3CK,EAAUH,EAAKG,QAASmE,EAAMtE,EAAKsE,IAAKZ,EAAY1D,EAAK0D,UAGzD1B,EAAUQ,KAAKS,MAAMT,KAAKC,UAAUzC,EAAKgC,UAG/CA,EAAQmE,eAAQnE,EAAQmE,OAA6C,kBAAlBnE,EAAQmE,OAAsBnE,EAAQmE,MAErFzC,GAAaA,EAAUoC,iBAE3BG,EAASV,KAAK,CAAExF,SAAAA,EAAUI,QAAAA,EAASmE,IAAKnE,GAAWmE,EAAKtC,QAAAA,EAAS0B,UAAAA,WAE7D7D,GAqBJ6E,EAAuB,CAAC9E,EAAU0G,EAAgBzG,EAAQC,EAAMC,EAAUC,SAEzEmF,EACOlF,EAAPC,EAAI,KAIJJ,GAAQyC,EAAoBjC,KAAKR,OAG7BG,EAAQH,EAAKS,MAAMgC,GAAsBrC,EAAID,EAAMI,OAAQH,IAChE,OACSsB,EAAS5B,EAAS0G,EAAgBzG,EAAQI,EAAMC,GAAIH,EAAUC,GAG9DuG,EAAczB,MAAMC,QAAQI,GAAW,WAAIA,EAAqB,EAAI,KAGtEL,MAAMC,QAAQvD,UAEP+E,QAEA,EAEFpB,EAAU3D,aAER,EAEF2D,EAAU,CAACA,GAASG,OAAO9D,cAEzB,EAEF2D,EAAUA,EAAQG,OAAO9D,QAI7B,YAAIA,SAEE+E,QAEA,EAEFpB,EAAU3D,aAER,SAEIgF,EAAW,CAACrB,GAClBqB,EAASjB,KAAK/D,GACd2D,EAAUqB,aAGR,EAEFrB,EAAQI,KAAK/D,SASzB2D,EAAUvF,EAAS0G,EAAgBzG,EAAQC,EAAMC,EAAUC,UAGvDmF,GAkBJR,EAAgB,CAAC2B,EAAgBG,EAAW3G,EAAMC,EAAU0B,SAE3DD,KAEAiF,EACJ,OACS5G,EAAS4G,EAAU3G,OACrB4G,EAAYD,EAAUxB,IACtBpF,GAAU6G,IAAaA,EAAYA,EAAUC,SAC7C9G,IAAU2B,EAAS8E,EAAezG,EAAQ4B,IAC1CiF,IAAalF,EAAS8E,EAAeI,EAAW,CAAC5G,GAAMwF,OAAO7D,YAG9DD,GAWJoD,EAAmB,CAAC/E,EAAQ4B,SAE3BmF,EAAI1G,GAAK,QACP2G,EAAKpF,EAAK,GAAIqF,EAAKrF,EAAK,GAAIsF,EAAKtF,EAAK,GAAIuF,EAAInH,EAAOQ,cAEnDoB,EAAKpB,aAEL,SACOH,EAAI8G,IAAMJ,EAAK/G,EAAOK,IAAIH,SAASkH,KAAKL,EAAGtC,iBAElD,SACOpE,EAAI8G,IAAMJ,EAAK/G,EAAOK,IAAIH,SAASkH,KAAKL,EAAGtC,IAAKuC,eAEvD,SACO3G,EAAI8G,IAAMJ,EAAK/G,EAAOK,IAAIH,SAASkH,KAAKL,EAAGtC,IAAKuC,EAAIC,eAE3D,SACO5G,EAAI8G,IAAMJ,EAAK/G,EAAOK,IAAIH,SAASkH,KAAKL,EAAGtC,IAAKuC,EAAIC,EAAIC,yBAGxD7G,EAAI8G,IAAMJ,EAAK/G,EAAOK,IAAIH,SAASoB,MAAMyF,EAAGtC,IAAK7C,YAkB7DoD,EAAyBqC,MAAOrH,EAAQ4B,SAEvCmF,EAAI1G,GAAK,QACP2G,EAAKpF,EAAK,GAAIqF,EAAKrF,EAAK,GAAIsF,EAAKtF,EAAK,GAAIuF,EAAInH,EAAOQ,OAErD8E,EAAU,UAER1D,EAAKpB,aAEL,SACOH,EAAI8G,GACb,OACSxF,GAAUoF,EAAK/G,EAAOK,IAAIH,SAASkH,KAAKL,EAAGtC,cAG7C9C,GAAqB2D,EAAQI,KAAK/D,cAIvC,SACOtB,EAAI8G,GACb,OACSxF,GAAUoF,EAAK/G,EAAOK,IAAIH,SAASkH,KAAKL,EAAGtC,IAAKuC,YAGlDrF,GAAqB2D,EAAQI,KAAK/D,cAIvC,SACOtB,EAAI8G,GACb,OACSxF,GAAUoF,EAAK/G,EAAOK,IAAIH,SAASkH,KAAKL,EAAGtC,IAAKuC,EAAIC,YAGtDtF,GAAqB2D,EAAQI,KAAK/D,cAIvC,SACOtB,EAAI8G,GACb,OACSxF,GAAUoF,EAAK/G,EAAOK,IAAIH,SAASkH,KAAKL,EAAGtC,IAAKuC,EAAIC,EAAIC,YAG1DvF,GAAqB2D,EAAQI,KAAK/D,wBAKhCtB,EAAI8G,GACb,OACSxF,GAAUoF,EAAK/G,EAAOK,IAAIH,SAASoB,MAAMyF,EAAGtC,IAAK7C,YAGnDD,GAAqB2D,EAAQI,KAAK/D,WAMxC2D,EAAQ9E,OAAS,EAAI2E,QAAQC,IAAIE,GAASD,MAAMiC,UAE9CC,EAAWD,EAAOE,QAAQC,YAAUA,WAClCF,EAAS/G,aAET,cACA,SAAU+G,EAAS,kBACRA,MAEE,IAAnBjC,EAAQ9E,OAAe8E,EAAQ,WAcjCQ,EAAwB,CAAC9F,EAAQ4B,SAEhCmF,EAAI1G,GAAK,QACP2G,EAAKpF,EAAK,GAAIqF,EAAKrF,EAAK,GAAIsF,EAAKtF,EAAK,GAAIuF,EAAInH,EAAOQ,OAErD8E,EAAU,UAER1D,EAAKpB,aAEL,SACOH,EAAI8G,GACb,OACSxF,GAAUoF,EAAK/G,EAAOK,IAAIH,SAASkH,KAAKL,EAAGtC,cAG7C9C,GAAqB2D,EAAQI,KAAK/D,cAGvC,SACOtB,EAAI8G,GACb,OACSxF,GAAUoF,EAAK/G,EAAOK,IAAIH,SAASkH,KAAKL,EAAGtC,IAAKuC,YAGlDrF,GAAqB2D,EAAQI,KAAK/D,cAGvC,SACOtB,EAAI8G,GACb,OACSxF,GAAUoF,EAAK/G,EAAOK,IAAIH,SAASkH,KAAKL,EAAGtC,IAAKuC,EAAIC,YAGtDtF,GAAqB2D,EAAQI,KAAK/D,cAGvC,SACOtB,EAAI8G,GACb,OACSxF,GAAUoF,EAAK/G,EAAOK,IAAIH,SAASkH,KAAKL,EAAGtC,IAAKuC,EAAIC,EAAIC,YAG1DvF,GAAqB2D,EAAQI,KAAK/D,wBAIhCtB,EAAI8G,GACb,OACSxF,GAAUoF,EAAK/G,EAAOK,IAAIH,SAASoB,MAAMyF,EAAGtC,IAAK7C,YAGnDD,GAAqB2D,EAAQI,KAAK/D,WAMxC2D,EAAQ9E,OAAS,EAAI8E,EAA6B,IAAnBA,EAAQ9E,OAAe8E,EAAQ,WAelE7B,EAAyB,CAACD,EAAKvD,EAAMqC,EAAO,UAE3Ce,eAIK1B,EAAS6B,EAAIjB,UAAUtC,EAAMqC,qBACxBX,IAAwB0B,EAAU1B,GAEhD,MAAO+F,GAEJrE,KACAf,EAAKlC,MAAQ,GACbkC,EAAKe,kBAGDA,GAiBJY,EAAiB,CAACT,EAAKvD,EAAMC,EAAUI,SAIvCkD,EAAIT,GAAG9C,EAAMC,EAAUI,GAE1B,MAAOoH,UAEGA,IASb,IAAIC,EAAY,EAShB,MAAMhE,EAAc,CAACiE,EAAS,YAErBlE,EAAM,MAAIiE,SACTC,KAAYA,IAASlE,IAA4BA,mCCnuC5C,MAAMmE,EAuBlB/F,YAAYlB,0FAEQA,GAEjBE,OAAOgH,KAAKvG,MAoBfG,OAAOP,EAAOlB,EAAMC,EAAUI,EAAkB6B,EAAU,OAEnDZ,KAAKwG,kBAAqB,IAAIC,eAAe,uDAC5C5F,OAAOC,UAAUlB,SAAgB,IAAIY,UAAW,mCAE/CO,EAAO,MACTa,UAAeZ,UAAUtC,EAAMqC,UAEhCE,QAAQC,kCAAkCC,EAAmBnB,wDACPoB,KAAKC,UAAUN,EAAKlC,UACnEmB,WAIJvB,EAAS0C,EAAgBA,EAAiB,GAAIzC,EAAMC,EAAU,CAAEiB,MAAAA,EAAOD,MAAOK,KAAKsB,IAAIC,KAAKvB,cAE9E,iBAATtB,SAAsBK,IAA2CJ,UAErEqB,KAAKwB,GAAG/C,EAAQE,EAAUI,EAAS6B,GAO7C8F,iBAEO9E,gBAEIN,gCAKS,eAWXG,MAEFzB,KAAKwG,kBAAqB,IAAIC,eAAe,uDAE5C,MAAMP,KAAStE,UAAe+E,QAAQlF,SAElCyE,sBAWLlG,KAAKwG,kBAAqB,IAAIC,eAAe,0DAE1C7E,UAAegF,kCAUlB5G,KAAKwG,kBAAqB,IAAIC,eAAe,0DAE1C7E,UAAeiF,oBAUnBpF,MAECzB,KAAKwG,kBAAqB,IAAIC,eAAe,uDAE5C,MAAMP,KAAStE,UAAepC,KAAKiC,SAE/ByE,2BAWiB,OAAnBtE,wBAUH5B,KAAKwG,kBAAqB,IAAIC,eAAe,kEAEjC7E,UAAelD,gCAU3BsB,KAAKwG,kBAAqB,IAAIC,eAAe,4DAE5CzG,QAEET,OAAOC,OAAKQ,SAAcf,OAFL,8BAYxBe,KAAKwG,kBAAqB,IAAIC,eAAe,yDAE5CzG,eAAuB,MAExBJ,EAAQ,MAEP,MAAMlB,OAAQsB,QAAgBJ,GAASgC,UAAalD,GAAMO,cAExDW,EAYVoB,UAAUtC,EAAMqC,EAAO,OAEhBf,KAAKwG,kBAAqB,IAAIC,eAAe,0DAE1C7E,UAAeZ,UAAUtC,EAAMqC,GAgBzCO,IAAI5C,EAAeC,EAAmBI,MAE/BiB,KAAKwG,kBAAqB,IAAIC,eAAe,mEAElCtF,EAAgB4B,EAAWnB,WAAgB,GAAIlD,EAAMC,EAAU,CAC3EI,QAASA,EACTM,WAAUW,WAGNA,KAoBVwB,GAAG9C,EAAMC,EAAUI,EAAkB6B,EAAU,OAExCZ,KAAKwG,kBAAqB,IAAIC,eAAe,sDAElC,MAAX7F,GAAmBA,EAAQL,cAAgBhB,aAEtC,IAAIiB,UAAW,8CAGlBO,EAAO,MACTa,UAAeZ,UAAUtC,EAAMqC,UAEhCE,QAAQC,kCAAkCC,EAAmBnB,oDACXoB,KAAKC,UAAUN,EAAKlC,UAC/DmB,WAIJpB,EAAO,CAAEG,QAAAA,EAASmE,IAAKlD,KAAMY,QAAAA,mBAEpBO,EAAgB8B,EAAUrB,WAAgB,GAAIlD,EAAMC,EAAUC,cAE9D4C,GAAG9C,EAAMC,EAAUC,EAAKsE,IAAKtC,GAErCZ,KAkBVmD,KAAKzE,EAAMC,EAAUI,EAAkB6B,EAAU,OAE1CZ,KAAKwG,kBAAqB,IAAIC,eAAe,yDAE3C1F,EAAO,MACTa,UAAeZ,UAAUtC,EAAMqC,UAEhCE,QAAQC,kCAAkCC,EAAmBnB,sDACToB,KAAKC,UAAUN,EAAKlC,UACjEmB,WAIJvB,EAAS0C,EAAgBA,EAAiB,GAAIzC,EAAMC,EAAU,CAAEiB,MAAO,EAAGD,MAAOK,KAAKsB,IAAIC,KAAKvB,cAEjF,iBAATtB,SAAsBK,IAA2CJ,UAErEqB,KAAKwB,GAAG/C,EAAQE,EAAUI,EAAS6B,iBAW/Ba,MAEPzB,KAAKwG,kBAAqB,IAAIC,eAAe,+DAC7ChF,KAAsBA,aAAiBC,cAAiB,IAAIlB,UAAW,gCAEtER,WAEDyB,OAEI,MAAM/C,OAAQsB,WAEZyB,EAAMvC,KAAKR,OAEP,MAAMiD,KAASC,UAAalD,QAExB,CAACA,EAAMiD,EAAMhD,SAAUgD,EAAM5C,QAASqC,KAAKS,MAAMT,KAAKC,UAAUM,EAAMf,oBAOhF,MAAMlC,OAAQsB,YAEX,MAAM2B,KAASC,UAAalD,QAExB,CAACA,EAAMiD,EAAMhD,SAAUgD,EAAM5C,QAASqC,KAAKS,MAAMT,KAAKC,UAAUM,EAAMf,sBAa7Ea,MAEJzB,KAAKwG,kBAAqB,IAAIC,eAAe,+DAC7ChF,KAAsBA,aAAiBC,cAAiB,IAAIlB,UAAW,gCAEtER,WAEDyB,MAEI,MAAM/C,OAAQsB,QAEZyB,EAAMvC,KAAKR,WAENA,YAMP,MAAMA,OAAQsB,cAEVtB,EAef2E,QAAQ3E,KAAS2B,MAEVL,KAAKwG,kBAAqB,IAAIC,eAAe,oEAElCpD,QAAQ3E,KAAS2B,GAEzBL,KAcV8G,aAAapI,KAAS2B,MAEfL,KAAKwG,kBAAqB,IAAIC,eAAe,0DAE1C7E,UAAekF,aAAapI,KAAS2B,GAY/C+D,aAAa1F,KAAS2B,MAEfL,KAAKwG,kBAAqB,IAAIC,eAAe,oEAElCrC,aAAa1F,KAAS2B,GAE9BL,KAaVsE,YAAY5F,KAAS2B,MAEdL,KAAKwG,kBAAqB,IAAIC,eAAe,0DAE1C7E,UAAe0C,YAAY5F,KAAS2B,IAkBjD,MAAM0C,EAAY,CAACtE,EAAQC,EAAMC,EAAUC,SAGnCH,eAECM,EAAUH,EAAKG,QACfM,EAAWT,EAAKS,SAEhBR,EAAQH,EAAO,CAACA,GAAQyC,EAAiB1C,OAE1C,IAAIK,EAAI,EAAGA,EAAID,EAAMI,OAAQH,IAClC,OAES+F,EAAWpG,EADjBC,EAAOG,EAAMC,QAIR+F,cAGCG,EAAY,OACb,IAAIC,EAAI,EAAGA,EAAIJ,EAAS5F,OAAQgG,IACrC,OACSH,EAAUD,EAASI,IAErBtG,GAAYA,IAAamG,EAAQnG,UAAYA,IAAamG,EAAQnG,SAASuB,WAC9EnB,GAAWA,IAAY+F,EAAQ/F,UAE7BiG,EAAUb,KAAKW,GAKjBE,EAAU/F,OAEXR,EAAOC,GAAQsG,GAIf3F,EAASiC,IAAI5C,EAAMC,EAAUI,UACtBN,EAAOC,WAIbD,GAgBJwE,EAAW,CAACxE,EAAQC,EAAMC,EAAUC,QAEnCD,EACJ,OACSkG,EAAWpG,EAAOC,KAAUD,EAAOC,GAAQ,IAC3CK,EAAUH,EAAKG,QAASmE,EAAMtE,EAAKsE,IAGnCtC,EAAUQ,KAAKS,MAAMT,KAAKC,UAAUzC,EAAKgC,UAG/CA,EAAQmE,eAAQnE,EAAQmE,OAA6C,kBAAlBnE,EAAQmE,OAAsBnE,EAAQmE,MAGzFnG,EAAKsE,IAAMnE,GAAWmE,EAEtB2B,EAASV,KAAK,CAAExF,SAAAA,EAAUI,QAAAA,EAASmE,IAAKtE,EAAKsE,IAAKtC,QAAAA,WAG9CnC,mCCpjBK,MAAMsI,gHA+BA1H,EAAUX,eAErBA,GAAmC,iBAATA,QAA2B,IAAI8B,UAAW,iCAElEwG,EAAiB,IAAID,WAC3BC,IAA2B3H,KAC3B2H,aAAuBtI,EAAkBW,EAASX,KAAOA,GACzDa,OAAOgH,KAAKS,GAEL,CACJN,QAAS,WAEDM,EAAeR,gBAEjBQ,IAA2B,MAEvBhH,YAAagH,yBAIvBC,YAAa,SAAS5H,EAAUX,eAEzBA,GAAmC,iBAATA,QAA2B,IAAI8B,UAAW,2BAEnEwG,EAAeR,uBAGb9H,GAAmBkD,EAAAoF,OAAyBpF,EAAAoF,KAAyBtI,OAEtEsI,IAAuB3H,EAASX,eAE1BA,KAENsI,IAAuBtI,KAG1BsI,IAA2B3H,KAIjC2H,eAAAA,SAWAvF,MAECzB,KAAKwG,kBAAqB,IAAIC,eAAe,wDAE5C,MAAMP,KAAStE,UAAepC,KAAKiC,SAE/ByE,2BAWiB,OAAnBtE,wBAUH5B,KAAKwG,kBAAqB,IAAIC,eAAe,6DAE1CzG,QAaVqD,QAAQ3E,KAAS2B,MAEVL,KAAKwG,kBAAqB,IAAIC,eAAe,qEAElCpD,QAAQ3E,KAAS2B,GAEzBL,KAcV8G,aAAapI,KAAS2B,MAEfL,KAAKwG,kBAAqB,IAAIC,eAAe,2DAE1C7E,UAAekF,aAAapI,KAAS2B,GAY/C+D,aAAa1F,KAAS2B,MAEfL,KAAKwG,kBAAqB,IAAIC,eAAe,qEAElCrC,aAAa1F,KAAS2B,GAE9BL,KAaVsE,YAAY5F,KAAS2B,MAEdL,KAAKwG,kBAAqB,IAAIC,eAAe,2DAE1C7E,UAAe0C,YAAY5F,KAAS2B,UCvLpChB,EAAW,IAAIiB,EAAS,gBAOxB4G,EAAiB,IAAI5G,EAAS,kBAO9B6G,EAAe,IAAI7G,EAAS,gBCrBnC8G,EAAc,iICFL,MAAMC,GAsElB9G,YAAY7B,EAAMqC,EAAMuG,EAAUC,6RAElBxG,aAEG,YAEHrC,YAEI4I,YAEKC,uBAQLvH,+BAOGA,kCAOGA,QAK1BwH,0BAIqB,iBACI,UAGZ5F,UAAe6F,UAEzB,MAAOtB,iBAQEuB,eAEOA,GAGZA,WAE2B,IAAxB9F,WAAkC8B,MAAMC,UAAQ3D,SACpD,KACQ,MAAM2B,OAAS3B,kBAEGwB,MAAMG,iBAGd,cAKU,IAAxBC,qBAEc8B,MAAMiE,KAAK/F,UAAoBgG,2BAC1BtG,oCAUAtB,gCAOLA,4BAOJA,0BAQFuH,YAAuCA,kBAO1CM,YAAiCA,gBAOnCP,YAA6BA,ICnKtC,SAASQ,GAAW/G,EAAMgH,EAAiB,OAG3B,iBAAThH,QAA2B,IAAIP,UAAW,kCAGhDkD,MAAMC,QAAQoE,SAAyB,IAAIvH,UAAW,8CAEpDwH,GAAYjH,EAAMgH,GAgDrB,SAASE,GAAW3I,UAEpBA,MAAAA,GAA0D,iBAAXA,GAET,mBAA5BA,EAAO4I,OAAOC,UAwBxB,SAASC,GAAS9I,UAEJ,OAAXA,GAAqC,iBAAXA,EAojBpC,SAAS0I,GAAYjH,EAAMgH,MAEpBrE,MAAMC,QAAQ5C,OAEV,IAAIsH,EAAO,EAAGA,EAAOtH,EAAK9B,OAAQoJ,IAAUL,GAAYjH,EAAKsH,GAAON,QAEvE,GAAoB,iBAAThH,MAER,MAAMuH,KAAOvH,EAGXA,EAAKwH,eAAeD,KAASP,EAAeS,SAASF,IAAQN,GAAYjH,EAAKuH,GAAMP,UAIvFxI,OAAOkJ,OAAO1H,GCjrBT,MAAM2H,GASlBnI,YAAYoI,EAAY,GAAIC,EAAgB,SAQpC7H,KAAOxB,OAAOsJ,OAAOzH,KAAKS,MAAMT,KAAKC,UAAUsH,IAAaC,QAO5DvJ,cAAW,OAOXyJ,gBAAa,OAObC,mBAAgB,GClBZjD,eAAekD,IAAiBC,OAAEA,EAAFC,QAAUA,EAAVP,UAAmBA,EAAY,GAA/BC,cAAmCA,EAAgB,GAAnDO,QAAuDA,EAAvDvI,QAC9CA,EAD8CwI,WAC5BA,GAAa,OAEP,iBAAXH,QAA6B,IAAIzI,UAAW,gCAC1B,iBAAlBoI,QAAoC,IAAIpI,UAAW,wCACrC,iBAAdmI,QAAgC,IAAInI,UAAW,yCAE1C,IAAZI,IAAsBA,EAAUsI,EAAQG,mBAC5B,IAAZF,IAAsBA,EAAUD,EAAQI,oBAErB,iBAAZH,IAAyBlB,GAAWkB,SAEtC,IAAI3I,UAAW,8CAIpB+I,EAAoB,QAClBC,EAAoB,OAGtBC,GAAY,EACZC,GAAY,QAGVlE,EAAK,IAAIkD,GAAkBC,EAAWC,GAEtC7E,EAAU,MAEO,iBAAZoF,EACX,OACSjD,EAAQgD,EAAQS,eAAeR,WAEvB,IAAVjD,GAAoBA,EAAMwB,SAAWxB,EAAMoB,WAE5CoC,GAAY,EAE0B,mBAA3BxD,EAAMoB,SAAS2B,IAC1B,CACGzD,EAAGnG,SAAW6G,EAAMqB,cACpB/B,EAAGsD,WAAa5C,EAAMxH,KACtB8G,EAAGuD,cAAgB7C,EAAMnF,KAAK6I,OAAOhJ,cAE/BR,EAAS8F,EAAMoB,SAAS2B,GAAQzD,GAElC,MAAOpF,GAA6C2D,EAAQI,KAAK/D,GAErEqJ,GAAY,EACZF,IACAC,EAAkBrF,KAAK+B,EAAMxH,gBAM9B,MAAMA,KAAQyK,EACnB,OACSjD,EAAQgD,EAAQS,eAAejL,WAEvB,IAAVwH,GAAoBA,EAAMwB,SAAWxB,EAAMoB,WAE5CoC,GAAY,EAE0B,mBAA3BxD,EAAMoB,SAAS2B,IAC1B,CACGzD,EAAGnG,SAAW6G,EAAMqB,cACpB/B,EAAGsD,WAAa5C,EAAMxH,KACtB8G,EAAGuD,cAAgB7C,EAAMnF,KAAK6I,OAAOhJ,cAE/BR,EAAS8F,EAAMoB,SAAS2B,GAAQzD,GAElC,MAAOpF,GAA6C2D,EAAQI,KAAK/D,GAErEqJ,GAAY,EACZF,IACAC,EAAkBrF,KAAK+B,EAAMxH,UAMrC0K,GAAcxI,EAAQiJ,gBAAkBH,QAEnC,IAAII,MAAO,uDAGhBV,GAAcxI,EAAQmJ,gBAAkBN,QAEnC,IAAIK,MAAO,mCAAkCb,cAItDzD,EAAGzE,KAAKiJ,sBAAwBT,EAChC/D,EAAGzE,KAAKkJ,sBAAwBT,QAE1B5F,QAAQC,IAAIE,GAEXyB,EAAGzE,KC7Hb,MAAMmJ,GAA0B,sBAC1BC,GAAyB,QACzBC,GAAqB,mBAYZ,SAASC,GAAaC,OAE9BC,EAAgBD,SAEhBA,aAAkBE,IAEnBD,EAAgBD,EAAOG,SAEjBH,EAAOI,MAAMN,MAEnBG,EAAgB,IAAIC,IAAIF,GAAQG,UAGnCF,EAAgBA,EAAcI,QAAQT,GAAyB,IAC/DK,EAAgBA,EAAcI,QAAQR,GAAwB,QAEvDI,ECvBK,SAASK,GAAcC,SAEP,iBAAjBA,GAEsB,iBAAtBA,EAAanM,YAEW,IAAxBmM,EAAaP,QAAyD,iBAAxBO,EAAaP,QACnEO,EAAaP,kBAAkBE,YAKE,IAAzBK,EAAajK,SAA2D,iBAAzBiK,EAAajK,SCZ3D,YAASkK,SAGc,mBAAxBA,EAAOC,aAERD,EAGDA,EAAOE,QAENF,EAAOE,QAKPF,8HCyBE,MAAMG,GAYlB1K,YAAY2K,kCAPK,iBASQA,4BAUS,OAAxBtJ,YAAgCA,WAAoB4E,6BAWvDxG,KAAKwG,kBAAqB,IAAIC,eAAe,0DAE1C7E,WAAoByH,oCAWvBrJ,KAAKwG,kBAAqB,IAAIC,eAAe,4DAE1CzG,wBAYIX,SAAEA,EAAF8L,aAAYA,IAEnB9L,MAAAA,IAEDA,EAASiC,IAAK,GAAE6J,iBAA6BnL,KAAKoL,YAAapL,MAC/DX,EAASiC,IAAK,GAAE6J,uBAAmCnL,KAAKgJ,iBAAkBhJ,MAC1EX,EAASiC,IAAK,GAAE6J,qBAAiCnL,KAAKqL,eAAgBrL,MACtEX,EAASiC,IAAK,GAAE6J,eAA2BnL,KAAKyJ,UAAWzJ,MAC3DX,EAASiC,IAAK,GAAE6J,WAAuBnL,KAAKsL,OAAQtL,MACpDX,EAASiC,IAAK,GAAE6J,gBAA4BnL,KAAKuL,WAAYvL,MAC7DX,EAASiC,IAAK,GAAE6J,sBAAkCnL,KAAKwL,gBAAiBxL,iBAGrD,MAgBzBqL,gBAAe3D,QAAEA,EAAFyB,QAAoBA,EAAU,IAAO,OAE7CnJ,KAAKwG,kBAAqB,IAAIC,eAAe,2DAEjC,IAAZiB,GAAyC,kBAAZA,QAExB,IAAIlH,UAAW,kCAGD,iBAAZ2I,IAAyBlB,GAAWkB,SAEtC,IAAI3I,UAAW,0CAID,iBAAZ2I,IAERA,EAAU,CAACA,UAGRsC,OAA8B,IAAZ/D,EAElB3D,EAAU,OAEZnE,EAAQ,MAEP,MAAMlB,KAAQyK,EACnB,OACSjD,EAAQlG,KAAKkL,cAAcvB,eAAejL,WAElC,IAAVwH,GAAoBA,EAAMoB,WAAamE,GAAmBvF,EAAMwB,UAAYA,OAExE,MAAMhJ,KAAQgN,GAAyBxF,EAAMoB,UAGX,mBAAzBpB,EAAMoB,SAAS5I,IAAiC,gBAATA,IAA0BqF,EAAQrF,IAAQ,GAIlGkB,OAIW,IAAVA,MAEI,MAAMsG,KAASlG,KAAKkL,cAAcS,wBAEhCzF,EAAMoB,WAAamE,GAAmBvF,EAAMwB,UAAYA,OAEpD,MAAMhJ,KAAQgN,GAAyBxF,EAAMoB,UAGX,mBAAzBpB,EAAMoB,SAAS5I,IAAiC,gBAATA,IAA0BqF,EAAQrF,IAAQ,UAMjGa,OAAOC,KAAKuE,GAAS6H,OAe/BnC,WAAUR,OAAEA,EAAFE,QAAUA,EAAU,QAEvBnJ,KAAKwG,kBAAqB,IAAIC,eAAe,sDAE3B,iBAAXwC,QAEF,IAAIzI,UAAW,gCAGD,iBAAZ2I,IAAyBlB,GAAWkB,SAEtC,IAAI3I,UAAW,6CAID,iBAAZ2I,EACX,OACSjD,EAAQlG,KAAKkL,cAAcvB,eAAeR,eAC/B,IAAVjD,GAAsD,mBAA3BA,EAAMoB,SAAS2B,OAGhDrJ,EAAQ,MAEP,MAAMlB,KAAQyK,EACnB,OACSjD,EAAQlG,KAAKkL,cAAcvB,eAAejL,WAElC,IAAVwH,GAAsD,mBAA3BA,EAAMoB,SAAS2B,UAAiC,EAE/ErJ,OAIW,IAAVA,MAEI,MAAMsG,KAASlG,KAAKkL,cAAcS,wBAEE,mBAA3BzF,EAAMoB,SAAS2B,UAAiC,SAI1D,EAcVqC,QAAOrC,OAAEA,EAAF5I,KAAUA,EAAV8I,QAAyBA,OAEzBnJ,KAAKwG,kBAAqB,IAAIC,eAAe,sDAE3B,iBAAXwC,QAA6B,IAAIzI,UAAW,qCAE1C,IAATH,IAAoBqD,MAAMC,QAAQtD,SAAe,IAAIG,UAAW,mCAEpD,IAAZ2I,IAAsBA,EAAUnJ,KAAKkL,cAAc5B,oBAEhC,iBAAZH,IAAyBlB,GAAWkB,SAEtC,IAAI3I,UAAW,8CAIpBiJ,GAAY,EACZC,GAAY,QAEVmC,EAAcnI,MAAMC,QAAQtD,MAEX,iBAAZ8I,EACX,OACSjD,EAAQlG,KAAKkL,cAAcvB,eAAeR,QAElC,IAAVjD,GAAoBA,EAAMwB,SAAWxB,EAAMoB,WAE5CoC,GAAY,EAE0B,mBAA3BxD,EAAMoB,SAAS2B,KAEvB4C,EAAc3F,EAAMoB,SAAS2B,MAAW5I,GAAQ6F,EAAMoB,SAAS2B,KAE/DQ,GAAY,aAMb,MAAM/K,KAAQyK,EACnB,OACSjD,EAAQlG,KAAKkL,cAAcvB,eAAejL,QAElC,IAAVwH,GAAoBA,EAAMwB,SAAWxB,EAAMoB,WAE5CoC,GAAY,EAE0B,mBAA3BxD,EAAMoB,SAAS2B,KAEvB4C,EAAc3F,EAAMoB,SAAS2B,MAAW5I,GAAQ6F,EAAMoB,SAAS2B,KAE/DQ,GAAY,OAMpBzJ,KAAKY,QAAQiJ,gBAAkBH,QAE1B,IAAII,MAAO,uDAGhB9J,KAAKY,QAAQmJ,gBAAkBN,QAE1B,IAAIK,MAAO,mCAAkCb,0BAkBvCA,OAAEA,EAAF5I,KAAUA,EAAV8I,QAAyBA,OAEpCnJ,KAAKwG,kBAAqB,IAAIC,eAAe,sDAE3B,iBAAXwC,QAA6B,IAAIzI,UAAW,qCAE1C,IAATH,IAAoBqD,MAAMC,QAAQtD,SAAe,IAAIG,UAAW,mCAEpD,IAAZ2I,IAAsBA,EAAUnJ,KAAKkL,cAAc5B,oBAEhC,iBAAZH,IAAyBlB,GAAWkB,SAEtC,IAAI3I,UAAW,8CAQpBJ,EAJAqJ,GAAY,EACZC,GAAY,QAIV3F,EAAU,GAEV8H,EAAcnI,MAAMC,QAAQtD,MAEX,iBAAZ8I,EACX,OACSS,EAAS5J,KAAKkL,cAAcvB,eAAeR,QAElC,IAAXS,GAAqBA,EAAOlC,SAAWkC,EAAOtC,WAE/CoC,GAAY,EAE2B,mBAA5BE,EAAOtC,SAAS2B,KAExB7I,EAASyL,EAAcjC,EAAOtC,SAAS2B,MAAW5I,GAAQuJ,EAAOtC,SAAS2B,UAG3D,IAAX7I,GAAqB2D,EAAQI,KAAK/D,GAEtCqJ,GAAY,aAMb,MAAM/K,KAAQyK,EACnB,OACSS,EAAS5J,KAAKkL,cAAcvB,eAAejL,QAElC,IAAXkL,GAAqBA,EAAOlC,SAAWkC,EAAOtC,WAE/CoC,GAAY,EAE2B,mBAA5BE,EAAOtC,SAAS2B,KAExB7I,EAASyL,EAAcjC,EAAOtC,SAAS2B,MAAW5I,GAAQuJ,EAAOtC,SAAS2B,UAG3D,IAAX7I,GAAqB2D,EAAQI,KAAK/D,GAEtCqJ,GAAY,OAMpBzJ,KAAKY,QAAQiJ,gBAAkBH,QAE1B,IAAII,MAAO,uDAGhB9J,KAAKY,QAAQmJ,gBAAkBN,QAEzB,IAAIK,MAAO,mCAAkCb,cAIhDlF,EAAQ9E,OAAS,EAAI2E,QAAQC,IAAIE,GAASD,MAAMiC,UAE9CC,EAAWD,EAAOE,QAAQC,QAAoB,IAAVA,WAClCF,EAAS/G,aAET,cACA,SAAU+G,EAAS,kBACRA,MAEjB5F,0BAkBe6I,OAAEA,EAAFN,UAAUA,EAAY,GAAtBC,cAA0BA,EAAgB,GAA1CO,QAA8CA,OAE9DnJ,KAAKwG,kBAAqB,IAAIC,eAAe,0DAG1CuC,GAAiB,CAAEC,OAAAA,EAAQC,QAASlJ,KAAKkL,cAAevC,UAAAA,EAAWC,cAAAA,EAAeO,QAAAA,IAiB5FoC,YAAWtC,OAAEA,EAAF5I,KAAUA,EAAV8I,QAAyBA,OAE7BnJ,KAAKwG,kBAAqB,IAAIC,eAAe,sDAE3B,iBAAXwC,QAA6B,IAAIzI,UAAW,qCAE1C,IAATH,IAAoBqD,MAAMC,QAAQtD,SAAe,IAAIG,UAAW,mCAEpD,IAAZ2I,IAAsBA,EAAUnJ,KAAKkL,cAAc5B,oBAEhC,iBAAZH,IAAyBlB,GAAWkB,SAEtC,IAAI3I,UAAW,8CAQpBJ,EAJAqJ,GAAY,EACZC,GAAY,QAIV3F,EAAU,GAEV8H,EAAcnI,MAAMC,QAAQtD,MAEX,iBAAZ8I,EACX,OACSS,EAAS5J,KAAKkL,cAAcvB,eAAeR,QAElC,IAAXS,GAAqBA,EAAOlC,SAAWkC,EAAOtC,WAE/CoC,GAAY,EAE2B,mBAA5BE,EAAOtC,SAAS2B,KAExB7I,EAASyL,EAAcjC,EAAOtC,SAAS2B,MAAW5I,GAAQuJ,EAAOtC,SAAS2B,UAG3D,IAAX7I,GAAqB2D,EAAQI,KAAK/D,GAEtCqJ,GAAY,aAMb,MAAM/K,KAAQyK,EACnB,OACSS,EAAS5J,KAAKkL,cAAcvB,eAAejL,QAElC,IAAXkL,GAAqBA,EAAOlC,SAAWkC,EAAOtC,WAE/CoC,GAAY,EAE2B,mBAA5BE,EAAOtC,SAAS2B,KAExB7I,EAASyL,EAAcjC,EAAOtC,SAAS2B,MAAW5I,GAAQuJ,EAAOtC,SAAS2B,UAG3D,IAAX7I,GAAqB2D,EAAQI,KAAK/D,GAEtCqJ,GAAY,OAMpBzJ,KAAKY,QAAQiJ,gBAAkBH,QAE1B,IAAII,MAAO,uDAGhB9J,KAAKY,QAAQmJ,gBAAkBN,QAE1B,IAAIK,MAAO,mCAAkCb,cAI/ClF,EAAQ9E,OAAS,EAAI8E,EAAU3D,EAkBzCoL,iBAAgBvC,OAAEA,EAAFN,UAAUA,EAAY,GAAtBC,cAA0BA,EAAgB,GAA1CO,QAA8CA,OAEvDnJ,KAAKwG,kBAAqB,IAAIC,eAAe,0DCjiBxC,UAAyBwC,OAAEA,EAAFC,QAAUA,EAAVP,UAAmBA,EAAY,GAA/BC,cAAmCA,EAAgB,GAAnDO,QAAuDA,EAAvDvI,QACvCA,EADuCwI,WACrBA,GAAa,OAEP,iBAAXH,QAA6B,IAAIzI,UAAW,gCAC1B,iBAAlBoI,QAAoC,IAAIpI,UAAW,wCACrC,iBAAdmI,QAAgC,IAAInI,UAAW,yCAE1C,IAAZI,IAAsBA,EAAUsI,EAAQG,mBAC5B,IAAZF,IAAsBA,EAAUD,EAAQI,oBAErB,iBAAZH,IAAyBlB,GAAWkB,SAEtC,IAAI3I,UAAW,8CAIpB+I,EAAoB,QAClBC,EAAoB,OAGtBC,GAAY,EACZC,GAAY,QAGVlE,EAAK,IAAIkD,GAAkBC,EAAWC,MAErB,iBAAZO,EACX,OACSjD,EAAQgD,EAAQS,eAAeR,QAEvB,IAAVjD,GAAoBA,EAAMwB,SAAWxB,EAAMoB,WAE5CoC,GAAY,EAE0B,mBAA3BxD,EAAMoB,SAAS2B,KAEvBzD,EAAGnG,SAAW6G,EAAMqB,cACpB/B,EAAGsD,WAAa5C,EAAMxH,KACtB8G,EAAGuD,cAAgB7C,EAAMnF,KAAK6I,OAAOhJ,QAErCsF,EAAMoB,SAAS2B,GAAQzD,GAEvBiE,GAAY,EACZF,IACAC,EAAkBrF,KAAK+B,EAAMxH,iBAM9B,MAAMA,KAAQyK,EACnB,OACSjD,EAAQgD,EAAQS,eAAejL,QAEvB,IAAVwH,GAAoBA,EAAMwB,SAAWxB,EAAMoB,WAE5CoC,GAAY,EAE0B,mBAA3BxD,EAAMoB,SAAS2B,KAEvBzD,EAAGnG,SAAW6G,EAAMqB,cACpB/B,EAAGsD,WAAa5C,EAAMxH,KACtB8G,EAAGuD,cAAgB7C,EAAMnF,KAAK6I,OAAOhJ,QAErCsF,EAAMoB,SAAS2B,GAAQzD,GAEvBiE,GAAY,EACZF,IACAC,EAAkBrF,KAAK+B,EAAMxH,WAMrC0K,GAAcxI,EAAQiJ,gBAAkBH,QAEnC,IAAII,MAAO,uDAGhBV,GAAcxI,EAAQmJ,gBAAkBN,QAEnC,IAAIK,MAAO,mCAAkCb,cAItDzD,EAAGzE,KAAKiJ,sBAAwBT,EAChC/D,EAAGzE,KAAKkJ,sBAAwBT,EAEzBhE,EAAGzE,KD4cAyK,CAAgB,CAAEvC,OAAAA,EAAQC,QAASlJ,KAAKkL,cAAevC,UAAAA,EAAWC,cAAAA,EAAeO,QAAAA,IAkB3FlC,aAAY6E,YAAEA,EAAFC,YAAeA,EAAfC,WAA4BA,EAA5BC,WAAwCA,OAE7CjM,KAAKwG,kBAAqB,IAAIC,eAAe,mDAE7CqF,MAAAA,IAEDA,EAAYxK,IAAK,GAAE0K,iBAA2BhM,KAAKoL,YAAapL,MAChE8L,EAAYxK,IAAK,GAAE0K,uBAAiChM,KAAKgJ,iBAAkBhJ,MAC3E8L,EAAYxK,IAAK,GAAE0K,qBAA+BhM,KAAKqL,eAAgBrL,MACvE8L,EAAYxK,IAAK,GAAE0K,eAAyBhM,KAAKyJ,UAAWzJ,MAC5D8L,EAAYxK,IAAK,GAAE0K,WAAqBhM,KAAKsL,OAAQtL,MACrD8L,EAAYxK,IAAK,GAAE0K,gBAA0BhM,KAAKuL,WAAYvL,MAC9D8L,EAAYxK,IAAK,GAAE0K,sBAAgChM,KAAKwL,gBAAiBxL,OAGxE+L,MAAAA,IAEDA,EAAYvK,GAAI,GAAEyK,iBAA2BjM,KAAKoL,YAAapL,KAAM,CAAE+E,OAAO,IAC9EgH,EAAYvK,GAAI,GAAEyK,uBAAiCjM,KAAKgJ,iBAAkBhJ,KAAM,CAAE+E,OAAO,IACzFgH,EAAYvK,GAAI,GAAEyK,qBAA+BjM,KAAKqL,eAAgBrL,KAAM,CAAE+E,OAAO,IACrFgH,EAAYvK,GAAI,GAAEyK,eAAyBjM,KAAKyJ,UAAWzJ,KAAM,CAAE+E,OAAO,IAC1EgH,EAAYvK,GAAI,GAAEyK,WAAqBjM,KAAKsL,OAAQtL,KAAM,CAAE+E,OAAO,IACnEgH,EAAYvK,GAAI,GAAEyK,gBAA0BjM,KAAKuL,WAAYvL,KAAM,CAAE+E,OAAO,IAC5EgH,EAAYvK,GAAI,GAAEyK,sBAAgCjM,KAAKwL,gBAAiBxL,KAAM,CAAE+E,OAAO,KAS7FmH,WAAWtL,MAEJZ,KAAKwG,kBAAqB,IAAIC,eAAe,oDAcvD,MAAMiF,GAA4BzJ,UAEzBkK,EAAQ,MAIX5M,OAAO6M,oBAAoBnK,GAAKoK,SAASC,KAAwC,IAAzBH,EAAMI,QAAQD,IAAgBH,EAAMhI,KAAKmI,MACjGrK,EAAM1C,OAAOiN,eAAevK,SACtBA,MAAAA,GAAoCA,IAAQ1C,OAAOkN,kBAErDN,kBExhBK,MAwFZ5L,YAAYK,EAAU,sCAhFV,sCAQO,oCAQD,oCAYlB,CACG8L,YAAY,EACZC,gBAAgB,EAChBC,gBAAgB,EAChBC,mBAAmB,EACnBC,mBAAmB,EACnB/C,eAAe,EACfF,eAAe,oCAUF,IAAIkD,qCAQP,IAAIC,qCAQA,MAqBT5E,GAASxH,SAAkB,IAAIJ,UAAW,uCAEtB,IAArBI,EAAQvB,WAAwB+I,GAASxH,EAAQvB,gBAE5C,IAAImB,UAAW,kDAGK,IAAzBI,EAAQuK,cAA2D,iBAAzBvK,EAAQuK,mBAE7C,IAAI3K,UAAW,mDAGA,IAApBI,EAAQsI,UAAuBd,GAASxH,EAAQsI,eAE3C,IAAI1I,UAAW,+CAGM,IAA1BI,EAAQqM,eAA6D,mBAA1BrM,EAAQqM,gBACrDhF,GAAWrH,EAAQqM,qBAEZ,IAAIzM,UACR,6GAIDyH,GAAWrH,EAAQqM,mBAEf,MAAMA,KAAiBrM,EAAQqM,yBAEb9I,KAAK,IAAI8I,EAAcjN,iBAGd,IAA1BY,EAAQqM,0BAEM9I,KAAK,IAAIvD,EAAQqM,cAAcjN,YAGjDkM,WAAWtL,EAAQsI,SAAW,SAE9BjC,YAAY,CACd5H,cAA+B,IAArBuB,EAAQvB,SAAsBuB,EAAQvB,SAAW,IAAIiB,EAC/D6K,aAAcvK,EAAQuK,yBAgBlBN,EAAcqC,MAEjBlN,KAAKwG,kBAAqB,IAAIC,eAAe,sDAErB,iBAAjBoE,QAAmC,IAAIrK,UAAW,uCAE5B,iBAAtBqK,EAAanM,WAEf,IAAI8B,UACR,mDAAkDY,KAAKC,UAAUwJ,EAAc,KAAM,cAG9D,IAAxBA,EAAaP,QAAoD,iBAAxBO,EAAaP,UACvDO,EAAaP,kBAAkBE,WAEzB,IAAIhK,UACR,4DAA2DY,KAAKC,UAAUwJ,EAAc,KAAM,cAGtE,IAAzBA,EAAajK,SAAsD,iBAAzBiK,EAAajK,cAElD,IAAIJ,UACR,uDAAsDY,KAAKC,UAAUwJ,EAAc,KAAM,cAG3E,IAAfqC,GAA+C,iBAAfA,QAE3B,IAAI1M,UAAW,6CAA4CY,KAAKC,UAAUwJ,EAAc,KAAM,SAInGjJ,WAAgBuL,IAAItC,EAAanM,YAE5B,IAAIoL,MAAO,sCAAqCe,EAAanM,oBAClE0C,KAAKC,UAAUwJ,EAAc,KAAM,SAKnCjJ,WAAmBuL,IAAItC,EAAanM,YAE/B,IAAIoL,MAAO,+CAA8Ce,EAAanM,oBAC3E0C,KAAKC,UAAUwJ,EAAc,KAAM,UAKnCvD,EAAUgD,EAAQ8C,gBAFHC,IAAIxC,EAAanM,MAKC,iBAA1BmM,EAAavD,UAA0D,mBAA1BuD,EAAavD,SAElEA,EAAWuD,EAAavD,SAExBgD,EAASO,EAAanM,KAEtB0O,EAAO,eAGV,CAEG9C,EAASO,EAAaP,QAAUO,EAAanM,eAIpC0B,QVjUH,yBAaMkN,WAAEA,EAAUC,cAAEA,GAA2B,SAElDD,aAAsB9C,MAA8B,iBAAf8C,EAExC,MAAM,IAAI9M,UAAU,mDAGnB+M,GAAqD,mBAAlBA,EAEpC,MAAM,IAAI/M,UAAU,2CAGjBsK,QAAe0C,OAAOF,GAEtBG,EAAWH,aAAsB9C,IAAM8C,EAAWI,WAAaJ,EAE/DF,EAAO,WAAUE,aAAsB9C,KACtB,iBAAf8C,GAA2BA,EAAW5C,MAAMtD,GAAgB,MAAQ,cAIrE,CAAEuG,SAAUF,EAAUnG,kBAFZiG,EAA2BA,EAAczC,GAAUA,EAE7B8C,SAAaH,SAAAA,EAAU3C,OAAAA,EAAQwC,WAAAA,EAAYF,KAAAA,KU+R1CS,KAAK,CAAEP,WAAYhD,EAAQiD,cAAAA,KAGtC,OAAnB3L,uBAEcyB,QAAQ,YACrB,8BAA6BjD,EAAOwN,MAAQ,SAAW,cAAcxN,EAAOqN,YAGjFnG,EAAWlH,EAAOkH,SAClB8F,EAAOhN,EAAOgN,KAEjB,MAAOjH,oBAGe2H,OAAOjD,EAAanM,MAEjC,IAAIoL,MAAO,qDAAoDQ,uBAC/DlJ,KAAKC,UAAUwJ,EAAc,KAAM,SAAS1E,MAKpDmE,aAAkBE,MAEnBF,EAASA,EAAOoD,kBAQbK,EAAa3M,KAAKS,MAAMT,KAAKC,UACnC,CACG6H,QACA,CACGiC,aAAcnL,KAAKgO,cACnBC,WAAa,GAAEjO,KAAKgO,iBAAiBnD,EAAanM,QAGrDoM,OAAQoC,GAAc,GAEtBtD,OACA,CACGlL,KAAMmM,EAAanM,KACnB4L,OAAAA,EACAC,cAAeF,GAAaC,GAC5B8C,KAAAA,EACAxM,QAASiK,EAAajK,SAAW,OAIvCkH,GAAWiG,EAAY,CAAC,kBAElBxG,EAAmC,OAAnB3F,iBAA8C,IAAnBA,WAChD,IAAI0E,IAActG,eAAuC,EAEpDkG,EAAQ,IAAImB,GAAYwD,EAAanM,KAAMqP,EAAYzG,EAAUC,cAEvD2G,IAAIrD,EAAanM,KAAMwH,cACpB4H,OAAOjD,EAAanM,YAGjCyP,QAAmBnF,GAAiB,CACvCC,OAAQ,eACRC,QAASlJ,KACTmJ,QAAS0B,EAAanM,KACtB0K,YAAY,UAGsB,iBAA1B+E,EAAWtG,aAEnB3B,EAAM2B,WAAasG,EAAWtG,WAIW,iBAA9BsG,EAAWtG,WAAWuG,KAAgE,mBAArCD,EAAWtG,WAAWuG,IAAIC,QAEnFF,EAAWtG,WAAWuG,IAAIC,QAAO,EAAGvD,OAAAA,WAE5BwD,OAAO,CAAE1E,OAAQiB,EAAanM,KAAM4I,SAAUiG,GAAczC,WAMtE9K,gBAEK4B,WAAekF,aAAc,uCAAuCiH,GAGtEA,eAYGQ,EAAerB,MAErBlN,KAAKwG,kBAAqB,IAAIC,eAAe,uDAE5CwB,GAAWsG,SAAwB,IAAI/N,UAAW,0CAEjDgO,EAAc,OAEf,MAAM3D,KAAgB0D,EAC3B,OACSnO,QAAeJ,KAAKqN,IAAIxC,EAAcqC,GAExC9M,GAAUoO,EAAYrK,KAAK/D,UAG3BoO,qBAcS3D,EAAcqC,MAG1BlN,KAAKwG,kBAAqB,IAAIC,eAAe,0DAEzC7E,WAAc8K,gBAAkD,EAArC1M,KAAKqN,IAAIxC,EAAcqC,yBAcvCqB,EAAerB,MAG9BlN,KAAKwG,kBAAqB,IAAIC,eAAe,0DAEzC7E,WAAc8K,WAAsD,GAAzC1M,KAAKyO,OAAOF,EAAerB,GASjEwB,yBAEO1O,KAAKwG,kBAAqB,IAAIC,eAAe,sDAG1B,OAAnB7E,iBAAiC,IAAI6E,eAAe,iDAElDc,EAAgB,IAAIjB,IAActG,4BAGlBmE,KAAKoD,GAEpBA,EAWVoH,qBAAqBjQ,MAEdsB,KAAKwG,kBAAqB,IAAIC,eAAe,sDAG1B,OAAnB7E,iBAAiC,IAAI6E,eAAe,iDAElDmI,EAAoB7H,EAAe8H,aAAW7O,SAAgBtB,qBAG/CyF,KAAKyK,GAEnBA,EAAkB5H,kCAUrBhH,KAAKwG,kBAAqB,IAAIC,eAAe,yDAG3C1C,QAAgB/D,KAAK8O,gBAGtB,MAAMF,OAAqB5O,SAE7B4O,EAAkBlI,oBAGE,QAGlB,MAAMa,OAAiBvH,SAEzBuH,EAAcb,oBAGO,IAED,OAAnB9E,iBAA8C,IAAnBA,wBAEbN,IAAK,GAAEtB,KAAKgO,0BAA2BhO,KAAK+O,aAAc/O,iBAC1DsB,IAAK,GAAEtB,KAAKgO,8BAA+BhO,KAAKgP,gBAAiBhP,iBACjEsB,IAAK,GAAEtB,KAAKgO,sCAAuChO,KAAKiP,iBAAkBjP,iBAC1EsB,IAAK,GAAEtB,KAAKgO,6BAA8BhO,KAAKkP,gBAAiBlP,iBAChEsB,IAAK,GAAEtB,KAAKgO,iCAAkChO,KAAKmP,mBAAoBnP,iBACvEsB,IAAK,GAAEtB,KAAKgO,4BAA6BhO,KAAKoP,WAAYpP,iBAC1DsB,IAAK,GAAEtB,KAAKgO,oCAAqChO,KAAKqP,iBAAkBrP,iBACxEsB,IAAK,GAAEtB,KAAKgO,gCAAiChO,KAAKsP,cAAetP,iBACjEsB,IAAK,GAAEtB,KAAKgO,kCAAmChO,KAAKuP,gBAAiBvP,iBACrEsB,IAAK,GAAEtB,KAAKgO,iCAAkChO,KAAKwP,eAAgBxP,iBACnEsB,IAAK,GAAEtB,KAAKgO,4BAA6BhO,KAAKqJ,WAAYrJ,iBAC1DsB,IAAK,GAAEtB,KAAKgO,2BAA4BhO,KAAKyP,WAAYzP,iBACzDsB,IAAK,GAAEtB,KAAKgO,gCAAiChO,KAAK4K,cAAe5K,iBACjEsB,IAAK,GAAEtB,KAAKgO,4BAA6BhO,KAAK0P,oBAAqB1P,iBACnEsB,IAAK,GAAEtB,KAAKgO,4BAA6BhO,KAAK2P,oBAAqB3P,WAGhF,MAAM4P,OAAiB5P,eAEnB4P,EAAclJ,QAAQ,CAAErH,WAAUW,SAAgBmL,aAAcnL,KAAKgO,iCAGxD,cACJ,gBACD,MAEVjK,8BAcH/D,KAAKwG,kBAAqB,IAAIC,eAAe,0DAEzC7E,WAAc+K,eAAkC,GAAjB3M,KAAK0G,mCAUjB,OAApB9E,iBAAgD,IAApBA,WAatCwN,YAAWjG,QAAEA,EAAU,IAAO,OAEvBnJ,KAAKwG,kBAAqB,IAAIC,eAAe,sDAE1B,iBAAZ0C,IAAyBlB,GAAWkB,SAEtC,IAAI3I,UAAW,6CAID,iBAAZ2I,EACX,OACSjD,EAAQtE,WAAgBiO,IAAI1G,eACjB,IAAVjD,GAAoBA,EAAMwB,cAG9B3D,EAAU,OAEZnE,EAAQ,MAEP,MAAMgK,KAAUT,EACrB,OACSjD,EAAQtE,WAAgBiO,IAAIjG,GAC5BkG,OAAmB,IAAV5J,EACfnC,EAAQI,KAAK,CAAEyF,OAAAA,EAAQlC,QAASoI,GAAU5J,EAAMwB,QAASoI,OAAAA,IACzDlQ,OAIW,IAAVA,MAEI,MAAOgK,EAAQ1D,KAAUtE,WAAgB+E,UAC9C,OACSmJ,OAAmB,IAAV5J,EACfnC,EAAQI,KAAK,CAAEyF,OAAAA,EAAQlC,QAASoI,GAAU5J,EAAMwB,QAASoI,OAAAA,WAIxD/L,EAQVgM,iBAEO/P,KAAKwG,kBAAqB,IAAIC,eAAe,4DAE1CzG,SAQVqJ,gBAEOrJ,KAAKwG,kBAAqB,IAAIC,eAAe,0DAE1CrF,KAAKS,MAAMT,KAAKC,YAAUrB,WAYpCqP,kBAAiB1N,MAAEA,OAEZ3B,KAAKwG,kBAAqB,IAAIC,eAAe,sDAE5B,iBAAV9E,KAAwBA,aAAiBD,cAE3C,IAAIlB,UAAW,4CAGlBwP,EAAehQ,KAAKuP,kBAEpBxL,EAAU,MAEK,iBAAVpC,MAEH,MAAMuE,KAAS8J,EAEb9J,EAAMzH,OAAO+J,SAAS7G,IAAUoC,EAAQI,KAAK+B,EAAM0D,iBAKrD,MAAM1D,KAAS8J,MAEZ,MAAMC,KAAc/J,EAAMzH,UAExBkD,EAAMzC,KAAK+Q,GACf,CACGlM,EAAQI,KAAK+B,EAAM0D,qBAOxB7F,EAYVuL,eAAcnG,QAAEA,EAAU,IAAO,OAE1BnJ,KAAKwG,kBAAqB,IAAIC,eAAe,sDAE1B,iBAAZ0C,IAAyBlB,GAAWkB,SAEtC,IAAI3I,UAAW,6CAID,iBAAZ2I,EACX,OACSjD,EAAQtE,WAAgBiO,IAAI1G,eACjB,IAAVjD,EAAmB9E,KAAKS,MAAMT,KAAKC,UAAU6E,EAAMnF,YAAS,QAGhEgD,EAAU,OAEZnE,EAAQ,MAEP,MAAMlB,KAAQyK,EACnB,OACSjD,EAAQtE,WAAgBiO,IAAInR,QAEpB,IAAVwH,GAEDnC,EAAQI,KAAK/C,KAAKS,MAAMT,KAAKC,UAAU6E,EAAMnF,QAEhDnB,OAIW,IAAVA,MAEI,MAAMsG,KAAStE,WAAgBmE,cAEnB,IAAVG,GAEDnC,EAAQI,KAAK/C,KAAKS,MAAMT,KAAKC,UAAU6E,EAAMnF,eAK/CgD,EAWV4F,eAAeC,MAER5J,KAAKwG,kBAAqB,IAAIC,eAAe,0DAE1C7E,WAAgBiO,IAAIjG,GAY9B2F,iBAAgBpG,QAAEA,EAAU,IAAO,OAE5BnJ,KAAKwG,kBAAqB,IAAIC,eAAe,sDAE1B,iBAAZ0C,IAAyBlB,GAAWkB,SAEtC,IAAI3I,UAAW,6CAID,iBAAZ2I,EACX,OACSjD,EAAQtE,WAAgBiO,IAAI1G,eACjB,IAAVjD,GAAoBA,EAAMqB,cAChC7D,MAAMiE,KAAKzB,EAAMqB,cAAc2I,aAAatE,OAA8B,SAGxE7H,EAAU,OAEZnE,EAAQ,MAEP,MAAMgK,KAAUT,EACrB,OACSjD,EAAQtE,WAAgBiO,IAAIjG,QAEpB,IAAV1D,GAEDnC,EAAQI,KAAK,CACVyF,OAAAA,EACAnL,OAAQyH,EAAMqB,cACb7D,MAAMiE,KAAKzB,EAAMqB,cAAc2I,aAAatE,OAA8B,KAGjFhM,OAIW,IAAVA,MAEI,MAAMsG,KAAStE,WAAgBmE,cAEnB,IAAVG,GAEDnC,EAAQI,KAAK,CACVyF,OAAQ1D,EAAMxH,KACdD,OAAQyH,EAAMqB,cACb7D,MAAMiE,KAAKzB,EAAMqB,cAAc2I,aAAatE,OAA8B,YAMhF7H,EASVuF,sBAEOtJ,KAAKwG,kBAAqB,IAAIC,eAAe,0DAE1C7E,WAAgBpC,OAS1BmM,wBAEO3L,KAAKwG,kBAAqB,IAAIC,eAAe,0DAE1C7E,WAAgBmE,SAY1ByJ,gBAAe9H,QAAEA,GAAqB,OAE/B1H,KAAKwG,kBAAqB,IAAIC,eAAe,2DAEjC,IAAZiB,GAAyC,kBAAZA,QAExB,IAAIlH,UAAW,qCAGlBiL,OAA8B,IAAZ/D,EAElB3D,EAAU,OAEX,MAAMmC,KAAStE,WAAgBmE,UAE7B0F,GAAmBvF,EAAMwB,UAAYA,IAAW3D,EAAQI,KAAK+B,EAAMxH,aAGnEqF,EAAQ6H,OAalB6D,YAAWtG,QAAEA,EAAU,IAAO,OAEvBnJ,KAAKwG,kBAAqB,IAAIC,eAAe,sDAE1B,iBAAZ0C,IAAyBlB,GAAWkB,SAEtC,IAAI3I,UAAW,6CAID,iBAAZ2I,SAEDvH,WAAgBuL,IAAIhE,OAG1BvJ,EAAQ,MAGP,MAAMlB,KAAQyK,EACnB,KACQvH,WAAgBuL,IAAIzO,UAAgB,EAEzCkB,WAIW,IAAVA,GAE+B,IAAzBgC,WAAgBuO,KAa7BvF,cAAcC,UAEJD,GAAcC,iBAgBXjB,OAAEA,EAAFtC,SAAUA,EAAV8I,OAA6BA,GAAS,OAE1B,iBAAXxG,QAA6B,IAAIpJ,UAAW,qCACtC,IAAb8G,GAA2C,iBAAbA,QAA+B,IAAI9G,UAAW,mCAC1D,kBAAX4P,QAA8B,IAAI5P,UAAW,oCAElD0F,EAAQtE,WAAgBiO,IAAIjG,WAEpB,IAAV1D,SAA2B,MAG3BmK,EAEA5N,MAYD4N,SAPyBrH,GAAiB,CACvCC,OAAQ,iBACRC,QAASlJ,KACTmJ,QAASS,EACTR,YAAY,KAGIiH,MAEtB,MAAOlK,GAEJ1D,EAAQ0D,EAIXD,EAAMsB,QAEFtB,EAAMqB,yBAAyBjB,GAAiBJ,EAAMqB,cAAcjG,MAEhD,iBAAbgG,IAERpB,EAAMoB,SAAWA,SAId6G,QAAmBnF,GAAiB,CACvCC,OAAQ,eACRC,QAASlJ,KACTmJ,QAASS,EACThB,cAAe,CAAEyH,MAAAA,GACjBjH,YAAY,QAMRxH,aAAmBwO,SAEdxO,WAAekF,aAAc,0CAClC1F,KAAKS,MAAMT,KAAKC,UAAU6E,EAAMnF,QAGvC,MAAOoF,QAGU,IAAV1D,IAAoBA,EAAQ0D,MAGE,iBAA1BgI,EAAWtG,aAEnB3B,EAAM2B,WAAasG,EAAWtG,WAIW,iBAA9BsG,EAAWtG,WAAWuG,KAAgE,mBAArCD,EAAWtG,WAAWuG,IAAIC,QAEnFF,EAAWtG,WAAWuG,IAAIC,QAAO,EAAGvD,OAAAA,WAE5BwD,OAAO,CAAE1E,OAAAA,EAAQtC,SAAUiG,GAAczC,SAOnDrI,QAAeA,SAEZ,gBAaG0G,QAAEA,kBAERnJ,KAAKwG,kBAAqB,IAAIC,eAAe,sDAE1B,iBAAZ0C,IAAyBlB,GAAWkB,SAEtC,IAAI3I,UAAW,gDAGlB8P,EAAcxK,eAAOI,SAElBqK,EAAS,GAETzH,EAAa5C,EAAMxH,eAKhBsK,GAAiB,CAAEC,OAAQ,iBAAkBC,QAASsH,EAAMrH,QAASL,EAAYM,YAAY,IAEtG,MAAOjD,GAEJoK,EAAOpM,KAAKgC,GAGfD,EAAMsB,QAEFtB,EAAMqB,yBAAyBjB,GAAiBJ,EAAMqB,cAAcb,YAExE8J,MAAgB1C,OAAOhF,SAKhB0H,aAEK5O,EAAA4O,MAAe1J,aAAc,yCAClC1F,KAAKS,MAAMT,KAAKC,UAAU6E,EAAMnF,QAGvC,MAAOoF,GAEJoK,EAAOpM,KAAKgC,SAGR,CAAEyD,OAAQd,EAAY2H,QAA2B,IAAlBF,EAAOtR,OAAcsR,OAAAA,IAGxDxM,EAAU,MAGO,iBAAZoF,EACX,OACSjD,EAAQtE,WAAgBiO,IAAI1G,QAEpB,IAAVjD,GAEDnC,EAAQI,WAAWmM,EAAYpK,aAK7B,MAAMxH,KAAQyK,EACnB,OACSjD,EAAQtE,WAAgBiO,IAAInR,QAEpB,IAAVwH,GAEDnC,EAAQI,WAAWmM,EAAYpK,WAKjCnC,uBAUH/D,KAAKwG,kBAAqB,IAAIC,eAAe,0DAE1CzG,KAAK0Q,OAAO,CAAEvH,QAASzF,MAAMiE,KAAK/F,WAAgBpC,gCActCZ,MAGfoB,KAAKwG,kBAAqB,IAAIC,eAAe,0DAEzC7E,WAAcgL,eAAqC,GAApB5M,KAAK0Q,OAAO9R,iCAa/CoB,KAAKwG,kBAAqB,IAAIC,eAAe,0DAEzC7E,WAAcgL,eAAoC,GAAnB5M,KAAK8O,YAY/C6B,YAAWjJ,QAAEA,EAAFyB,QAAWA,EAAU,QAEzBnJ,KAAKwG,kBAAqB,IAAIC,eAAe,sDAE1B,iBAAZ0C,IAAyBlB,GAAWkB,SAEtC,IAAI3I,UAAW,6CAGD,kBAAZkH,QAA+B,IAAIlH,UAAW,qCAEnDoQ,EAAmB1K,SAER,IAAVA,IAEDA,EAAMwB,QAAUA,IAGZ1H,qBAEcqD,QAAS,yCAAyC9D,OAAOsJ,OAAO,CAC5EnB,QAAAA,GACAtG,KAAKS,MAAMT,KAAKC,UAAU6E,EAAMnF,WAMrB,iBAAZoI,GAERyH,EAAgBhP,WAAgBiO,IAAI1G,QAGnCvJ,EAAQ,MAGP,MAAMlB,KAAQyK,EAEhByH,EAAgBhP,WAAgBiO,IAAInR,IACpCkB,OAIW,IAAVA,MAEI,MAAMsG,KAAStE,WAAgBmE,SAEjC6K,EAAgB1K,GAazBwJ,oBAAoB9Q,MAGboB,KAAKwG,kBAAqB,IAAIC,eAAe,mDAE5C7E,WAAciL,wBAA0B8D,WAAW/R,sBAezCS,SAAEA,EAAF8L,aAAYA,EAAe,eAEtCnL,KAAKwG,kBAAqB,IAAIC,eAAe,uDAE5C2B,GAAS/I,SAAmB,IAAImB,UAAW,qCACpB,iBAAjB2K,QAAmC,IAAI3K,UAAW,sCAGzDnB,MAAaW,sBAEXgM,EAAahM,KAAKgO,sBAQnBA,cAAgB7C,EAGjBvJ,WAAgBuO,KAAO,EAC3B,OAESnH,GAAiB,CAAEC,OAAQ,iBAAkBC,QAASlJ,KAAMoJ,YAAY,QAEzE,MAAMlD,KAAStE,WAAgBmE,SACpC,YAIaG,EAAMoB,SAASG,gBAGlBtB,IAEPD,EAAMnF,KAAKmI,QAAQiC,aAAeA,EAClCjF,EAAMnF,KAAKmI,QAAQ+E,WAAc,GAAE9C,KAAgBjF,EAAMxH,OAErDwH,EAAMqB,yBAAyBjB,GAAiBJ,EAAMqB,cAAcb,UAExER,EAAMqB,cAAgB,IAAIjB,EAAcjH,GAGpC6G,EAAMwB,eAEDsB,GAAiB,CACpBC,OAAQ,eACRC,QAASlJ,KACTmJ,QAASjD,EAAMxH,KACf0K,YAAY,KAMD,OAAnBxH,wBAEcN,IAAK,GAAE0K,cAAwBhM,KAAK+O,aAAc/O,iBAClDsB,IAAK,GAAE0K,kBAA4BhM,KAAKgP,gBAAiBhP,iBACzDsB,IAAK,GAAE0K,0BAAoChM,KAAKiP,iBAAkBjP,iBAClEsB,IAAK,GAAE0K,iBAA2BhM,KAAKkP,gBAAiBlP,iBACxDsB,IAAK,GAAE0K,qBAA+BhM,KAAKmP,mBAAoBnP,iBAC/DsB,IAAK,GAAE0K,gBAA0BhM,KAAKoP,WAAYpP,iBAClDsB,IAAK,GAAE0K,gBAA0BhM,KAAKqJ,WAAYrJ,iBAClDsB,IAAK,GAAE0K,wBAAkChM,KAAKqP,iBAAkBrP,iBAChEsB,IAAK,GAAE0K,oBAA8BhM,KAAKsP,cAAetP,iBACzDsB,IAAK,GAAE0K,sBAAgChM,KAAKuP,gBAAiBvP,iBAC7DsB,IAAK,GAAE0K,qBAA+BhM,KAAKwP,eAAgBxP,iBAC3DsB,IAAK,GAAE0K,eAAyBhM,KAAKyP,WAAYzP,iBACjDsB,IAAK,GAAE0K,oBAA8BhM,KAAK4K,cAAe5K,iBACzDsB,IAAK,GAAE0K,gBAA0BhM,KAAK0P,oBAAqB1P,iBAC3DsB,IAAK,GAAE0K,gBAA0BhM,KAAK2P,oBAAqB3P,OAG7EX,EAASmC,GAAI,GAAE2J,cAA0BnL,KAAK+O,aAAc/O,KAAM,CAAE+E,OAAO,IAC3E1F,EAASmC,GAAI,GAAE2J,kBAA8BnL,KAAKgP,gBAAiBhP,KAAM,CAAE+E,OAAO,IAClF1F,EAASmC,GAAI,GAAE2J,0BAAsCnL,KAAKiP,iBAAkBjP,KAAM,CAAE+E,OAAO,IAC3F1F,EAASmC,GAAI,GAAE2J,iBAA6BnL,KAAKkP,gBAAiBlP,KAAM,CAAE+E,OAAO,IACjF1F,EAASmC,GAAI,GAAE2J,qBAAiCnL,KAAKmP,mBAAoBnP,KAAM,CAAE+E,OAAO,IACxF1F,EAASmC,GAAI,GAAE2J,gBAA4BnL,KAAKoP,WAAYpP,KAAM,CAAE+E,OAAO,IAC3E1F,EAASmC,GAAI,GAAE2J,gBAA4BnL,KAAKqJ,WAAYrJ,KAAM,CAAE+E,OAAO,IAC3E1F,EAASmC,GAAI,GAAE2J,wBAAoCnL,KAAKqP,iBAAkBrP,KAAM,CAAE+E,OAAO,IACzF1F,EAASmC,GAAI,GAAE2J,oBAAgCnL,KAAKsP,cAAetP,KAAM,CAAE+E,OAAO,IAClF1F,EAASmC,GAAI,GAAE2J,sBAAkCnL,KAAKuP,gBAAiBvP,KAAM,CAAE+E,OAAO,IACtF1F,EAASmC,GAAI,GAAE2J,qBAAiCnL,KAAKwP,eAAgBxP,KAAM,CAAE+E,OAAO,IACpF1F,EAASmC,GAAI,GAAE2J,eAA2BnL,KAAKyP,WAAYzP,KAAM,CAAE+E,OAAO,IAC1E1F,EAASmC,GAAI,GAAE2J,oBAAgCnL,KAAK4K,cAAe5K,KAAM,CAAE+E,OAAO,IAClF1F,EAASmC,GAAI,GAAE2J,gBAA4BnL,KAAK0P,oBAAqB1P,KAAM,CAAE+E,OAAO,IACpF1F,EAASmC,GAAI,GAAE2J,gBAA4BnL,KAAK2P,oBAAqB3P,KAAM,CAAE+E,OAAO,QAE/E,MAAM6K,OAAiB5P,SAEzB4P,EAAc3I,YAAY,CACvB6E,cAAa9L,SACb+L,YAAa1M,EACb2M,WAAAA,EACAC,WAAYd,QAKb,MAAMyD,OAAqB5O,SAE7B4O,EAAkB3H,YAAY5H,aAGhBA,GAQpB6M,WAAWtL,MAEJZ,KAAKwG,kBAAqB,IAAIC,eAAe,uDAE5C2B,GAASxH,SAAkB,IAAIJ,UAAW,+BAEb,kBAAvBI,EAAQ8L,wBAA0CA,WAAa9L,EAAQ8L,YAE5C,kBAA3B9L,EAAQ+L,4BAA8CA,eAAiB/L,EAAQ+L,gBAEpD,kBAA3B/L,EAAQgM,4BAA8CA,eAAiBhM,EAAQgM,gBAEjD,kBAA9BhM,EAAQiM,+BAEFA,kBAAoBjM,EAAQiM,mBAGJ,kBAA9BjM,EAAQkM,+BAEFA,kBAAoBlM,EAAQkM,mBAGR,kBAA1BlM,EAAQmJ,2BAA6CA,cAAgBnJ,EAAQmJ,eAEnD,kBAA1BnJ,EAAQiJ,2BAA6CA,cAAgBjJ,EAAQiJ,mBAEnF,MAAM+F,OAAiB5P,SAEzB4P,EAAc1D,WAAWtL,GAa/B+O,oBAAoB/O,MAGbZ,KAAKwG,kBAAqB,IAAIC,eAAe,mDAE5C7E,WAAckL,wBAA0BZ,WAAWtL"}